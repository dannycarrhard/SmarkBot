/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20010Nodes
    /// </summary>
    [DataContract]
        public partial class InlineResponse20010Nodes :  IEquatable<InlineResponse20010Nodes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20010Nodes" /> class.
        /// </summary>
        /// <param name="children">children (required).</param>
        /// <param name="count">count (required).</param>
        /// <param name="filter">filter (required).</param>
        /// <param name="fullSlug">fullSlug (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="layoutPath">layoutPath.</param>
        /// <param name="title">title (required).</param>
        /// <param name="url">url.</param>
        public InlineResponse20010Nodes(List<string> children = default(List<string>), int? count = default(int?), InlineResponse20010Filter filter = default(InlineResponse20010Filter), string fullSlug = default(string), string id = default(string), string layoutPath = default(string), string title = default(string), string url = default(string))
        {
            // to ensure "children" is required (not null)
            if (children == null)
            {
                throw new InvalidDataException("children is a required property for InlineResponse20010Nodes and cannot be null");
            }
            else
            {
                this.Children = children;
            }
            // to ensure "count" is required (not null)
            if (count == null)
            {
                throw new InvalidDataException("count is a required property for InlineResponse20010Nodes and cannot be null");
            }
            else
            {
                this.Count = count;
            }
            // to ensure "filter" is required (not null)
            if (filter == null)
            {
                throw new InvalidDataException("filter is a required property for InlineResponse20010Nodes and cannot be null");
            }
            else
            {
                this.Filter = filter;
            }
            // to ensure "fullSlug" is required (not null)
            if (fullSlug == null)
            {
                throw new InvalidDataException("fullSlug is a required property for InlineResponse20010Nodes and cannot be null");
            }
            else
            {
                this.FullSlug = fullSlug;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for InlineResponse20010Nodes and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for InlineResponse20010Nodes and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            this.LayoutPath = layoutPath;
            this.Url = url;
        }
        
        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<string> Children { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public InlineResponse20010Filter Filter { get; set; }

        /// <summary>
        /// Gets or Sets FullSlug
        /// </summary>
        [DataMember(Name="full_slug", EmitDefaultValue=false)]
        public string FullSlug { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LayoutPath
        /// </summary>
        [DataMember(Name="layout_path", EmitDefaultValue=false)]
        public string LayoutPath { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20010Nodes {\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  FullSlug: ").Append(FullSlug).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LayoutPath: ").Append(LayoutPath).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20010Nodes);
        }

        /// <summary>
        /// Returns true if InlineResponse20010Nodes instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20010Nodes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20010Nodes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.FullSlug == input.FullSlug ||
                    (this.FullSlug != null &&
                    this.FullSlug.Equals(input.FullSlug))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LayoutPath == input.LayoutPath ||
                    (this.LayoutPath != null &&
                    this.LayoutPath.Equals(input.LayoutPath))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this.FullSlug != null)
                    hashCode = hashCode * 59 + this.FullSlug.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LayoutPath != null)
                    hashCode = hashCode * 59 + this.LayoutPath.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
