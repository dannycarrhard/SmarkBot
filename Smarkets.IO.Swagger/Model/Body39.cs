/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body39
    /// </summary>
    [DataContract]
        public partial class Body39 :  IEquatable<Body39>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body39" /> class.
        /// </summary>
        /// <param name="approve">User consents to third party accessing data (required).</param>
        /// <param name="clientId">OAuth2 Client ID (required).</param>
        /// <param name="redirectUri">Client redirect address (required).</param>
        /// <param name="scopes">scopes (required).</param>
        /// <param name="state">An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery (required).</param>
        public Body39(bool? approve = default(bool?), int? clientId = default(int?), string redirectUri = default(string), List<string> scopes = default(List<string>), string state = default(string))
        {
            // to ensure "approve" is required (not null)
            if (approve == null)
            {
                throw new InvalidDataException("approve is a required property for Body39 and cannot be null");
            }
            else
            {
                this.Approve = approve;
            }
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for Body39 and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }
            // to ensure "redirectUri" is required (not null)
            if (redirectUri == null)
            {
                throw new InvalidDataException("redirectUri is a required property for Body39 and cannot be null");
            }
            else
            {
                this.RedirectUri = redirectUri;
            }
            // to ensure "scopes" is required (not null)
            if (scopes == null)
            {
                throw new InvalidDataException("scopes is a required property for Body39 and cannot be null");
            }
            else
            {
                this.Scopes = scopes;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for Body39 and cannot be null");
            }
            else
            {
                this.State = state;
            }
        }
        
        /// <summary>
        /// User consents to third party accessing data
        /// </summary>
        /// <value>User consents to third party accessing data</value>
        [DataMember(Name="approve", EmitDefaultValue=false)]
        public bool? Approve { get; set; }

        /// <summary>
        /// OAuth2 Client ID
        /// </summary>
        /// <value>OAuth2 Client ID</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public int? ClientId { get; set; }

        /// <summary>
        /// Client redirect address
        /// </summary>
        /// <value>Client redirect address</value>
        [DataMember(Name="redirect_uri", EmitDefaultValue=false)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [DataMember(Name="scopes", EmitDefaultValue=false)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery
        /// </summary>
        /// <value>An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body39 {\n");
            sb.Append("  Approve: ").Append(Approve).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body39);
        }

        /// <summary>
        /// Returns true if Body39 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body39 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body39 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Approve == input.Approve ||
                    (this.Approve != null &&
                    this.Approve.Equals(input.Approve))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.RedirectUri == input.RedirectUri ||
                    (this.RedirectUri != null &&
                    this.RedirectUri.Equals(input.RedirectUri))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Approve != null)
                    hashCode = hashCode * 59 + this.Approve.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.RedirectUri != null)
                    hashCode = hashCode * 59 + this.RedirectUri.GetHashCode();
                if (this.Scopes != null)
                    hashCode = hashCode * 59 + this.Scopes.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
