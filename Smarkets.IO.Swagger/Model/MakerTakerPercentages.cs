/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MakerTakerPercentages
    /// </summary>
    [DataContract]
        public partial class MakerTakerPercentages :  IEquatable<MakerTakerPercentages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MakerTakerPercentages" /> class.
        /// </summary>
        /// <param name="datetimeMax">datetimeMax.</param>
        /// <param name="datetimeMin">datetimeMin.</param>
        /// <param name="makerPercentage">makerPercentage (required).</param>
        /// <param name="takerPercentage">takerPercentage (required).</param>
        public MakerTakerPercentages(DateTime? datetimeMax = default(DateTime?), DateTime? datetimeMin = default(DateTime?), string makerPercentage = default(string), string takerPercentage = default(string))
        {
            // to ensure "makerPercentage" is required (not null)
            if (makerPercentage == null)
            {
                throw new InvalidDataException("makerPercentage is a required property for MakerTakerPercentages and cannot be null");
            }
            else
            {
                this.MakerPercentage = makerPercentage;
            }
            // to ensure "takerPercentage" is required (not null)
            if (takerPercentage == null)
            {
                throw new InvalidDataException("takerPercentage is a required property for MakerTakerPercentages and cannot be null");
            }
            else
            {
                this.TakerPercentage = takerPercentage;
            }
            this.DatetimeMax = datetimeMax;
            this.DatetimeMin = datetimeMin;
        }
        
        /// <summary>
        /// Gets or Sets DatetimeMax
        /// </summary>
        [DataMember(Name="datetime_max", EmitDefaultValue=false)]
        public DateTime? DatetimeMax { get; set; }

        /// <summary>
        /// Gets or Sets DatetimeMin
        /// </summary>
        [DataMember(Name="datetime_min", EmitDefaultValue=false)]
        public DateTime? DatetimeMin { get; set; }

        /// <summary>
        /// Gets or Sets MakerPercentage
        /// </summary>
        [DataMember(Name="maker_percentage", EmitDefaultValue=false)]
        public string MakerPercentage { get; set; }

        /// <summary>
        /// Gets or Sets TakerPercentage
        /// </summary>
        [DataMember(Name="taker_percentage", EmitDefaultValue=false)]
        public string TakerPercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MakerTakerPercentages {\n");
            sb.Append("  DatetimeMax: ").Append(DatetimeMax).Append("\n");
            sb.Append("  DatetimeMin: ").Append(DatetimeMin).Append("\n");
            sb.Append("  MakerPercentage: ").Append(MakerPercentage).Append("\n");
            sb.Append("  TakerPercentage: ").Append(TakerPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MakerTakerPercentages);
        }

        /// <summary>
        /// Returns true if MakerTakerPercentages instances are equal
        /// </summary>
        /// <param name="input">Instance of MakerTakerPercentages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MakerTakerPercentages input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DatetimeMax == input.DatetimeMax ||
                    (this.DatetimeMax != null &&
                    this.DatetimeMax.Equals(input.DatetimeMax))
                ) && 
                (
                    this.DatetimeMin == input.DatetimeMin ||
                    (this.DatetimeMin != null &&
                    this.DatetimeMin.Equals(input.DatetimeMin))
                ) && 
                (
                    this.MakerPercentage == input.MakerPercentage ||
                    (this.MakerPercentage != null &&
                    this.MakerPercentage.Equals(input.MakerPercentage))
                ) && 
                (
                    this.TakerPercentage == input.TakerPercentage ||
                    (this.TakerPercentage != null &&
                    this.TakerPercentage.Equals(input.TakerPercentage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatetimeMax != null)
                    hashCode = hashCode * 59 + this.DatetimeMax.GetHashCode();
                if (this.DatetimeMin != null)
                    hashCode = hashCode * 59 + this.DatetimeMin.GetHashCode();
                if (this.MakerPercentage != null)
                    hashCode = hashCode * 59 + this.MakerPercentage.GetHashCode();
                if (this.TakerPercentage != null)
                    hashCode = hashCode * 59 + this.TakerPercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
