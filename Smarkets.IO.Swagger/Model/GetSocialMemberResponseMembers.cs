/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetSocialMemberResponseMembers
    /// </summary>
    [DataContract]
        public partial class GetSocialMemberResponseMembers :  IEquatable<GetSocialMemberResponseMembers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSocialMemberResponseMembers" /> class.
        /// </summary>
        /// <param name="bio">bio (required).</param>
        /// <param name="created">created (required).</param>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="favouriteSportsDescription">favouriteSportsDescription (required).</param>
        /// <param name="favouriteTeamsDescription">favouriteTeamsDescription (required).</param>
        /// <param name="followersCount">followersCount (required).</param>
        /// <param name="followingCount">followingCount (required).</param>
        /// <param name="isPrivate">isPrivate (required).</param>
        /// <param name="legacyAccountId">legacyAccountId.</param>
        /// <param name="memberId">memberId (required).</param>
        /// <param name="photoPath">photoPath (required).</param>
        /// <param name="username">username (required).</param>
        public GetSocialMemberResponseMembers(string bio = default(string), string created = default(string), string displayName = default(string), string favouriteSportsDescription = default(string), string favouriteTeamsDescription = default(string), int? followersCount = default(int?), int? followingCount = default(int?), bool? isPrivate = default(bool?), int? legacyAccountId = default(int?), int? memberId = default(int?), string photoPath = default(string), string username = default(string))
        {
            // to ensure "bio" is required (not null)
            if (bio == null)
            {
                throw new InvalidDataException("bio is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.Bio = bio;
            }
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new InvalidDataException("created is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.Created = created;
            }
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
            // to ensure "favouriteSportsDescription" is required (not null)
            if (favouriteSportsDescription == null)
            {
                throw new InvalidDataException("favouriteSportsDescription is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.FavouriteSportsDescription = favouriteSportsDescription;
            }
            // to ensure "favouriteTeamsDescription" is required (not null)
            if (favouriteTeamsDescription == null)
            {
                throw new InvalidDataException("favouriteTeamsDescription is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.FavouriteTeamsDescription = favouriteTeamsDescription;
            }
            // to ensure "followersCount" is required (not null)
            if (followersCount == null)
            {
                throw new InvalidDataException("followersCount is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.FollowersCount = followersCount;
            }
            // to ensure "followingCount" is required (not null)
            if (followingCount == null)
            {
                throw new InvalidDataException("followingCount is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.FollowingCount = followingCount;
            }
            // to ensure "isPrivate" is required (not null)
            if (isPrivate == null)
            {
                throw new InvalidDataException("isPrivate is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.IsPrivate = isPrivate;
            }
            // to ensure "memberId" is required (not null)
            if (memberId == null)
            {
                throw new InvalidDataException("memberId is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.MemberId = memberId;
            }
            // to ensure "photoPath" is required (not null)
            if (photoPath == null)
            {
                throw new InvalidDataException("photoPath is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.PhotoPath = photoPath;
            }
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for GetSocialMemberResponseMembers and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            this.LegacyAccountId = legacyAccountId;
        }
        
        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [DataMember(Name="bio", EmitDefaultValue=false)]
        public string Bio { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets FavouriteSportsDescription
        /// </summary>
        [DataMember(Name="favourite_sports_description", EmitDefaultValue=false)]
        public string FavouriteSportsDescription { get; set; }

        /// <summary>
        /// Gets or Sets FavouriteTeamsDescription
        /// </summary>
        [DataMember(Name="favourite_teams_description", EmitDefaultValue=false)]
        public string FavouriteTeamsDescription { get; set; }

        /// <summary>
        /// Gets or Sets FollowersCount
        /// </summary>
        [DataMember(Name="followers_count", EmitDefaultValue=false)]
        public int? FollowersCount { get; set; }

        /// <summary>
        /// Gets or Sets FollowingCount
        /// </summary>
        [DataMember(Name="following_count", EmitDefaultValue=false)]
        public int? FollowingCount { get; set; }

        /// <summary>
        /// Gets or Sets IsPrivate
        /// </summary>
        [DataMember(Name="is_private", EmitDefaultValue=false)]
        public bool? IsPrivate { get; set; }

        /// <summary>
        /// Gets or Sets LegacyAccountId
        /// </summary>
        [DataMember(Name="legacy_account_id", EmitDefaultValue=false)]
        public int? LegacyAccountId { get; set; }

        /// <summary>
        /// Gets or Sets MemberId
        /// </summary>
        [DataMember(Name="member_id", EmitDefaultValue=false)]
        public int? MemberId { get; set; }

        /// <summary>
        /// Gets or Sets PhotoPath
        /// </summary>
        [DataMember(Name="photo_path", EmitDefaultValue=false)]
        public string PhotoPath { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetSocialMemberResponseMembers {\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FavouriteSportsDescription: ").Append(FavouriteSportsDescription).Append("\n");
            sb.Append("  FavouriteTeamsDescription: ").Append(FavouriteTeamsDescription).Append("\n");
            sb.Append("  FollowersCount: ").Append(FollowersCount).Append("\n");
            sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  LegacyAccountId: ").Append(LegacyAccountId).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  PhotoPath: ").Append(PhotoPath).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSocialMemberResponseMembers);
        }

        /// <summary>
        /// Returns true if GetSocialMemberResponseMembers instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSocialMemberResponseMembers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSocialMemberResponseMembers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bio == input.Bio ||
                    (this.Bio != null &&
                    this.Bio.Equals(input.Bio))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.FavouriteSportsDescription == input.FavouriteSportsDescription ||
                    (this.FavouriteSportsDescription != null &&
                    this.FavouriteSportsDescription.Equals(input.FavouriteSportsDescription))
                ) && 
                (
                    this.FavouriteTeamsDescription == input.FavouriteTeamsDescription ||
                    (this.FavouriteTeamsDescription != null &&
                    this.FavouriteTeamsDescription.Equals(input.FavouriteTeamsDescription))
                ) && 
                (
                    this.FollowersCount == input.FollowersCount ||
                    (this.FollowersCount != null &&
                    this.FollowersCount.Equals(input.FollowersCount))
                ) && 
                (
                    this.FollowingCount == input.FollowingCount ||
                    (this.FollowingCount != null &&
                    this.FollowingCount.Equals(input.FollowingCount))
                ) && 
                (
                    this.IsPrivate == input.IsPrivate ||
                    (this.IsPrivate != null &&
                    this.IsPrivate.Equals(input.IsPrivate))
                ) && 
                (
                    this.LegacyAccountId == input.LegacyAccountId ||
                    (this.LegacyAccountId != null &&
                    this.LegacyAccountId.Equals(input.LegacyAccountId))
                ) && 
                (
                    this.MemberId == input.MemberId ||
                    (this.MemberId != null &&
                    this.MemberId.Equals(input.MemberId))
                ) && 
                (
                    this.PhotoPath == input.PhotoPath ||
                    (this.PhotoPath != null &&
                    this.PhotoPath.Equals(input.PhotoPath))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bio != null)
                    hashCode = hashCode * 59 + this.Bio.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.FavouriteSportsDescription != null)
                    hashCode = hashCode * 59 + this.FavouriteSportsDescription.GetHashCode();
                if (this.FavouriteTeamsDescription != null)
                    hashCode = hashCode * 59 + this.FavouriteTeamsDescription.GetHashCode();
                if (this.FollowersCount != null)
                    hashCode = hashCode * 59 + this.FollowersCount.GetHashCode();
                if (this.FollowingCount != null)
                    hashCode = hashCode * 59 + this.FollowingCount.GetHashCode();
                if (this.IsPrivate != null)
                    hashCode = hashCode * 59 + this.IsPrivate.GetHashCode();
                if (this.LegacyAccountId != null)
                    hashCode = hashCode * 59 + this.LegacyAccountId.GetHashCode();
                if (this.MemberId != null)
                    hashCode = hashCode * 59 + this.MemberId.GetHashCode();
                if (this.PhotoPath != null)
                    hashCode = hashCode * 59 + this.PhotoPath.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
