/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PriceSeriesValues
    /// </summary>
    [DataContract]
        public partial class PriceSeriesValues :  IEquatable<PriceSeriesValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceSeriesValues" /> class.
        /// </summary>
        /// <param name="closePrice">closePrice (required).</param>
        /// <param name="highPrice">highPrice (required).</param>
        /// <param name="lowPrice">lowPrice (required).</param>
        /// <param name="openPrice">openPrice (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        public PriceSeriesValues(int? closePrice = default(int?), int? highPrice = default(int?), int? lowPrice = default(int?), int? openPrice = default(int?), int? quantity = default(int?), DateTime? timestamp = default(DateTime?))
        {
            // to ensure "closePrice" is required (not null)
            if (closePrice == null)
            {
                throw new InvalidDataException("closePrice is a required property for PriceSeriesValues and cannot be null");
            }
            else
            {
                this.ClosePrice = closePrice;
            }
            // to ensure "highPrice" is required (not null)
            if (highPrice == null)
            {
                throw new InvalidDataException("highPrice is a required property for PriceSeriesValues and cannot be null");
            }
            else
            {
                this.HighPrice = highPrice;
            }
            // to ensure "lowPrice" is required (not null)
            if (lowPrice == null)
            {
                throw new InvalidDataException("lowPrice is a required property for PriceSeriesValues and cannot be null");
            }
            else
            {
                this.LowPrice = lowPrice;
            }
            // to ensure "openPrice" is required (not null)
            if (openPrice == null)
            {
                throw new InvalidDataException("openPrice is a required property for PriceSeriesValues and cannot be null");
            }
            else
            {
                this.OpenPrice = openPrice;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for PriceSeriesValues and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for PriceSeriesValues and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
        }
        
        /// <summary>
        /// Gets or Sets ClosePrice
        /// </summary>
        [DataMember(Name="close_price", EmitDefaultValue=false)]
        public int? ClosePrice { get; set; }

        /// <summary>
        /// Gets or Sets HighPrice
        /// </summary>
        [DataMember(Name="high_price", EmitDefaultValue=false)]
        public int? HighPrice { get; set; }

        /// <summary>
        /// Gets or Sets LowPrice
        /// </summary>
        [DataMember(Name="low_price", EmitDefaultValue=false)]
        public int? LowPrice { get; set; }

        /// <summary>
        /// Gets or Sets OpenPrice
        /// </summary>
        [DataMember(Name="open_price", EmitDefaultValue=false)]
        public int? OpenPrice { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceSeriesValues {\n");
            sb.Append("  ClosePrice: ").Append(ClosePrice).Append("\n");
            sb.Append("  HighPrice: ").Append(HighPrice).Append("\n");
            sb.Append("  LowPrice: ").Append(LowPrice).Append("\n");
            sb.Append("  OpenPrice: ").Append(OpenPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceSeriesValues);
        }

        /// <summary>
        /// Returns true if PriceSeriesValues instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceSeriesValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceSeriesValues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClosePrice == input.ClosePrice ||
                    (this.ClosePrice != null &&
                    this.ClosePrice.Equals(input.ClosePrice))
                ) && 
                (
                    this.HighPrice == input.HighPrice ||
                    (this.HighPrice != null &&
                    this.HighPrice.Equals(input.HighPrice))
                ) && 
                (
                    this.LowPrice == input.LowPrice ||
                    (this.LowPrice != null &&
                    this.LowPrice.Equals(input.LowPrice))
                ) && 
                (
                    this.OpenPrice == input.OpenPrice ||
                    (this.OpenPrice != null &&
                    this.OpenPrice.Equals(input.OpenPrice))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClosePrice != null)
                    hashCode = hashCode * 59 + this.ClosePrice.GetHashCode();
                if (this.HighPrice != null)
                    hashCode = hashCode * 59 + this.HighPrice.GetHashCode();
                if (this.LowPrice != null)
                    hashCode = hashCode * 59 + this.LowPrice.GetHashCode();
                if (this.OpenPrice != null)
                    hashCode = hashCode * 59 + this.OpenPrice.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
