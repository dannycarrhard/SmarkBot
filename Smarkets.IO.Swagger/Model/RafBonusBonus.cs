/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RafBonusBonus
    /// </summary>
    [DataContract]
        public partial class RafBonusBonus :  IEquatable<RafBonusBonus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RafBonusBonus" /> class.
        /// </summary>
        /// <param name="dKK">dKK (required).</param>
        /// <param name="eUR">eUR (required).</param>
        /// <param name="gBP">gBP (required).</param>
        /// <param name="nOK">nOK (required).</param>
        /// <param name="sEK">sEK (required).</param>
        /// <param name="uSD">uSD (required).</param>
        public RafBonusBonus(RafBonusBonusDKK dKK = default(RafBonusBonusDKK), RafBonusBonusDKK eUR = default(RafBonusBonusDKK), RafBonusBonusDKK gBP = default(RafBonusBonusDKK), RafBonusBonusDKK nOK = default(RafBonusBonusDKK), RafBonusBonusDKK sEK = default(RafBonusBonusDKK), RafBonusBonusDKK uSD = default(RafBonusBonusDKK))
        {
            // to ensure "dKK" is required (not null)
            if (dKK == null)
            {
                throw new InvalidDataException("dKK is a required property for RafBonusBonus and cannot be null");
            }
            else
            {
                this.DKK = dKK;
            }
            // to ensure "eUR" is required (not null)
            if (eUR == null)
            {
                throw new InvalidDataException("eUR is a required property for RafBonusBonus and cannot be null");
            }
            else
            {
                this.EUR = eUR;
            }
            // to ensure "gBP" is required (not null)
            if (gBP == null)
            {
                throw new InvalidDataException("gBP is a required property for RafBonusBonus and cannot be null");
            }
            else
            {
                this.GBP = gBP;
            }
            // to ensure "nOK" is required (not null)
            if (nOK == null)
            {
                throw new InvalidDataException("nOK is a required property for RafBonusBonus and cannot be null");
            }
            else
            {
                this.NOK = nOK;
            }
            // to ensure "sEK" is required (not null)
            if (sEK == null)
            {
                throw new InvalidDataException("sEK is a required property for RafBonusBonus and cannot be null");
            }
            else
            {
                this.SEK = sEK;
            }
            // to ensure "uSD" is required (not null)
            if (uSD == null)
            {
                throw new InvalidDataException("uSD is a required property for RafBonusBonus and cannot be null");
            }
            else
            {
                this.USD = uSD;
            }
        }
        
        /// <summary>
        /// Gets or Sets DKK
        /// </summary>
        [DataMember(Name="DKK", EmitDefaultValue=false)]
        public RafBonusBonusDKK DKK { get; set; }

        /// <summary>
        /// Gets or Sets EUR
        /// </summary>
        [DataMember(Name="EUR", EmitDefaultValue=false)]
        public RafBonusBonusDKK EUR { get; set; }

        /// <summary>
        /// Gets or Sets GBP
        /// </summary>
        [DataMember(Name="GBP", EmitDefaultValue=false)]
        public RafBonusBonusDKK GBP { get; set; }

        /// <summary>
        /// Gets or Sets NOK
        /// </summary>
        [DataMember(Name="NOK", EmitDefaultValue=false)]
        public RafBonusBonusDKK NOK { get; set; }

        /// <summary>
        /// Gets or Sets SEK
        /// </summary>
        [DataMember(Name="SEK", EmitDefaultValue=false)]
        public RafBonusBonusDKK SEK { get; set; }

        /// <summary>
        /// Gets or Sets USD
        /// </summary>
        [DataMember(Name="USD", EmitDefaultValue=false)]
        public RafBonusBonusDKK USD { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RafBonusBonus {\n");
            sb.Append("  DKK: ").Append(DKK).Append("\n");
            sb.Append("  EUR: ").Append(EUR).Append("\n");
            sb.Append("  GBP: ").Append(GBP).Append("\n");
            sb.Append("  NOK: ").Append(NOK).Append("\n");
            sb.Append("  SEK: ").Append(SEK).Append("\n");
            sb.Append("  USD: ").Append(USD).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RafBonusBonus);
        }

        /// <summary>
        /// Returns true if RafBonusBonus instances are equal
        /// </summary>
        /// <param name="input">Instance of RafBonusBonus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RafBonusBonus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DKK == input.DKK ||
                    (this.DKK != null &&
                    this.DKK.Equals(input.DKK))
                ) && 
                (
                    this.EUR == input.EUR ||
                    (this.EUR != null &&
                    this.EUR.Equals(input.EUR))
                ) && 
                (
                    this.GBP == input.GBP ||
                    (this.GBP != null &&
                    this.GBP.Equals(input.GBP))
                ) && 
                (
                    this.NOK == input.NOK ||
                    (this.NOK != null &&
                    this.NOK.Equals(input.NOK))
                ) && 
                (
                    this.SEK == input.SEK ||
                    (this.SEK != null &&
                    this.SEK.Equals(input.SEK))
                ) && 
                (
                    this.USD == input.USD ||
                    (this.USD != null &&
                    this.USD.Equals(input.USD))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DKK != null)
                    hashCode = hashCode * 59 + this.DKK.GetHashCode();
                if (this.EUR != null)
                    hashCode = hashCode * 59 + this.EUR.GetHashCode();
                if (this.GBP != null)
                    hashCode = hashCode * 59 + this.GBP.GetHashCode();
                if (this.NOK != null)
                    hashCode = hashCode * 59 + this.NOK.GetHashCode();
                if (this.SEK != null)
                    hashCode = hashCode * 59 + this.SEK.GetHashCode();
                if (this.USD != null)
                    hashCode = hashCode * 59 + this.USD.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
