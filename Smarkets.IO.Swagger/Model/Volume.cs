/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Volume
    /// </summary>
    [DataContract]
        public partial class Volume :  IEquatable<Volume>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Volume" /> class.
        /// </summary>
        /// <param name="doubleStakeVolume"> This is the traded volume measured in GBP, but calculated in a different way.&lt;br&gt; It is the twice back stake for every execution.      (required).</param>
        /// <param name="marketId">This ID uniquely identifies the market (required).</param>
        /// <param name="volume"> This is the traded volume measured in GBP.&lt;br&gt; It is the sum of back stake (on the back side) with liability (on the lay side)&lt;br&gt; This is the volume displayed in our website.      (required).</param>
        public Volume(int? doubleStakeVolume = default(int?), string marketId = default(string), int? volume = default(int?))
        {
            // to ensure "doubleStakeVolume" is required (not null)
            if (doubleStakeVolume == null)
            {
                throw new InvalidDataException("doubleStakeVolume is a required property for Volume and cannot be null");
            }
            else
            {
                this.DoubleStakeVolume = doubleStakeVolume;
            }
            // to ensure "marketId" is required (not null)
            if (marketId == null)
            {
                throw new InvalidDataException("marketId is a required property for Volume and cannot be null");
            }
            else
            {
                this.MarketId = marketId;
            }
            // to ensure "volume" is required (not null)
            if (volume == null)
            {
                throw new InvalidDataException("volume is a required property for Volume and cannot be null");
            }
            else
            {
                this._Volume = volume;
            }
        }
        
        /// <summary>
        ///  This is the traded volume measured in GBP, but calculated in a different way.&lt;br&gt; It is the twice back stake for every execution.     
        /// </summary>
        /// <value> This is the traded volume measured in GBP, but calculated in a different way.&lt;br&gt; It is the twice back stake for every execution.     </value>
        [DataMember(Name="double_stake_volume", EmitDefaultValue=false)]
        public int? DoubleStakeVolume { get; set; }

        /// <summary>
        /// This ID uniquely identifies the market
        /// </summary>
        /// <value>This ID uniquely identifies the market</value>
        [DataMember(Name="market_id", EmitDefaultValue=false)]
        public string MarketId { get; set; }

        /// <summary>
        ///  This is the traded volume measured in GBP.&lt;br&gt; It is the sum of back stake (on the back side) with liability (on the lay side)&lt;br&gt; This is the volume displayed in our website.     
        /// </summary>
        /// <value> This is the traded volume measured in GBP.&lt;br&gt; It is the sum of back stake (on the back side) with liability (on the lay side)&lt;br&gt; This is the volume displayed in our website.     </value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public int? _Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Volume {\n");
            sb.Append("  DoubleStakeVolume: ").Append(DoubleStakeVolume).Append("\n");
            sb.Append("  MarketId: ").Append(MarketId).Append("\n");
            sb.Append("  _Volume: ").Append(_Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Volume);
        }

        /// <summary>
        /// Returns true if Volume instances are equal
        /// </summary>
        /// <param name="input">Instance of Volume to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Volume input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DoubleStakeVolume == input.DoubleStakeVolume ||
                    (this.DoubleStakeVolume != null &&
                    this.DoubleStakeVolume.Equals(input.DoubleStakeVolume))
                ) && 
                (
                    this.MarketId == input.MarketId ||
                    (this.MarketId != null &&
                    this.MarketId.Equals(input.MarketId))
                ) && 
                (
                    this._Volume == input._Volume ||
                    (this._Volume != null &&
                    this._Volume.Equals(input._Volume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DoubleStakeVolume != null)
                    hashCode = hashCode * 59 + this.DoubleStakeVolume.GetHashCode();
                if (this.MarketId != null)
                    hashCode = hashCode * 59 + this.MarketId.GetHashCode();
                if (this._Volume != null)
                    hashCode = hashCode * 59 + this._Volume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
