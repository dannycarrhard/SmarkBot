/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body60
    /// </summary>
    [DataContract]
        public partial class Body60 :  IEquatable<Body60>, IValidatableObject
    {
        /// <summary>
        /// Defines Provider
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProviderEnum
        {
            /// <summary>
            /// Enum Banktransfer for value: bank_transfer
            /// </summary>
            [EnumMember(Value = "bank_transfer")]
            Banktransfer = 1,
            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            [EnumMember(Value = "card")]
            Card = 2,
            /// <summary>
            /// Enum Neteller for value: neteller
            /// </summary>
            [EnumMember(Value = "neteller")]
            Neteller = 3,
            /// <summary>
            /// Enum Skrill for value: skrill
            /// </summary>
            [EnumMember(Value = "skrill")]
            Skrill = 4,
            /// <summary>
            /// Enum Trustly for value: trustly
            /// </summary>
            [EnumMember(Value = "trustly")]
            Trustly = 5,
            /// <summary>
            /// Enum Paypal for value: paypal
            /// </summary>
            [EnumMember(Value = "paypal")]
            Paypal = 6,
            /// <summary>
            /// Enum Openbanktransfer for value: open_bank_transfer
            /// </summary>
            [EnumMember(Value = "open_bank_transfer")]
            Openbanktransfer = 7,
            /// <summary>
            /// Enum Worldpay for value: worldpay
            /// </summary>
            [EnumMember(Value = "worldpay")]
            Worldpay = 8        }
        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public ProviderEnum Provider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body60" /> class.
        /// </summary>
        /// <param name="amount">amount (required).</param>
        /// <param name="methodId">methodId (required).</param>
        /// <param name="otherDetails">otherDetails.</param>
        /// <param name="provider">provider (required).</param>
        public Body60(string amount = default(string), string methodId = default(string), string otherDetails = default(string), ProviderEnum provider = default(ProviderEnum))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for Body60 and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "methodId" is required (not null)
            if (methodId == null)
            {
                throw new InvalidDataException("methodId is a required property for Body60 and cannot be null");
            }
            else
            {
                this.MethodId = methodId;
            }
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException("provider is a required property for Body60 and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }
            this.OtherDetails = otherDetails;
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets MethodId
        /// </summary>
        [DataMember(Name="method_id", EmitDefaultValue=false)]
        public string MethodId { get; set; }

        /// <summary>
        /// Gets or Sets OtherDetails
        /// </summary>
        [DataMember(Name="other_details", EmitDefaultValue=false)]
        public string OtherDetails { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body60 {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  MethodId: ").Append(MethodId).Append("\n");
            sb.Append("  OtherDetails: ").Append(OtherDetails).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body60);
        }

        /// <summary>
        /// Returns true if Body60 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body60 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body60 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.MethodId == input.MethodId ||
                    (this.MethodId != null &&
                    this.MethodId.Equals(input.MethodId))
                ) && 
                (
                    this.OtherDetails == input.OtherDetails ||
                    (this.OtherDetails != null &&
                    this.OtherDetails.Equals(input.OtherDetails))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.MethodId != null)
                    hashCode = hashCode * 59 + this.MethodId.GetHashCode();
                if (this.OtherDetails != null)
                    hashCode = hashCode * 59 + this.OtherDetails.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
