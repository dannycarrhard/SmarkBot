/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20061PromotionUsages
    /// </summary>
    [DataContract]
        public partial class InlineResponse20061PromotionUsages :  IEquatable<InlineResponse20061PromotionUsages>, IValidatableObject
    {
        /// <summary>
        /// Defines PromotionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PromotionTypeEnum
        {
            /// <summary>
            /// Enum Bonus for value: bonus
            /// </summary>
            [EnumMember(Value = "bonus")]
            Bonus = 1,
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 2,
            /// <summary>
            /// Enum Commission for value: commission
            /// </summary>
            [EnumMember(Value = "commission")]
            Commission = 3        }
        /// <summary>
        /// Gets or Sets PromotionType
        /// </summary>
        [DataMember(Name="promotion_type", EmitDefaultValue=false)]
        public PromotionTypeEnum? PromotionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20061PromotionUsages" /> class.
        /// </summary>
        /// <param name="bonus">bonus.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="memberId">memberId.</param>
        /// <param name="nextEligibleEvent">nextEligibleEvent.</param>
        /// <param name="optedIn">optedIn.</param>
        /// <param name="progress">progress.</param>
        /// <param name="progressLogs">progressLogs.</param>
        /// <param name="promotionCode">promotionCode.</param>
        /// <param name="promotionId">promotionId.</param>
        /// <param name="promotionType">promotionType.</param>
        /// <param name="refunded">refunded.</param>
        public InlineResponse20061PromotionUsages(string bonus = default(string), bool? enabled = default(bool?), int? memberId = default(int?), int? nextEligibleEvent = default(int?), DateTime? optedIn = default(DateTime?), int? progress = default(int?), List<InlineResponse20061ProgressLogs> progressLogs = default(List<InlineResponse20061ProgressLogs>), string promotionCode = default(string), int? promotionId = default(int?), PromotionTypeEnum? promotionType = default(PromotionTypeEnum?), decimal? refunded = default(decimal?))
        {
            this.Bonus = bonus;
            this.Enabled = enabled;
            this.MemberId = memberId;
            this.NextEligibleEvent = nextEligibleEvent;
            this.OptedIn = optedIn;
            this.Progress = progress;
            this.ProgressLogs = progressLogs;
            this.PromotionCode = promotionCode;
            this.PromotionId = promotionId;
            this.PromotionType = promotionType;
            this.Refunded = refunded;
        }
        
        /// <summary>
        /// Gets or Sets Bonus
        /// </summary>
        [DataMember(Name="bonus", EmitDefaultValue=false)]
        public string Bonus { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets MemberId
        /// </summary>
        [DataMember(Name="member_id", EmitDefaultValue=false)]
        public int? MemberId { get; set; }

        /// <summary>
        /// Gets or Sets NextEligibleEvent
        /// </summary>
        [DataMember(Name="next_eligible_event", EmitDefaultValue=false)]
        public int? NextEligibleEvent { get; set; }

        /// <summary>
        /// Gets or Sets OptedIn
        /// </summary>
        [DataMember(Name="opted_in", EmitDefaultValue=false)]
        public DateTime? OptedIn { get; set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public int? Progress { get; set; }

        /// <summary>
        /// Gets or Sets ProgressLogs
        /// </summary>
        [DataMember(Name="progress_logs", EmitDefaultValue=false)]
        public List<InlineResponse20061ProgressLogs> ProgressLogs { get; set; }

        /// <summary>
        /// Gets or Sets PromotionCode
        /// </summary>
        [DataMember(Name="promotion_code", EmitDefaultValue=false)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// Gets or Sets PromotionId
        /// </summary>
        [DataMember(Name="promotion_id", EmitDefaultValue=false)]
        public int? PromotionId { get; set; }


        /// <summary>
        /// Gets or Sets Refunded
        /// </summary>
        [DataMember(Name="refunded", EmitDefaultValue=false)]
        public decimal? Refunded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20061PromotionUsages {\n");
            sb.Append("  Bonus: ").Append(Bonus).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  NextEligibleEvent: ").Append(NextEligibleEvent).Append("\n");
            sb.Append("  OptedIn: ").Append(OptedIn).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  ProgressLogs: ").Append(ProgressLogs).Append("\n");
            sb.Append("  PromotionCode: ").Append(PromotionCode).Append("\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  PromotionType: ").Append(PromotionType).Append("\n");
            sb.Append("  Refunded: ").Append(Refunded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20061PromotionUsages);
        }

        /// <summary>
        /// Returns true if InlineResponse20061PromotionUsages instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20061PromotionUsages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20061PromotionUsages input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bonus == input.Bonus ||
                    (this.Bonus != null &&
                    this.Bonus.Equals(input.Bonus))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.MemberId == input.MemberId ||
                    (this.MemberId != null &&
                    this.MemberId.Equals(input.MemberId))
                ) && 
                (
                    this.NextEligibleEvent == input.NextEligibleEvent ||
                    (this.NextEligibleEvent != null &&
                    this.NextEligibleEvent.Equals(input.NextEligibleEvent))
                ) && 
                (
                    this.OptedIn == input.OptedIn ||
                    (this.OptedIn != null &&
                    this.OptedIn.Equals(input.OptedIn))
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                ) && 
                (
                    this.ProgressLogs == input.ProgressLogs ||
                    this.ProgressLogs != null &&
                    input.ProgressLogs != null &&
                    this.ProgressLogs.SequenceEqual(input.ProgressLogs)
                ) && 
                (
                    this.PromotionCode == input.PromotionCode ||
                    (this.PromotionCode != null &&
                    this.PromotionCode.Equals(input.PromotionCode))
                ) && 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.PromotionType == input.PromotionType ||
                    (this.PromotionType != null &&
                    this.PromotionType.Equals(input.PromotionType))
                ) && 
                (
                    this.Refunded == input.Refunded ||
                    (this.Refunded != null &&
                    this.Refunded.Equals(input.Refunded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bonus != null)
                    hashCode = hashCode * 59 + this.Bonus.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.MemberId != null)
                    hashCode = hashCode * 59 + this.MemberId.GetHashCode();
                if (this.NextEligibleEvent != null)
                    hashCode = hashCode * 59 + this.NextEligibleEvent.GetHashCode();
                if (this.OptedIn != null)
                    hashCode = hashCode * 59 + this.OptedIn.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this.ProgressLogs != null)
                    hashCode = hashCode * 59 + this.ProgressLogs.GetHashCode();
                if (this.PromotionCode != null)
                    hashCode = hashCode * 59 + this.PromotionCode.GetHashCode();
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                if (this.PromotionType != null)
                    hashCode = hashCode * 59 + this.PromotionType.GetHashCode();
                if (this.Refunded != null)
                    hashCode = hashCode * 59 + this.Refunded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
