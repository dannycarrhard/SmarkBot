/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20068Worldpay
    /// </summary>
    [DataContract]
        public partial class InlineResponse20068Worldpay :  IEquatable<InlineResponse20068Worldpay>, IValidatableObject
    {
        /// <summary>
        /// Defines CannotDisableReason
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CannotDisableReasonEnum
        {
            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = null)]
            Null = 1,
            /// <summary>
            /// Enum NOTACTIVE for value: NOT_ACTIVE
            /// </summary>
            [EnumMember(Value = "NOT_ACTIVE")]
            NOTACTIVE = 2,
            /// <summary>
            /// Enum PENDINGWITHDRAWAL for value: PENDING_WITHDRAWAL
            /// </summary>
            [EnumMember(Value = "PENDING_WITHDRAWAL")]
            PENDINGWITHDRAWAL = 3,
            /// <summary>
            /// Enum MINIMUMCARDS for value: MINIMUM_CARDS
            /// </summary>
            [EnumMember(Value = "MINIMUM_CARDS")]
            MINIMUMCARDS = 4,
            /// <summary>
            /// Enum OPENLOOP for value: OPEN_LOOP
            /// </summary>
            [EnumMember(Value = "OPEN_LOOP")]
            OPENLOOP = 5,
            /// <summary>
            /// Enum KYCREQUIRED for value: KYC_REQUIRED
            /// </summary>
            [EnumMember(Value = "KYC_REQUIRED")]
            KYCREQUIRED = 6        }
        /// <summary>
        /// Gets or Sets CannotDisableReason
        /// </summary>
        [DataMember(Name="cannot_disable_reason", EmitDefaultValue=false)]
        public CannotDisableReasonEnum CannotDisableReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20068Worldpay" /> class.
        /// </summary>
        /// <param name="bin">bin (required).</param>
        /// <param name="cannotDisableReason">cannotDisableReason (required).</param>
        /// <param name="disablePermitted">disablePermitted (required).</param>
        /// <param name="expiry">expiry (required).</param>
        /// <param name="issuer">issuer (required).</param>
        /// <param name="lastFour">lastFour (required).</param>
        /// <param name="lastUsed">lastUsed (required).</param>
        /// <param name="maxWithdrawal">maxWithdrawal (required).</param>
        /// <param name="methodId">methodId (required).</param>
        /// <param name="minWithdrawal">minWithdrawal (required).</param>
        /// <param name="withdrawalBalance">withdrawalBalance (required).</param>
        public InlineResponse20068Worldpay(string bin = default(string), CannotDisableReasonEnum cannotDisableReason = default(CannotDisableReasonEnum), bool? disablePermitted = default(bool?), DateTime? expiry = default(DateTime?), string issuer = default(string), string lastFour = default(string), bool? lastUsed = default(bool?), OneOfinlineResponse20068WorldpayMaxWithdrawal maxWithdrawal = default(OneOfinlineResponse20068WorldpayMaxWithdrawal), string methodId = default(string), OneOfinlineResponse20068WorldpayMinWithdrawal minWithdrawal = default(OneOfinlineResponse20068WorldpayMinWithdrawal), string withdrawalBalance = default(string))
        {
            // to ensure "bin" is required (not null)
            if (bin == null)
            {
                throw new InvalidDataException("bin is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.Bin = bin;
            }
            // to ensure "cannotDisableReason" is required (not null)
            if (cannotDisableReason == null)
            {
                throw new InvalidDataException("cannotDisableReason is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.CannotDisableReason = cannotDisableReason;
            }
            // to ensure "disablePermitted" is required (not null)
            if (disablePermitted == null)
            {
                throw new InvalidDataException("disablePermitted is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.DisablePermitted = disablePermitted;
            }
            // to ensure "expiry" is required (not null)
            if (expiry == null)
            {
                throw new InvalidDataException("expiry is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.Expiry = expiry;
            }
            // to ensure "issuer" is required (not null)
            if (issuer == null)
            {
                throw new InvalidDataException("issuer is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.Issuer = issuer;
            }
            // to ensure "lastFour" is required (not null)
            if (lastFour == null)
            {
                throw new InvalidDataException("lastFour is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.LastFour = lastFour;
            }
            // to ensure "lastUsed" is required (not null)
            if (lastUsed == null)
            {
                throw new InvalidDataException("lastUsed is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.LastUsed = lastUsed;
            }
            // to ensure "maxWithdrawal" is required (not null)
            if (maxWithdrawal == null)
            {
                throw new InvalidDataException("maxWithdrawal is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.MaxWithdrawal = maxWithdrawal;
            }
            // to ensure "methodId" is required (not null)
            if (methodId == null)
            {
                throw new InvalidDataException("methodId is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.MethodId = methodId;
            }
            // to ensure "minWithdrawal" is required (not null)
            if (minWithdrawal == null)
            {
                throw new InvalidDataException("minWithdrawal is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.MinWithdrawal = minWithdrawal;
            }
            // to ensure "withdrawalBalance" is required (not null)
            if (withdrawalBalance == null)
            {
                throw new InvalidDataException("withdrawalBalance is a required property for InlineResponse20068Worldpay and cannot be null");
            }
            else
            {
                this.WithdrawalBalance = withdrawalBalance;
            }
        }
        
        /// <summary>
        /// Gets or Sets Bin
        /// </summary>
        [DataMember(Name="bin", EmitDefaultValue=false)]
        public string Bin { get; set; }


        /// <summary>
        /// Gets or Sets DisablePermitted
        /// </summary>
        [DataMember(Name="disable_permitted", EmitDefaultValue=false)]
        public bool? DisablePermitted { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name="expiry", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Expiry { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public string Issuer { get; set; }

        /// <summary>
        /// Gets or Sets LastFour
        /// </summary>
        [DataMember(Name="last_four", EmitDefaultValue=false)]
        public string LastFour { get; set; }

        /// <summary>
        /// Gets or Sets LastUsed
        /// </summary>
        [DataMember(Name="last_used", EmitDefaultValue=false)]
        public bool? LastUsed { get; set; }

        /// <summary>
        /// Gets or Sets MaxWithdrawal
        /// </summary>
        [DataMember(Name="max_withdrawal", EmitDefaultValue=false)]
        public OneOfinlineResponse20068WorldpayMaxWithdrawal MaxWithdrawal { get; set; }

        /// <summary>
        /// Gets or Sets MethodId
        /// </summary>
        [DataMember(Name="method_id", EmitDefaultValue=false)]
        public string MethodId { get; set; }

        /// <summary>
        /// Gets or Sets MinWithdrawal
        /// </summary>
        [DataMember(Name="min_withdrawal", EmitDefaultValue=false)]
        public OneOfinlineResponse20068WorldpayMinWithdrawal MinWithdrawal { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalBalance
        /// </summary>
        [DataMember(Name="withdrawal_balance", EmitDefaultValue=false)]
        public string WithdrawalBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20068Worldpay {\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  CannotDisableReason: ").Append(CannotDisableReason).Append("\n");
            sb.Append("  DisablePermitted: ").Append(DisablePermitted).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  LastFour: ").Append(LastFour).Append("\n");
            sb.Append("  LastUsed: ").Append(LastUsed).Append("\n");
            sb.Append("  MaxWithdrawal: ").Append(MaxWithdrawal).Append("\n");
            sb.Append("  MethodId: ").Append(MethodId).Append("\n");
            sb.Append("  MinWithdrawal: ").Append(MinWithdrawal).Append("\n");
            sb.Append("  WithdrawalBalance: ").Append(WithdrawalBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20068Worldpay);
        }

        /// <summary>
        /// Returns true if InlineResponse20068Worldpay instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20068Worldpay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20068Worldpay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bin == input.Bin ||
                    (this.Bin != null &&
                    this.Bin.Equals(input.Bin))
                ) && 
                (
                    this.CannotDisableReason == input.CannotDisableReason ||
                    (this.CannotDisableReason != null &&
                    this.CannotDisableReason.Equals(input.CannotDisableReason))
                ) && 
                (
                    this.DisablePermitted == input.DisablePermitted ||
                    (this.DisablePermitted != null &&
                    this.DisablePermitted.Equals(input.DisablePermitted))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.LastFour == input.LastFour ||
                    (this.LastFour != null &&
                    this.LastFour.Equals(input.LastFour))
                ) && 
                (
                    this.LastUsed == input.LastUsed ||
                    (this.LastUsed != null &&
                    this.LastUsed.Equals(input.LastUsed))
                ) && 
                (
                    this.MaxWithdrawal == input.MaxWithdrawal ||
                    (this.MaxWithdrawal != null &&
                    this.MaxWithdrawal.Equals(input.MaxWithdrawal))
                ) && 
                (
                    this.MethodId == input.MethodId ||
                    (this.MethodId != null &&
                    this.MethodId.Equals(input.MethodId))
                ) && 
                (
                    this.MinWithdrawal == input.MinWithdrawal ||
                    (this.MinWithdrawal != null &&
                    this.MinWithdrawal.Equals(input.MinWithdrawal))
                ) && 
                (
                    this.WithdrawalBalance == input.WithdrawalBalance ||
                    (this.WithdrawalBalance != null &&
                    this.WithdrawalBalance.Equals(input.WithdrawalBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bin != null)
                    hashCode = hashCode * 59 + this.Bin.GetHashCode();
                if (this.CannotDisableReason != null)
                    hashCode = hashCode * 59 + this.CannotDisableReason.GetHashCode();
                if (this.DisablePermitted != null)
                    hashCode = hashCode * 59 + this.DisablePermitted.GetHashCode();
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.LastFour != null)
                    hashCode = hashCode * 59 + this.LastFour.GetHashCode();
                if (this.LastUsed != null)
                    hashCode = hashCode * 59 + this.LastUsed.GetHashCode();
                if (this.MaxWithdrawal != null)
                    hashCode = hashCode * 59 + this.MaxWithdrawal.GetHashCode();
                if (this.MethodId != null)
                    hashCode = hashCode * 59 + this.MethodId.GetHashCode();
                if (this.MinWithdrawal != null)
                    hashCode = hashCode * 59 + this.MinWithdrawal.GetHashCode();
                if (this.WithdrawalBalance != null)
                    hashCode = hashCode * 59 + this.WithdrawalBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
