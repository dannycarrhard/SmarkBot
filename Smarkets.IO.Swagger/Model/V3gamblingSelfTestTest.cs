/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// V3gamblingSelfTestTest
    /// </summary>
    [DataContract]
        public partial class V3gamblingSelfTestTest :  IEquatable<V3gamblingSelfTestTest>, IValidatableObject
    {
        /// <summary>
        /// Defines Q1
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q1Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q1
        /// </summary>
        [DataMember(Name="q1", EmitDefaultValue=false)]
        public Q1Enum? Q1 { get; set; }
        /// <summary>
        /// Defines Q10
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q10Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q10
        /// </summary>
        [DataMember(Name="q10", EmitDefaultValue=false)]
        public Q10Enum? Q10 { get; set; }
        /// <summary>
        /// Defines Q11
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q11Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q11
        /// </summary>
        [DataMember(Name="q11", EmitDefaultValue=false)]
        public Q11Enum? Q11 { get; set; }
        /// <summary>
        /// Defines Q12
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q12Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q12
        /// </summary>
        [DataMember(Name="q12", EmitDefaultValue=false)]
        public Q12Enum? Q12 { get; set; }
        /// <summary>
        /// Defines Q13
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q13Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q13
        /// </summary>
        [DataMember(Name="q13", EmitDefaultValue=false)]
        public Q13Enum? Q13 { get; set; }
        /// <summary>
        /// Defines Q2
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q2Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q2
        /// </summary>
        [DataMember(Name="q2", EmitDefaultValue=false)]
        public Q2Enum? Q2 { get; set; }
        /// <summary>
        /// Defines Q3
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q3Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q3
        /// </summary>
        [DataMember(Name="q3", EmitDefaultValue=false)]
        public Q3Enum? Q3 { get; set; }
        /// <summary>
        /// Defines Q4
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q4Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q4
        /// </summary>
        [DataMember(Name="q4", EmitDefaultValue=false)]
        public Q4Enum? Q4 { get; set; }
        /// <summary>
        /// Defines Q5
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q5Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q5
        /// </summary>
        [DataMember(Name="q5", EmitDefaultValue=false)]
        public Q5Enum? Q5 { get; set; }
        /// <summary>
        /// Defines Q6
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q6Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q6
        /// </summary>
        [DataMember(Name="q6", EmitDefaultValue=false)]
        public Q6Enum? Q6 { get; set; }
        /// <summary>
        /// Defines Q7
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q7Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q7
        /// </summary>
        [DataMember(Name="q7", EmitDefaultValue=false)]
        public Q7Enum? Q7 { get; set; }
        /// <summary>
        /// Defines Q8
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q8Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q8
        /// </summary>
        [DataMember(Name="q8", EmitDefaultValue=false)]
        public Q8Enum? Q8 { get; set; }
        /// <summary>
        /// Defines Q9
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum Q9Enum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4        }
        /// <summary>
        /// Gets or Sets Q9
        /// </summary>
        [DataMember(Name="q9", EmitDefaultValue=false)]
        public Q9Enum? Q9 { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3gamblingSelfTestTest" /> class.
        /// </summary>
        /// <param name="q1">q1.</param>
        /// <param name="q10">q10.</param>
        /// <param name="q11">q11.</param>
        /// <param name="q12">q12.</param>
        /// <param name="q13">q13.</param>
        /// <param name="q2">q2.</param>
        /// <param name="q3">q3.</param>
        /// <param name="q4">q4.</param>
        /// <param name="q5">q5.</param>
        /// <param name="q6">q6.</param>
        /// <param name="q7">q7.</param>
        /// <param name="q8">q8.</param>
        /// <param name="q9">q9.</param>
        public V3gamblingSelfTestTest(Q1Enum? q1 = default(Q1Enum?), Q10Enum? q10 = default(Q10Enum?), Q11Enum? q11 = default(Q11Enum?), Q12Enum? q12 = default(Q12Enum?), Q13Enum? q13 = default(Q13Enum?), Q2Enum? q2 = default(Q2Enum?), Q3Enum? q3 = default(Q3Enum?), Q4Enum? q4 = default(Q4Enum?), Q5Enum? q5 = default(Q5Enum?), Q6Enum? q6 = default(Q6Enum?), Q7Enum? q7 = default(Q7Enum?), Q8Enum? q8 = default(Q8Enum?), Q9Enum? q9 = default(Q9Enum?))
        {
            this.Q1 = q1;
            this.Q10 = q10;
            this.Q11 = q11;
            this.Q12 = q12;
            this.Q13 = q13;
            this.Q2 = q2;
            this.Q3 = q3;
            this.Q4 = q4;
            this.Q5 = q5;
            this.Q6 = q6;
            this.Q7 = q7;
            this.Q8 = q8;
            this.Q9 = q9;
        }
        













        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V3gamblingSelfTestTest {\n");
            sb.Append("  Q1: ").Append(Q1).Append("\n");
            sb.Append("  Q10: ").Append(Q10).Append("\n");
            sb.Append("  Q11: ").Append(Q11).Append("\n");
            sb.Append("  Q12: ").Append(Q12).Append("\n");
            sb.Append("  Q13: ").Append(Q13).Append("\n");
            sb.Append("  Q2: ").Append(Q2).Append("\n");
            sb.Append("  Q3: ").Append(Q3).Append("\n");
            sb.Append("  Q4: ").Append(Q4).Append("\n");
            sb.Append("  Q5: ").Append(Q5).Append("\n");
            sb.Append("  Q6: ").Append(Q6).Append("\n");
            sb.Append("  Q7: ").Append(Q7).Append("\n");
            sb.Append("  Q8: ").Append(Q8).Append("\n");
            sb.Append("  Q9: ").Append(Q9).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3gamblingSelfTestTest);
        }

        /// <summary>
        /// Returns true if V3gamblingSelfTestTest instances are equal
        /// </summary>
        /// <param name="input">Instance of V3gamblingSelfTestTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3gamblingSelfTestTest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Q1 == input.Q1 ||
                    (this.Q1 != null &&
                    this.Q1.Equals(input.Q1))
                ) && 
                (
                    this.Q10 == input.Q10 ||
                    (this.Q10 != null &&
                    this.Q10.Equals(input.Q10))
                ) && 
                (
                    this.Q11 == input.Q11 ||
                    (this.Q11 != null &&
                    this.Q11.Equals(input.Q11))
                ) && 
                (
                    this.Q12 == input.Q12 ||
                    (this.Q12 != null &&
                    this.Q12.Equals(input.Q12))
                ) && 
                (
                    this.Q13 == input.Q13 ||
                    (this.Q13 != null &&
                    this.Q13.Equals(input.Q13))
                ) && 
                (
                    this.Q2 == input.Q2 ||
                    (this.Q2 != null &&
                    this.Q2.Equals(input.Q2))
                ) && 
                (
                    this.Q3 == input.Q3 ||
                    (this.Q3 != null &&
                    this.Q3.Equals(input.Q3))
                ) && 
                (
                    this.Q4 == input.Q4 ||
                    (this.Q4 != null &&
                    this.Q4.Equals(input.Q4))
                ) && 
                (
                    this.Q5 == input.Q5 ||
                    (this.Q5 != null &&
                    this.Q5.Equals(input.Q5))
                ) && 
                (
                    this.Q6 == input.Q6 ||
                    (this.Q6 != null &&
                    this.Q6.Equals(input.Q6))
                ) && 
                (
                    this.Q7 == input.Q7 ||
                    (this.Q7 != null &&
                    this.Q7.Equals(input.Q7))
                ) && 
                (
                    this.Q8 == input.Q8 ||
                    (this.Q8 != null &&
                    this.Q8.Equals(input.Q8))
                ) && 
                (
                    this.Q9 == input.Q9 ||
                    (this.Q9 != null &&
                    this.Q9.Equals(input.Q9))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Q1 != null)
                    hashCode = hashCode * 59 + this.Q1.GetHashCode();
                if (this.Q10 != null)
                    hashCode = hashCode * 59 + this.Q10.GetHashCode();
                if (this.Q11 != null)
                    hashCode = hashCode * 59 + this.Q11.GetHashCode();
                if (this.Q12 != null)
                    hashCode = hashCode * 59 + this.Q12.GetHashCode();
                if (this.Q13 != null)
                    hashCode = hashCode * 59 + this.Q13.GetHashCode();
                if (this.Q2 != null)
                    hashCode = hashCode * 59 + this.Q2.GetHashCode();
                if (this.Q3 != null)
                    hashCode = hashCode * 59 + this.Q3.GetHashCode();
                if (this.Q4 != null)
                    hashCode = hashCode * 59 + this.Q4.GetHashCode();
                if (this.Q5 != null)
                    hashCode = hashCode * 59 + this.Q5.GetHashCode();
                if (this.Q6 != null)
                    hashCode = hashCode * 59 + this.Q6.GetHashCode();
                if (this.Q7 != null)
                    hashCode = hashCode * 59 + this.Q7.GetHashCode();
                if (this.Q8 != null)
                    hashCode = hashCode * 59 + this.Q8.GetHashCode();
                if (this.Q9 != null)
                    hashCode = hashCode * 59 + this.Q9.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
