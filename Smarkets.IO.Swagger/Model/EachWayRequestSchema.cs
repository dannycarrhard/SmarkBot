/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EachWayRequestSchema
    /// </summary>
    [DataContract]
        public partial class EachWayRequestSchema :  IEquatable<EachWayRequestSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EachWayRequestSchema" /> class.
        /// </summary>
        /// <param name="placeContractId">This ID uniquely identifies the contract (required).</param>
        /// <param name="placePrice">placePrice (required).</param>
        /// <param name="referenceId">referenceId.</param>
        /// <param name="stake">stake (required).</param>
        /// <param name="winContractId">This ID uniquely identifies the contract (required).</param>
        /// <param name="winPrice">winPrice (required).</param>
        public EachWayRequestSchema(string placeContractId = default(string), int? placePrice = default(int?), int? referenceId = default(int?), decimal? stake = default(decimal?), string winContractId = default(string), int? winPrice = default(int?))
        {
            // to ensure "placeContractId" is required (not null)
            if (placeContractId == null)
            {
                throw new InvalidDataException("placeContractId is a required property for EachWayRequestSchema and cannot be null");
            }
            else
            {
                this.PlaceContractId = placeContractId;
            }
            // to ensure "placePrice" is required (not null)
            if (placePrice == null)
            {
                throw new InvalidDataException("placePrice is a required property for EachWayRequestSchema and cannot be null");
            }
            else
            {
                this.PlacePrice = placePrice;
            }
            // to ensure "stake" is required (not null)
            if (stake == null)
            {
                throw new InvalidDataException("stake is a required property for EachWayRequestSchema and cannot be null");
            }
            else
            {
                this.Stake = stake;
            }
            // to ensure "winContractId" is required (not null)
            if (winContractId == null)
            {
                throw new InvalidDataException("winContractId is a required property for EachWayRequestSchema and cannot be null");
            }
            else
            {
                this.WinContractId = winContractId;
            }
            // to ensure "winPrice" is required (not null)
            if (winPrice == null)
            {
                throw new InvalidDataException("winPrice is a required property for EachWayRequestSchema and cannot be null");
            }
            else
            {
                this.WinPrice = winPrice;
            }
            this.ReferenceId = referenceId;
        }
        
        /// <summary>
        /// This ID uniquely identifies the contract
        /// </summary>
        /// <value>This ID uniquely identifies the contract</value>
        [DataMember(Name="place_contract_id", EmitDefaultValue=false)]
        public string PlaceContractId { get; set; }

        /// <summary>
        /// Gets or Sets PlacePrice
        /// </summary>
        [DataMember(Name="place_price", EmitDefaultValue=false)]
        public int? PlacePrice { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceId
        /// </summary>
        [DataMember(Name="reference_id", EmitDefaultValue=false)]
        public int? ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets Stake
        /// </summary>
        [DataMember(Name="stake", EmitDefaultValue=false)]
        public decimal? Stake { get; set; }

        /// <summary>
        /// This ID uniquely identifies the contract
        /// </summary>
        /// <value>This ID uniquely identifies the contract</value>
        [DataMember(Name="win_contract_id", EmitDefaultValue=false)]
        public string WinContractId { get; set; }

        /// <summary>
        /// Gets or Sets WinPrice
        /// </summary>
        [DataMember(Name="win_price", EmitDefaultValue=false)]
        public int? WinPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EachWayRequestSchema {\n");
            sb.Append("  PlaceContractId: ").Append(PlaceContractId).Append("\n");
            sb.Append("  PlacePrice: ").Append(PlacePrice).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  Stake: ").Append(Stake).Append("\n");
            sb.Append("  WinContractId: ").Append(WinContractId).Append("\n");
            sb.Append("  WinPrice: ").Append(WinPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EachWayRequestSchema);
        }

        /// <summary>
        /// Returns true if EachWayRequestSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of EachWayRequestSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EachWayRequestSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlaceContractId == input.PlaceContractId ||
                    (this.PlaceContractId != null &&
                    this.PlaceContractId.Equals(input.PlaceContractId))
                ) && 
                (
                    this.PlacePrice == input.PlacePrice ||
                    (this.PlacePrice != null &&
                    this.PlacePrice.Equals(input.PlacePrice))
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.Stake == input.Stake ||
                    (this.Stake != null &&
                    this.Stake.Equals(input.Stake))
                ) && 
                (
                    this.WinContractId == input.WinContractId ||
                    (this.WinContractId != null &&
                    this.WinContractId.Equals(input.WinContractId))
                ) && 
                (
                    this.WinPrice == input.WinPrice ||
                    (this.WinPrice != null &&
                    this.WinPrice.Equals(input.WinPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlaceContractId != null)
                    hashCode = hashCode * 59 + this.PlaceContractId.GetHashCode();
                if (this.PlacePrice != null)
                    hashCode = hashCode * 59 + this.PlacePrice.GetHashCode();
                if (this.ReferenceId != null)
                    hashCode = hashCode * 59 + this.ReferenceId.GetHashCode();
                if (this.Stake != null)
                    hashCode = hashCode * 59 + this.Stake.GetHashCode();
                if (this.WinContractId != null)
                    hashCode = hashCode * 59 + this.WinContractId.GetHashCode();
                if (this.WinPrice != null)
                    hashCode = hashCode * 59 + this.WinPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
