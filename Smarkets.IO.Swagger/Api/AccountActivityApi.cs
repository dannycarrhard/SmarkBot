/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAccountActivityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        ///      Return the account activity between the two specified datetimes as a gzipped CSV.
        /// </summary>
        /// <remarks>
        /// ## Description Start and end datetimes have to be separated by an hour, also these have to be exactly on the hour.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDatetime"></param>
        /// <param name="endDatetime"></param>
        /// <returns></returns>
        void AccountActivityCsv (DateTime? startDatetime, DateTime? endDatetime);

        /// <summary>
        ///      Return the account activity between the two specified datetimes as a gzipped CSV.
        /// </summary>
        /// <remarks>
        /// ## Description Start and end datetimes have to be separated by an hour, also these have to be exactly on the hour.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDatetime"></param>
        /// <param name="endDatetime"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AccountActivityCsvWithHttpInfo (DateTime? startDatetime, DateTime? endDatetime);
        /// <summary>
        /// Retrieve statement information for your account.
        /// </summary>
        /// <remarks>
        /// ## Description This information should be used for accounting reconciliation.&lt;br&gt; This data is what is being used in &lt;a href&#x3D;\&quot;https://smarkets.com/account/statement\&quot;&gt;our statement page&lt;/a&gt;  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampMax">Maximum datetime for records (optional)</param>
        /// <param name="timestampMin">Minimum datetime for records (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="orderId">Order IDs to filter by (optional)</param>
        /// <param name="paginationLastSeq">Last sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="paginationLastSubseq">Last sub-sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="sort"> How to sort the results. When making paginated requests, pagination_last_seq and pagination_last_subseq should be used with the values from the last record of the previous page (optional, default to -seq,-subseq)</param>
        /// <param name="source">Account activity sources to filter by. (optional)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>AccountActivityResponse</returns>
        AccountActivityResponse GetActivity (DateTime? timestampMax = null, DateTime? timestampMin = null, int? limit = null, List<string> marketId = null, List<string> orderId = null, string paginationLastSeq = null, string paginationLastSubseq = null, string sort = null, List<string> source = null, bool? eventInfo = null);

        /// <summary>
        /// Retrieve statement information for your account.
        /// </summary>
        /// <remarks>
        /// ## Description This information should be used for accounting reconciliation.&lt;br&gt; This data is what is being used in &lt;a href&#x3D;\&quot;https://smarkets.com/account/statement\&quot;&gt;our statement page&lt;/a&gt;  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampMax">Maximum datetime for records (optional)</param>
        /// <param name="timestampMin">Minimum datetime for records (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="orderId">Order IDs to filter by (optional)</param>
        /// <param name="paginationLastSeq">Last sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="paginationLastSubseq">Last sub-sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="sort"> How to sort the results. When making paginated requests, pagination_last_seq and pagination_last_subseq should be used with the values from the last record of the previous page (optional, default to -seq,-subseq)</param>
        /// <param name="source">Account activity sources to filter by. (optional)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>ApiResponse of AccountActivityResponse</returns>
        ApiResponse<AccountActivityResponse> GetActivityWithHttpInfo (DateTime? timestampMax = null, DateTime? timestampMin = null, int? limit = null, List<string> marketId = null, List<string> orderId = null, string paginationLastSeq = null, string paginationLastSubseq = null, string sort = null, List<string> source = null, bool? eventInfo = null);
        /// <summary>
        /// Retrieve statement information grouped by event.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastTimestampMax">Maximum last timestamp for records, defaults to the current datetime (optional)</param>
        /// <param name="lastTimestampMin">Minimum last timestamp for records, defaults to 1 month ago (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>StatementByEventResponse</returns>
        StatementByEventResponse GetStatementByEvent (DateTime? lastTimestampMax = null, DateTime? lastTimestampMin = null, int? limit = null, bool? eventInfo = null);

        /// <summary>
        /// Retrieve statement information grouped by event.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastTimestampMax">Maximum last timestamp for records, defaults to the current datetime (optional)</param>
        /// <param name="lastTimestampMin">Minimum last timestamp for records, defaults to 1 month ago (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>ApiResponse of StatementByEventResponse</returns>
        ApiResponse<StatementByEventResponse> GetStatementByEventWithHttpInfo (DateTime? lastTimestampMax = null, DateTime? lastTimestampMin = null, int? limit = null, bool? eventInfo = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        ///      Return the account activity between the two specified datetimes as a gzipped CSV.
        /// </summary>
        /// <remarks>
        /// ## Description Start and end datetimes have to be separated by an hour, also these have to be exactly on the hour.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDatetime"></param>
        /// <param name="endDatetime"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AccountActivityCsvAsync (DateTime? startDatetime, DateTime? endDatetime);

        /// <summary>
        ///      Return the account activity between the two specified datetimes as a gzipped CSV.
        /// </summary>
        /// <remarks>
        /// ## Description Start and end datetimes have to be separated by an hour, also these have to be exactly on the hour.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDatetime"></param>
        /// <param name="endDatetime"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountActivityCsvAsyncWithHttpInfo (DateTime? startDatetime, DateTime? endDatetime);
        /// <summary>
        /// Retrieve statement information for your account.
        /// </summary>
        /// <remarks>
        /// ## Description This information should be used for accounting reconciliation.&lt;br&gt; This data is what is being used in &lt;a href&#x3D;\&quot;https://smarkets.com/account/statement\&quot;&gt;our statement page&lt;/a&gt;  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampMax">Maximum datetime for records (optional)</param>
        /// <param name="timestampMin">Minimum datetime for records (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="orderId">Order IDs to filter by (optional)</param>
        /// <param name="paginationLastSeq">Last sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="paginationLastSubseq">Last sub-sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="sort"> How to sort the results. When making paginated requests, pagination_last_seq and pagination_last_subseq should be used with the values from the last record of the previous page (optional, default to -seq,-subseq)</param>
        /// <param name="source">Account activity sources to filter by. (optional)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>Task of AccountActivityResponse</returns>
        System.Threading.Tasks.Task<AccountActivityResponse> GetActivityAsync (DateTime? timestampMax = null, DateTime? timestampMin = null, int? limit = null, List<string> marketId = null, List<string> orderId = null, string paginationLastSeq = null, string paginationLastSubseq = null, string sort = null, List<string> source = null, bool? eventInfo = null);

        /// <summary>
        /// Retrieve statement information for your account.
        /// </summary>
        /// <remarks>
        /// ## Description This information should be used for accounting reconciliation.&lt;br&gt; This data is what is being used in &lt;a href&#x3D;\&quot;https://smarkets.com/account/statement\&quot;&gt;our statement page&lt;/a&gt;  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampMax">Maximum datetime for records (optional)</param>
        /// <param name="timestampMin">Minimum datetime for records (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="orderId">Order IDs to filter by (optional)</param>
        /// <param name="paginationLastSeq">Last sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="paginationLastSubseq">Last sub-sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="sort"> How to sort the results. When making paginated requests, pagination_last_seq and pagination_last_subseq should be used with the values from the last record of the previous page (optional, default to -seq,-subseq)</param>
        /// <param name="source">Account activity sources to filter by. (optional)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>Task of ApiResponse (AccountActivityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountActivityResponse>> GetActivityAsyncWithHttpInfo (DateTime? timestampMax = null, DateTime? timestampMin = null, int? limit = null, List<string> marketId = null, List<string> orderId = null, string paginationLastSeq = null, string paginationLastSubseq = null, string sort = null, List<string> source = null, bool? eventInfo = null);
        /// <summary>
        /// Retrieve statement information grouped by event.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastTimestampMax">Maximum last timestamp for records, defaults to the current datetime (optional)</param>
        /// <param name="lastTimestampMin">Minimum last timestamp for records, defaults to 1 month ago (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>Task of StatementByEventResponse</returns>
        System.Threading.Tasks.Task<StatementByEventResponse> GetStatementByEventAsync (DateTime? lastTimestampMax = null, DateTime? lastTimestampMin = null, int? limit = null, bool? eventInfo = null);

        /// <summary>
        /// Retrieve statement information grouped by event.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastTimestampMax">Maximum last timestamp for records, defaults to the current datetime (optional)</param>
        /// <param name="lastTimestampMin">Minimum last timestamp for records, defaults to 1 month ago (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>Task of ApiResponse (StatementByEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatementByEventResponse>> GetStatementByEventAsyncWithHttpInfo (DateTime? lastTimestampMax = null, DateTime? lastTimestampMin = null, int? limit = null, bool? eventInfo = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AccountActivityApi : IAccountActivityApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountActivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountActivityApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountActivityApi"/> class
        /// </summary>
        /// <returns></returns>
        public AccountActivityApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountActivityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountActivityApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///      Return the account activity between the two specified datetimes as a gzipped CSV. ## Description Start and end datetimes have to be separated by an hour, also these have to be exactly on the hour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDatetime"></param>
        /// <param name="endDatetime"></param>
        /// <returns></returns>
        public void AccountActivityCsv (DateTime? startDatetime, DateTime? endDatetime)
        {
             AccountActivityCsvWithHttpInfo(startDatetime, endDatetime);
        }

        /// <summary>
        ///      Return the account activity between the two specified datetimes as a gzipped CSV. ## Description Start and end datetimes have to be separated by an hour, also these have to be exactly on the hour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDatetime"></param>
        /// <param name="endDatetime"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AccountActivityCsvWithHttpInfo (DateTime? startDatetime, DateTime? endDatetime)
        {
            // verify the required parameter 'startDatetime' is set
            if (startDatetime == null)
                throw new ApiException(400, "Missing required parameter 'startDatetime' when calling AccountActivityApi->AccountActivityCsv");
            // verify the required parameter 'endDatetime' is set
            if (endDatetime == null)
                throw new ApiException(400, "Missing required parameter 'endDatetime' when calling AccountActivityApi->AccountActivityCsv");

            var localVarPath = "/v3/account_activity_csv/{start_datetime}/{end_datetime}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDatetime != null) localVarPathParams.Add("start_datetime", this.Configuration.ApiClient.ParameterToString(startDatetime)); // path parameter
            if (endDatetime != null) localVarPathParams.Add("end_datetime", this.Configuration.ApiClient.ParameterToString(endDatetime)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountActivityCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///      Return the account activity between the two specified datetimes as a gzipped CSV. ## Description Start and end datetimes have to be separated by an hour, also these have to be exactly on the hour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDatetime"></param>
        /// <param name="endDatetime"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AccountActivityCsvAsync (DateTime? startDatetime, DateTime? endDatetime)
        {
             await AccountActivityCsvAsyncWithHttpInfo(startDatetime, endDatetime);

        }

        /// <summary>
        ///      Return the account activity between the two specified datetimes as a gzipped CSV. ## Description Start and end datetimes have to be separated by an hour, also these have to be exactly on the hour.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDatetime"></param>
        /// <param name="endDatetime"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AccountActivityCsvAsyncWithHttpInfo (DateTime? startDatetime, DateTime? endDatetime)
        {
            // verify the required parameter 'startDatetime' is set
            if (startDatetime == null)
                throw new ApiException(400, "Missing required parameter 'startDatetime' when calling AccountActivityApi->AccountActivityCsv");
            // verify the required parameter 'endDatetime' is set
            if (endDatetime == null)
                throw new ApiException(400, "Missing required parameter 'endDatetime' when calling AccountActivityApi->AccountActivityCsv");

            var localVarPath = "/v3/account_activity_csv/{start_datetime}/{end_datetime}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDatetime != null) localVarPathParams.Add("start_datetime", this.Configuration.ApiClient.ParameterToString(startDatetime)); // path parameter
            if (endDatetime != null) localVarPathParams.Add("end_datetime", this.Configuration.ApiClient.ParameterToString(endDatetime)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountActivityCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve statement information for your account. ## Description This information should be used for accounting reconciliation.&lt;br&gt; This data is what is being used in &lt;a href&#x3D;\&quot;https://smarkets.com/account/statement\&quot;&gt;our statement page&lt;/a&gt;  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampMax">Maximum datetime for records (optional)</param>
        /// <param name="timestampMin">Minimum datetime for records (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="orderId">Order IDs to filter by (optional)</param>
        /// <param name="paginationLastSeq">Last sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="paginationLastSubseq">Last sub-sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="sort"> How to sort the results. When making paginated requests, pagination_last_seq and pagination_last_subseq should be used with the values from the last record of the previous page (optional, default to -seq,-subseq)</param>
        /// <param name="source">Account activity sources to filter by. (optional)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>AccountActivityResponse</returns>
        public AccountActivityResponse GetActivity (DateTime? timestampMax = null, DateTime? timestampMin = null, int? limit = null, List<string> marketId = null, List<string> orderId = null, string paginationLastSeq = null, string paginationLastSubseq = null, string sort = null, List<string> source = null, bool? eventInfo = null)
        {
             ApiResponse<AccountActivityResponse> localVarResponse = GetActivityWithHttpInfo(timestampMax, timestampMin, limit, marketId, orderId, paginationLastSeq, paginationLastSubseq, sort, source, eventInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve statement information for your account. ## Description This information should be used for accounting reconciliation.&lt;br&gt; This data is what is being used in &lt;a href&#x3D;\&quot;https://smarkets.com/account/statement\&quot;&gt;our statement page&lt;/a&gt;  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampMax">Maximum datetime for records (optional)</param>
        /// <param name="timestampMin">Minimum datetime for records (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="orderId">Order IDs to filter by (optional)</param>
        /// <param name="paginationLastSeq">Last sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="paginationLastSubseq">Last sub-sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="sort"> How to sort the results. When making paginated requests, pagination_last_seq and pagination_last_subseq should be used with the values from the last record of the previous page (optional, default to -seq,-subseq)</param>
        /// <param name="source">Account activity sources to filter by. (optional)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>ApiResponse of AccountActivityResponse</returns>
        public ApiResponse< AccountActivityResponse > GetActivityWithHttpInfo (DateTime? timestampMax = null, DateTime? timestampMin = null, int? limit = null, List<string> marketId = null, List<string> orderId = null, string paginationLastSeq = null, string paginationLastSubseq = null, string sort = null, List<string> source = null, bool? eventInfo = null)
        {

            var localVarPath = "/v3/accounts/activity/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timestampMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_max", timestampMax)); // query parameter
            if (timestampMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_min", timestampMin)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (marketId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "market_id", marketId)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "order_id", orderId)); // query parameter
            if (paginationLastSeq != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_seq", paginationLastSeq)); // query parameter
            if (paginationLastSubseq != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_subseq", paginationLastSubseq)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source", source)); // query parameter
            if (eventInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_info", eventInfo)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountActivityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountActivityResponse)));
        }

        /// <summary>
        /// Retrieve statement information for your account. ## Description This information should be used for accounting reconciliation.&lt;br&gt; This data is what is being used in &lt;a href&#x3D;\&quot;https://smarkets.com/account/statement\&quot;&gt;our statement page&lt;/a&gt;  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampMax">Maximum datetime for records (optional)</param>
        /// <param name="timestampMin">Minimum datetime for records (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="orderId">Order IDs to filter by (optional)</param>
        /// <param name="paginationLastSeq">Last sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="paginationLastSubseq">Last sub-sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="sort"> How to sort the results. When making paginated requests, pagination_last_seq and pagination_last_subseq should be used with the values from the last record of the previous page (optional, default to -seq,-subseq)</param>
        /// <param name="source">Account activity sources to filter by. (optional)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>Task of AccountActivityResponse</returns>
        public async System.Threading.Tasks.Task<AccountActivityResponse> GetActivityAsync (DateTime? timestampMax = null, DateTime? timestampMin = null, int? limit = null, List<string> marketId = null, List<string> orderId = null, string paginationLastSeq = null, string paginationLastSubseq = null, string sort = null, List<string> source = null, bool? eventInfo = null)
        {
             ApiResponse<AccountActivityResponse> localVarResponse = await GetActivityAsyncWithHttpInfo(timestampMax, timestampMin, limit, marketId, orderId, paginationLastSeq, paginationLastSubseq, sort, source, eventInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve statement information for your account. ## Description This information should be used for accounting reconciliation.&lt;br&gt; This data is what is being used in &lt;a href&#x3D;\&quot;https://smarkets.com/account/statement\&quot;&gt;our statement page&lt;/a&gt;  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampMax">Maximum datetime for records (optional)</param>
        /// <param name="timestampMin">Minimum datetime for records (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="orderId">Order IDs to filter by (optional)</param>
        /// <param name="paginationLastSeq">Last sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="paginationLastSubseq">Last sub-sequence number of the previous page. This parameter should be used for paginated requests (optional)</param>
        /// <param name="sort"> How to sort the results. When making paginated requests, pagination_last_seq and pagination_last_subseq should be used with the values from the last record of the previous page (optional, default to -seq,-subseq)</param>
        /// <param name="source">Account activity sources to filter by. (optional)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>Task of ApiResponse (AccountActivityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountActivityResponse>> GetActivityAsyncWithHttpInfo (DateTime? timestampMax = null, DateTime? timestampMin = null, int? limit = null, List<string> marketId = null, List<string> orderId = null, string paginationLastSeq = null, string paginationLastSubseq = null, string sort = null, List<string> source = null, bool? eventInfo = null)
        {

            var localVarPath = "/v3/accounts/activity/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timestampMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_max", timestampMax)); // query parameter
            if (timestampMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_min", timestampMin)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (marketId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "market_id", marketId)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "order_id", orderId)); // query parameter
            if (paginationLastSeq != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_seq", paginationLastSeq)); // query parameter
            if (paginationLastSubseq != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_subseq", paginationLastSubseq)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "source", source)); // query parameter
            if (eventInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_info", eventInfo)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountActivityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountActivityResponse)));
        }

        /// <summary>
        /// Retrieve statement information grouped by event. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastTimestampMax">Maximum last timestamp for records, defaults to the current datetime (optional)</param>
        /// <param name="lastTimestampMin">Minimum last timestamp for records, defaults to 1 month ago (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>StatementByEventResponse</returns>
        public StatementByEventResponse GetStatementByEvent (DateTime? lastTimestampMax = null, DateTime? lastTimestampMin = null, int? limit = null, bool? eventInfo = null)
        {
             ApiResponse<StatementByEventResponse> localVarResponse = GetStatementByEventWithHttpInfo(lastTimestampMax, lastTimestampMin, limit, eventInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve statement information grouped by event. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastTimestampMax">Maximum last timestamp for records, defaults to the current datetime (optional)</param>
        /// <param name="lastTimestampMin">Minimum last timestamp for records, defaults to 1 month ago (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>ApiResponse of StatementByEventResponse</returns>
        public ApiResponse< StatementByEventResponse > GetStatementByEventWithHttpInfo (DateTime? lastTimestampMax = null, DateTime? lastTimestampMin = null, int? limit = null, bool? eventInfo = null)
        {

            var localVarPath = "/v3/statement_by_event/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastTimestampMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_timestamp_max", lastTimestampMax)); // query parameter
            if (lastTimestampMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_timestamp_min", lastTimestampMin)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (eventInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_info", eventInfo)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatementByEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatementByEventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatementByEventResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatementByEventResponse)));
        }

        /// <summary>
        /// Retrieve statement information grouped by event. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastTimestampMax">Maximum last timestamp for records, defaults to the current datetime (optional)</param>
        /// <param name="lastTimestampMin">Minimum last timestamp for records, defaults to 1 month ago (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>Task of StatementByEventResponse</returns>
        public async System.Threading.Tasks.Task<StatementByEventResponse> GetStatementByEventAsync (DateTime? lastTimestampMax = null, DateTime? lastTimestampMin = null, int? limit = null, bool? eventInfo = null)
        {
             ApiResponse<StatementByEventResponse> localVarResponse = await GetStatementByEventAsyncWithHttpInfo(lastTimestampMax, lastTimestampMin, limit, eventInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve statement information grouped by event. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastTimestampMax">Maximum last timestamp for records, defaults to the current datetime (optional)</param>
        /// <param name="lastTimestampMin">Minimum last timestamp for records, defaults to 1 month ago (optional)</param>
        /// <param name="limit">Maximum number of account activity rows to return on a single call (optional, default to 20)</param>
        /// <param name="eventInfo">Should response be enhanced with include event information (optional, default to false)</param>
        /// <returns>Task of ApiResponse (StatementByEventResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatementByEventResponse>> GetStatementByEventAsyncWithHttpInfo (DateTime? lastTimestampMax = null, DateTime? lastTimestampMin = null, int? limit = null, bool? eventInfo = null)
        {

            var localVarPath = "/v3/statement_by_event/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastTimestampMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_timestamp_max", lastTimestampMax)); // query parameter
            if (lastTimestampMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_timestamp_min", lastTimestampMin)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (eventInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_info", eventInfo)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatementByEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatementByEventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatementByEventResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatementByEventResponse)));
        }

    }
}
