/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel specific order.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per second&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID to cancel</param>
        /// <returns>Object</returns>
        Object CancelOrder (int? orderId);

        /// <summary>
        /// Cancel specific order.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per second&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID to cancel</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CancelOrderWithHttpInfo (int? orderId);
        /// <summary>
        /// Cancel all orders.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 1 request per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">This ID uniquely identifies the market (optional)</param>
        /// <returns>Object</returns>
        Object CancelOrders (string marketId = null);

        /// <summary>
        /// Cancel all orders.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 1 request per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">This ID uniquely identifies the market (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CancelOrdersWithHttpInfo (string marketId = null);
        /// <summary>
        ///      Route for affiliates to place orders via HTTP.
        /// </summary>
        /// <remarks>
        /// ## Description All orders are placed with a time in force of &#x27;fill-or-kill&#x27;.  ##  Rate limits Maximum 1 request per second&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 CreateAffiliateOrder (Body17 body = null);

        /// <summary>
        ///      Route for affiliates to place orders via HTTP.
        /// </summary>
        /// <remarks>
        /// ## Description All orders are placed with a time in force of &#x27;fill-or-kill&#x27;.  ##  Rate limits Maximum 1 request per second&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> CreateAffiliateOrderWithHttpInfo (Body17 body = null);
        /// <summary>
        /// Place orders on the exchange.
        /// </summary>
        /// <remarks>
        /// ## Description This route only works for Smarkets API users, other users will receive a 403 status code response.&lt;br&gt;&lt;br&gt; For immediate_or_cancel orders type, the route will return when the order is matched (or cancelled).&lt;br&gt; For all other order types, the route will return when the order is accepted by the exchange.&lt;br&gt; In the latter case, GET v3/orders should be used to check the status of the order, using the order id returned by this response.  ##  Rate limits Rate limits are applied on an per account basis
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20053</returns>
        InlineResponse20053 CreateOrder (Body43 body = null);

        /// <summary>
        /// Place orders on the exchange.
        /// </summary>
        /// <remarks>
        /// ## Description This route only works for Smarkets API users, other users will receive a 403 status code response.&lt;br&gt;&lt;br&gt; For immediate_or_cancel orders type, the route will return when the order is matched (or cancelled).&lt;br&gt; For all other order types, the route will return when the order is accepted by the exchange.&lt;br&gt; In the latter case, GET v3/orders should be used to check the status of the order, using the order id returned by this response.  ##  Rate limits Rate limits are applied on an per account basis
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        ApiResponse<InlineResponse20053> CreateOrderWithHttpInfo (Body43 body = null);
        /// <summary>
        /// Get one order by its order id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>OrderResponse</returns>
        OrderResponse GetOrderById (string orderId);

        /// <summary>
        /// Get one order by its order id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of OrderResponse</returns>
        ApiResponse<OrderResponse> GetOrderByIdWithHttpInfo (string orderId);
        /// <summary>
        /// Retrieve current orders on Smarkets, these include open and recently settled orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">This ID uniquely identifies the contract (optional)</param>
        /// <param name="createdDatetimeMax">When was the order created (optional)</param>
        /// <param name="createdDatetimeMin">When was the order created (optional)</param>
        /// <param name="id">Order IDs to filter by (optional)</param>
        /// <param name="limit">Maximum number of orders to be retrieved in one API call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="paginationLastId"> The last order id from the previous page, so we can fetch the subsequent orders.&lt;br&gt; It should be used in conjuntion with the sort parameter (optional)</param>
        /// <param name="sequenceNumberMax">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="sequenceNumberMin">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="state">Order states to filter by. By default all order states are returned (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="sort">How to sort the results, it should be used in conjuntion with the pagination parameter (optional, default to id)</param>
        /// <returns>OrdersResponse</returns>
        OrdersResponse GetOrders (string contractId = null, DateTime? createdDatetimeMax = null, DateTime? createdDatetimeMin = null, List<string> id = null, int? limit = null, List<string> marketId = null, string paginationLastId = null, int? sequenceNumberMax = null, int? sequenceNumberMin = null, List<string> state = null, string side = null, string sort = null);

        /// <summary>
        /// Retrieve current orders on Smarkets, these include open and recently settled orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">This ID uniquely identifies the contract (optional)</param>
        /// <param name="createdDatetimeMax">When was the order created (optional)</param>
        /// <param name="createdDatetimeMin">When was the order created (optional)</param>
        /// <param name="id">Order IDs to filter by (optional)</param>
        /// <param name="limit">Maximum number of orders to be retrieved in one API call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="paginationLastId"> The last order id from the previous page, so we can fetch the subsequent orders.&lt;br&gt; It should be used in conjuntion with the sort parameter (optional)</param>
        /// <param name="sequenceNumberMax">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="sequenceNumberMin">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="state">Order states to filter by. By default all order states are returned (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="sort">How to sort the results, it should be used in conjuntion with the pagination parameter (optional, default to id)</param>
        /// <returns>ApiResponse of OrdersResponse</returns>
        ApiResponse<OrdersResponse> GetOrdersWithHttpInfo (string contractId = null, DateTime? createdDatetimeMax = null, DateTime? createdDatetimeMin = null, List<string> id = null, int? limit = null, List<string> marketId = null, string paginationLastId = null, int? sequenceNumberMax = null, int? sequenceNumberMin = null, List<string> state = null, string side = null, string sort = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId"> (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="contractsLimit"> (optional, default to 10)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetOrdersV0 (List<int?> marketId = null, List<int?> contractId = null, string side = null, List<string> state = null, int? contractsLimit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId"> (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="contractsLimit"> (optional, default to 10)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetOrdersV0WithHttpInfo (List<int?> marketId = null, List<int?> contractId = null, string side = null, List<string> state = null, int? contractsLimit = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel specific order.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per second&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID to cancel</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CancelOrderAsync (int? orderId);

        /// <summary>
        /// Cancel specific order.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per second&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID to cancel</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelOrderAsyncWithHttpInfo (int? orderId);
        /// <summary>
        /// Cancel all orders.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 1 request per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">This ID uniquely identifies the market (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CancelOrdersAsync (string marketId = null);

        /// <summary>
        /// Cancel all orders.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 1 request per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">This ID uniquely identifies the market (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelOrdersAsyncWithHttpInfo (string marketId = null);
        /// <summary>
        ///      Route for affiliates to place orders via HTTP.
        /// </summary>
        /// <remarks>
        /// ## Description All orders are placed with a time in force of &#x27;fill-or-kill&#x27;.  ##  Rate limits Maximum 1 request per second&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> CreateAffiliateOrderAsync (Body17 body = null);

        /// <summary>
        ///      Route for affiliates to place orders via HTTP.
        /// </summary>
        /// <remarks>
        /// ## Description All orders are placed with a time in force of &#x27;fill-or-kill&#x27;.  ##  Rate limits Maximum 1 request per second&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> CreateAffiliateOrderAsyncWithHttpInfo (Body17 body = null);
        /// <summary>
        /// Place orders on the exchange.
        /// </summary>
        /// <remarks>
        /// ## Description This route only works for Smarkets API users, other users will receive a 403 status code response.&lt;br&gt;&lt;br&gt; For immediate_or_cancel orders type, the route will return when the order is matched (or cancelled).&lt;br&gt; For all other order types, the route will return when the order is accepted by the exchange.&lt;br&gt; In the latter case, GET v3/orders should be used to check the status of the order, using the order id returned by this response.  ##  Rate limits Rate limits are applied on an per account basis
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20053</returns>
        System.Threading.Tasks.Task<InlineResponse20053> CreateOrderAsync (Body43 body = null);

        /// <summary>
        /// Place orders on the exchange.
        /// </summary>
        /// <remarks>
        /// ## Description This route only works for Smarkets API users, other users will receive a 403 status code response.&lt;br&gt;&lt;br&gt; For immediate_or_cancel orders type, the route will return when the order is matched (or cancelled).&lt;br&gt; For all other order types, the route will return when the order is accepted by the exchange.&lt;br&gt; In the latter case, GET v3/orders should be used to check the status of the order, using the order id returned by this response.  ##  Rate limits Rate limits are applied on an per account basis
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> CreateOrderAsyncWithHttpInfo (Body43 body = null);
        /// <summary>
        /// Get one order by its order id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of OrderResponse</returns>
        System.Threading.Tasks.Task<OrderResponse> GetOrderByIdAsync (string orderId);

        /// <summary>
        /// Get one order by its order id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderResponse>> GetOrderByIdAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Retrieve current orders on Smarkets, these include open and recently settled orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">This ID uniquely identifies the contract (optional)</param>
        /// <param name="createdDatetimeMax">When was the order created (optional)</param>
        /// <param name="createdDatetimeMin">When was the order created (optional)</param>
        /// <param name="id">Order IDs to filter by (optional)</param>
        /// <param name="limit">Maximum number of orders to be retrieved in one API call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="paginationLastId"> The last order id from the previous page, so we can fetch the subsequent orders.&lt;br&gt; It should be used in conjuntion with the sort parameter (optional)</param>
        /// <param name="sequenceNumberMax">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="sequenceNumberMin">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="state">Order states to filter by. By default all order states are returned (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="sort">How to sort the results, it should be used in conjuntion with the pagination parameter (optional, default to id)</param>
        /// <returns>Task of OrdersResponse</returns>
        System.Threading.Tasks.Task<OrdersResponse> GetOrdersAsync (string contractId = null, DateTime? createdDatetimeMax = null, DateTime? createdDatetimeMin = null, List<string> id = null, int? limit = null, List<string> marketId = null, string paginationLastId = null, int? sequenceNumberMax = null, int? sequenceNumberMin = null, List<string> state = null, string side = null, string sort = null);

        /// <summary>
        /// Retrieve current orders on Smarkets, these include open and recently settled orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">This ID uniquely identifies the contract (optional)</param>
        /// <param name="createdDatetimeMax">When was the order created (optional)</param>
        /// <param name="createdDatetimeMin">When was the order created (optional)</param>
        /// <param name="id">Order IDs to filter by (optional)</param>
        /// <param name="limit">Maximum number of orders to be retrieved in one API call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="paginationLastId"> The last order id from the previous page, so we can fetch the subsequent orders.&lt;br&gt; It should be used in conjuntion with the sort parameter (optional)</param>
        /// <param name="sequenceNumberMax">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="sequenceNumberMin">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="state">Order states to filter by. By default all order states are returned (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="sort">How to sort the results, it should be used in conjuntion with the pagination parameter (optional, default to id)</param>
        /// <returns>Task of ApiResponse (OrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrdersResponse>> GetOrdersAsyncWithHttpInfo (string contractId = null, DateTime? createdDatetimeMax = null, DateTime? createdDatetimeMin = null, List<string> id = null, int? limit = null, List<string> marketId = null, string paginationLastId = null, int? sequenceNumberMax = null, int? sequenceNumberMin = null, List<string> state = null, string side = null, string sort = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId"> (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="contractsLimit"> (optional, default to 10)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetOrdersV0Async (List<int?> marketId = null, List<int?> contractId = null, string side = null, List<string> state = null, int? contractsLimit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId"> (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="contractsLimit"> (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetOrdersV0AsyncWithHttpInfo (List<int?> marketId = null, List<int?> contractId = null, string side = null, List<string> state = null, int? contractsLimit = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class OrdersApi : IOrdersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// </summary>
        /// <returns></returns>
        public OrdersApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel specific order.  ##  Rate limits Maximum 10 requests per second&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID to cancel</param>
        /// <returns>Object</returns>
        public Object CancelOrder (int? orderId)
        {
             ApiResponse<Object> localVarResponse = CancelOrderWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel specific order.  ##  Rate limits Maximum 10 requests per second&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID to cancel</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CancelOrderWithHttpInfo (int? orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->CancelOrder");

            var localVarPath = "/v3/orders/{order_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Cancel specific order.  ##  Rate limits Maximum 10 requests per second&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID to cancel</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CancelOrderAsync (int? orderId)
        {
             ApiResponse<Object> localVarResponse = await CancelOrderAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel specific order.  ##  Rate limits Maximum 10 requests per second&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID to cancel</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelOrderAsyncWithHttpInfo (int? orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->CancelOrder");

            var localVarPath = "/v3/orders/{order_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Cancel all orders.  ##  Rate limits Maximum 1 request per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">This ID uniquely identifies the market (optional)</param>
        /// <returns>Object</returns>
        public Object CancelOrders (string marketId = null)
        {
             ApiResponse<Object> localVarResponse = CancelOrdersWithHttpInfo(marketId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all orders.  ##  Rate limits Maximum 1 request per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">This ID uniquely identifies the market (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CancelOrdersWithHttpInfo (string marketId = null)
        {

            var localVarPath = "/v3/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "market_id", marketId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Cancel all orders.  ##  Rate limits Maximum 1 request per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">This ID uniquely identifies the market (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CancelOrdersAsync (string marketId = null)
        {
             ApiResponse<Object> localVarResponse = await CancelOrdersAsyncWithHttpInfo(marketId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all orders.  ##  Rate limits Maximum 1 request per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">This ID uniquely identifies the market (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelOrdersAsyncWithHttpInfo (string marketId = null)
        {

            var localVarPath = "/v3/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "market_id", marketId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///      Route for affiliates to place orders via HTTP. ## Description All orders are placed with a time in force of &#x27;fill-or-kill&#x27;.  ##  Rate limits Maximum 1 request per second&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 CreateAffiliateOrder (Body17 body = null)
        {
             ApiResponse<InlineResponse20031> localVarResponse = CreateAffiliateOrderWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Route for affiliates to place orders via HTTP. ## Description All orders are placed with a time in force of &#x27;fill-or-kill&#x27;.  ##  Rate limits Maximum 1 request per second&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public ApiResponse< InlineResponse20031 > CreateAffiliateOrderWithHttpInfo (Body17 body = null)
        {

            var localVarPath = "/v3/affiliate/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAffiliateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        ///      Route for affiliates to place orders via HTTP. ## Description All orders are placed with a time in force of &#x27;fill-or-kill&#x27;.  ##  Rate limits Maximum 1 request per second&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> CreateAffiliateOrderAsync (Body17 body = null)
        {
             ApiResponse<InlineResponse20031> localVarResponse = await CreateAffiliateOrderAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Route for affiliates to place orders via HTTP. ## Description All orders are placed with a time in force of &#x27;fill-or-kill&#x27;.  ##  Rate limits Maximum 1 request per second&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> CreateAffiliateOrderAsyncWithHttpInfo (Body17 body = null)
        {

            var localVarPath = "/v3/affiliate/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAffiliateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// Place orders on the exchange. ## Description This route only works for Smarkets API users, other users will receive a 403 status code response.&lt;br&gt;&lt;br&gt; For immediate_or_cancel orders type, the route will return when the order is matched (or cancelled).&lt;br&gt; For all other order types, the route will return when the order is accepted by the exchange.&lt;br&gt; In the latter case, GET v3/orders should be used to check the status of the order, using the order id returned by this response.  ##  Rate limits Rate limits are applied on an per account basis
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20053</returns>
        public InlineResponse20053 CreateOrder (Body43 body = null)
        {
             ApiResponse<InlineResponse20053> localVarResponse = CreateOrderWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place orders on the exchange. ## Description This route only works for Smarkets API users, other users will receive a 403 status code response.&lt;br&gt;&lt;br&gt; For immediate_or_cancel orders type, the route will return when the order is matched (or cancelled).&lt;br&gt; For all other order types, the route will return when the order is accepted by the exchange.&lt;br&gt; In the latter case, GET v3/orders should be used to check the status of the order, using the order id returned by this response.  ##  Rate limits Rate limits are applied on an per account basis
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        public ApiResponse< InlineResponse20053 > CreateOrderWithHttpInfo (Body43 body = null)
        {

            var localVarPath = "/v3/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20053) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        /// Place orders on the exchange. ## Description This route only works for Smarkets API users, other users will receive a 403 status code response.&lt;br&gt;&lt;br&gt; For immediate_or_cancel orders type, the route will return when the order is matched (or cancelled).&lt;br&gt; For all other order types, the route will return when the order is accepted by the exchange.&lt;br&gt; In the latter case, GET v3/orders should be used to check the status of the order, using the order id returned by this response.  ##  Rate limits Rate limits are applied on an per account basis
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20053</returns>
        public async System.Threading.Tasks.Task<InlineResponse20053> CreateOrderAsync (Body43 body = null)
        {
             ApiResponse<InlineResponse20053> localVarResponse = await CreateOrderAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place orders on the exchange. ## Description This route only works for Smarkets API users, other users will receive a 403 status code response.&lt;br&gt;&lt;br&gt; For immediate_or_cancel orders type, the route will return when the order is matched (or cancelled).&lt;br&gt; For all other order types, the route will return when the order is accepted by the exchange.&lt;br&gt; In the latter case, GET v3/orders should be used to check the status of the order, using the order id returned by this response.  ##  Rate limits Rate limits are applied on an per account basis
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> CreateOrderAsyncWithHttpInfo (Body43 body = null)
        {

            var localVarPath = "/v3/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20053>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20053) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20053)));
        }

        /// <summary>
        /// Get one order by its order id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>OrderResponse</returns>
        public OrderResponse GetOrderById (string orderId)
        {
             ApiResponse<OrderResponse> localVarResponse = GetOrderByIdWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get one order by its order id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of OrderResponse</returns>
        public ApiResponse< OrderResponse > GetOrderByIdWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderById");

            var localVarPath = "/v3/orders/{order_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Get one order by its order id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of OrderResponse</returns>
        public async System.Threading.Tasks.Task<OrderResponse> GetOrderByIdAsync (string orderId)
        {
             ApiResponse<OrderResponse> localVarResponse = await GetOrderByIdAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get one order by its order id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderResponse>> GetOrderByIdAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrdersApi->GetOrderById");

            var localVarPath = "/v3/orders/{order_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderResponse)));
        }

        /// <summary>
        /// Retrieve current orders on Smarkets, these include open and recently settled orders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">This ID uniquely identifies the contract (optional)</param>
        /// <param name="createdDatetimeMax">When was the order created (optional)</param>
        /// <param name="createdDatetimeMin">When was the order created (optional)</param>
        /// <param name="id">Order IDs to filter by (optional)</param>
        /// <param name="limit">Maximum number of orders to be retrieved in one API call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="paginationLastId"> The last order id from the previous page, so we can fetch the subsequent orders.&lt;br&gt; It should be used in conjuntion with the sort parameter (optional)</param>
        /// <param name="sequenceNumberMax">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="sequenceNumberMin">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="state">Order states to filter by. By default all order states are returned (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="sort">How to sort the results, it should be used in conjuntion with the pagination parameter (optional, default to id)</param>
        /// <returns>OrdersResponse</returns>
        public OrdersResponse GetOrders (string contractId = null, DateTime? createdDatetimeMax = null, DateTime? createdDatetimeMin = null, List<string> id = null, int? limit = null, List<string> marketId = null, string paginationLastId = null, int? sequenceNumberMax = null, int? sequenceNumberMin = null, List<string> state = null, string side = null, string sort = null)
        {
             ApiResponse<OrdersResponse> localVarResponse = GetOrdersWithHttpInfo(contractId, createdDatetimeMax, createdDatetimeMin, id, limit, marketId, paginationLastId, sequenceNumberMax, sequenceNumberMin, state, side, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve current orders on Smarkets, these include open and recently settled orders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">This ID uniquely identifies the contract (optional)</param>
        /// <param name="createdDatetimeMax">When was the order created (optional)</param>
        /// <param name="createdDatetimeMin">When was the order created (optional)</param>
        /// <param name="id">Order IDs to filter by (optional)</param>
        /// <param name="limit">Maximum number of orders to be retrieved in one API call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="paginationLastId"> The last order id from the previous page, so we can fetch the subsequent orders.&lt;br&gt; It should be used in conjuntion with the sort parameter (optional)</param>
        /// <param name="sequenceNumberMax">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="sequenceNumberMin">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="state">Order states to filter by. By default all order states are returned (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="sort">How to sort the results, it should be used in conjuntion with the pagination parameter (optional, default to id)</param>
        /// <returns>ApiResponse of OrdersResponse</returns>
        public ApiResponse< OrdersResponse > GetOrdersWithHttpInfo (string contractId = null, DateTime? createdDatetimeMax = null, DateTime? createdDatetimeMin = null, List<string> id = null, int? limit = null, List<string> marketId = null, string paginationLastId = null, int? sequenceNumberMax = null, int? sequenceNumberMin = null, List<string> state = null, string side = null, string sort = null)
        {

            var localVarPath = "/v3/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contract_id", contractId)); // query parameter
            if (createdDatetimeMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_datetime_max", createdDatetimeMax)); // query parameter
            if (createdDatetimeMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_datetime_min", createdDatetimeMin)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (marketId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "market_id", marketId)); // query parameter
            if (paginationLastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_id", paginationLastId)); // query parameter
            if (sequenceNumberMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sequence_number_max", sequenceNumberMax)); // query parameter
            if (sequenceNumberMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sequence_number_min", sequenceNumberMin)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "state", state)); // query parameter
            if (side != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "side", side)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrdersResponse)));
        }

        /// <summary>
        /// Retrieve current orders on Smarkets, these include open and recently settled orders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">This ID uniquely identifies the contract (optional)</param>
        /// <param name="createdDatetimeMax">When was the order created (optional)</param>
        /// <param name="createdDatetimeMin">When was the order created (optional)</param>
        /// <param name="id">Order IDs to filter by (optional)</param>
        /// <param name="limit">Maximum number of orders to be retrieved in one API call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="paginationLastId"> The last order id from the previous page, so we can fetch the subsequent orders.&lt;br&gt; It should be used in conjuntion with the sort parameter (optional)</param>
        /// <param name="sequenceNumberMax">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="sequenceNumberMin">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="state">Order states to filter by. By default all order states are returned (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="sort">How to sort the results, it should be used in conjuntion with the pagination parameter (optional, default to id)</param>
        /// <returns>Task of OrdersResponse</returns>
        public async System.Threading.Tasks.Task<OrdersResponse> GetOrdersAsync (string contractId = null, DateTime? createdDatetimeMax = null, DateTime? createdDatetimeMin = null, List<string> id = null, int? limit = null, List<string> marketId = null, string paginationLastId = null, int? sequenceNumberMax = null, int? sequenceNumberMin = null, List<string> state = null, string side = null, string sort = null)
        {
             ApiResponse<OrdersResponse> localVarResponse = await GetOrdersAsyncWithHttpInfo(contractId, createdDatetimeMax, createdDatetimeMin, id, limit, marketId, paginationLastId, sequenceNumberMax, sequenceNumberMin, state, side, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve current orders on Smarkets, these include open and recently settled orders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">This ID uniquely identifies the contract (optional)</param>
        /// <param name="createdDatetimeMax">When was the order created (optional)</param>
        /// <param name="createdDatetimeMin">When was the order created (optional)</param>
        /// <param name="id">Order IDs to filter by (optional)</param>
        /// <param name="limit">Maximum number of orders to be retrieved in one API call (optional, default to 20)</param>
        /// <param name="marketId">Market IDs to filter by (optional)</param>
        /// <param name="paginationLastId"> The last order id from the previous page, so we can fetch the subsequent orders.&lt;br&gt; It should be used in conjuntion with the sort parameter (optional)</param>
        /// <param name="sequenceNumberMax">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="sequenceNumberMin">This refers to the sequence number in the account activity - statement endpoint (optional)</param>
        /// <param name="state">Order states to filter by. By default all order states are returned (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="sort">How to sort the results, it should be used in conjuntion with the pagination parameter (optional, default to id)</param>
        /// <returns>Task of ApiResponse (OrdersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrdersResponse>> GetOrdersAsyncWithHttpInfo (string contractId = null, DateTime? createdDatetimeMax = null, DateTime? createdDatetimeMin = null, List<string> id = null, int? limit = null, List<string> marketId = null, string paginationLastId = null, int? sequenceNumberMax = null, int? sequenceNumberMin = null, List<string> state = null, string side = null, string sort = null)
        {

            var localVarPath = "/v3/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contract_id", contractId)); // query parameter
            if (createdDatetimeMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_datetime_max", createdDatetimeMax)); // query parameter
            if (createdDatetimeMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_datetime_min", createdDatetimeMin)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (marketId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "market_id", marketId)); // query parameter
            if (paginationLastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_id", paginationLastId)); // query parameter
            if (sequenceNumberMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sequence_number_max", sequenceNumberMax)); // query parameter
            if (sequenceNumberMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sequence_number_min", sequenceNumberMin)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "state", state)); // query parameter
            if (side != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "side", side)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrdersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrdersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrdersResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId"> (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="contractsLimit"> (optional, default to 10)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetOrdersV0 (List<int?> marketId = null, List<int?> contractId = null, string side = null, List<string> state = null, int? contractsLimit = null)
        {
             ApiResponse<InlineResponse20011> localVarResponse = GetOrdersV0WithHttpInfo(marketId, contractId, side, state, contractsLimit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId"> (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="contractsLimit"> (optional, default to 10)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse< InlineResponse20011 > GetOrdersV0WithHttpInfo (List<int?> marketId = null, List<int?> contractId = null, string side = null, List<string> state = null, int? contractsLimit = null)
        {

            var localVarPath = "/v0/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "market_id", marketId)); // query parameter
            if (contractId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "contract_id", contractId)); // query parameter
            if (side != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "side", side)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "state", state)); // query parameter
            if (contractsLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contracts_limit", contractsLimit)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrdersV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId"> (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="contractsLimit"> (optional, default to 10)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> GetOrdersV0Async (List<int?> marketId = null, List<int?> contractId = null, string side = null, List<string> state = null, int? contractsLimit = null)
        {
             ApiResponse<InlineResponse20011> localVarResponse = await GetOrdersV0AsyncWithHttpInfo(marketId, contractId, side, state, contractsLimit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId"> (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="contractsLimit"> (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetOrdersV0AsyncWithHttpInfo (List<int?> marketId = null, List<int?> contractId = null, string side = null, List<string> state = null, int? contractsLimit = null)
        {

            var localVarPath = "/v0/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "market_id", marketId)); // query parameter
            if (contractId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "contract_id", contractId)); // query parameter
            if (side != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "side", side)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "state", state)); // query parameter
            if (contractsLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contracts_limit", contractsLimit)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrdersV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

    }
}
