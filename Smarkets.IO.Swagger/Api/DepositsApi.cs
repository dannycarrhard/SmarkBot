/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDepositsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create deposit corresponding to card tokenization.
        /// </summary>
        /// <remarks>
        /// ## Description This call creates a deposit and a method placeholders and returns the parameters needed to tokenize a card using the eProtect Worlpay system. The deposit can then be processed by posting the &#x60;registration_id&#x60; (one time card token) to &#x60;/v3/worlspay_deposits/registration_id/&#x60;.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>WorldpayPretokenizationResponse</returns>
        WorldpayPretokenizationResponse CreatePretokenizationDepositWorldpay (WorldpayPretokenizationRequest body = null);

        /// <summary>
        /// Create deposit corresponding to card tokenization.
        /// </summary>
        /// <remarks>
        /// ## Description This call creates a deposit and a method placeholders and returns the parameters needed to tokenize a card using the eProtect Worlpay system. The deposit can then be processed by posting the &#x60;registration_id&#x60; (one time card token) to &#x60;/v3/worlspay_deposits/registration_id/&#x60;.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of WorldpayPretokenizationResponse</returns>
        ApiResponse<WorldpayPretokenizationResponse> CreatePretokenizationDepositWorldpayWithHttpInfo (WorldpayPretokenizationRequest body = null);
        /// <summary>
        ///      Create a card deposit.
        /// </summary>
        /// <remarks>
        /// ## Description This route can be used in 3 different ways:  - Deposit with a new card - the card details need to be provided along with the  remaining deposit details. After the deposit succeeds, the card will be added as  a recognized method of payment  - Deposit with an existing card - the method id must be provided along with the  deposit details. This needs to be a card that was previously used for a deposit.  - Deposit with Google/Apple Pay - last four, issuer, token, token type and  token expiry need to be provided.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>CardDepositResponse</returns>
        CardDepositResponse DepositCard (Body19 body = null);

        /// <summary>
        ///      Create a card deposit.
        /// </summary>
        /// <remarks>
        /// ## Description This route can be used in 3 different ways:  - Deposit with a new card - the card details need to be provided along with the  remaining deposit details. After the deposit succeeds, the card will be added as  a recognized method of payment  - Deposit with an existing card - the method id must be provided along with the  deposit details. This needs to be a card that was previously used for a deposit.  - Deposit with Google/Apple Pay - last four, issuer, token, token type and  token expiry need to be provided.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of CardDepositResponse</returns>
        ApiResponse<CardDepositResponse> DepositCardWithHttpInfo (Body19 body = null);
        /// <summary>
        ///      Create a Neteller deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the amount, neteller secure id and the stored method id, we call neteller to process the transaction and return a success or failure response accordingly.  By calling this route with the amount, success/fail urls and the stored method id, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the neteller website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>NetellerDepositResponse</returns>
        NetellerDepositResponse DepositNeteller (Body33 body = null);

        /// <summary>
        ///      Create a Neteller deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the amount, neteller secure id and the stored method id, we call neteller to process the transaction and return a success or failure response accordingly.  By calling this route with the amount, success/fail urls and the stored method id, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the neteller website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of NetellerDepositResponse</returns>
        ApiResponse<NetellerDepositResponse> DepositNetellerWithHttpInfo (Body33 body = null);
        /// <summary>
        ///      Create an Open Bank Tranfer deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a open bank tranfer deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on their bank&#x27;s website/app.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>OpenBankTransferDepositResponse</returns>
        OpenBankTransferDepositResponse DepositOpenBankTransfer (Body41 body = null);

        /// <summary>
        ///      Create an Open Bank Tranfer deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a open bank tranfer deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on their bank&#x27;s website/app.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of OpenBankTransferDepositResponse</returns>
        ApiResponse<OpenBankTransferDepositResponse> DepositOpenBankTransferWithHttpInfo (Body41 body = null);
        /// <summary>
        ///      Create a Paypal deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the amount, paypal payment_method_nonce and paypal payer_id, we call paypal to process the transaction and return a success or failure response accordingly.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>PaypalDepositResponse</returns>
        PaypalDepositResponse DepositPaypal (Body48 body = null);

        /// <summary>
        ///      Create a Paypal deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the amount, paypal payment_method_nonce and paypal payer_id, we call paypal to process the transaction and return a success or failure response accordingly.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of PaypalDepositResponse</returns>
        ApiResponse<PaypalDepositResponse> DepositPaypalWithHttpInfo (Body48 body = null);
        /// <summary>
        ///      Create a Skrill deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a skrill deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the skrill website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>SkrillDepositResponse</returns>
        SkrillDepositResponse DepositSkrill (Body52 body = null);

        /// <summary>
        ///      Create a Skrill deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a skrill deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the skrill website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of SkrillDepositResponse</returns>
        ApiResponse<SkrillDepositResponse> DepositSkrillWithHttpInfo (Body52 body = null);
        /// <summary>
        ///      Create a Trustly deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a trustly deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the trustly website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TrustlyDepositResponse</returns>
        TrustlyDepositResponse DepositTrustly (Body56 body = null);

        /// <summary>
        ///      Create a Trustly deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a trustly deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the trustly website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TrustlyDepositResponse</returns>
        ApiResponse<TrustlyDepositResponse> DepositTrustlyWithHttpInfo (Body56 body = null);
        /// <summary>
        /// Process card deposit with one time use registration id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>WorldpayDepositResponse</returns>
        WorldpayDepositResponse DepositWithRegistrationIdWorldpay (WorldpayRegistrationIdDepositRequest body = null);

        /// <summary>
        /// Process card deposit with one time use registration id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of WorldpayDepositResponse</returns>
        ApiResponse<WorldpayDepositResponse> DepositWithRegistrationIdWorldpayWithHttpInfo (WorldpayRegistrationIdDepositRequest body = null);
        /// <summary>
        /// Create deposit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>WorldpayDepositResponse</returns>
        WorldpayDepositResponse DepositWorldpay (WorldpayDepositRequest body = null);

        /// <summary>
        /// Create deposit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of WorldpayDepositResponse</returns>
        ApiResponse<WorldpayDepositResponse> DepositWorldpayWithHttpInfo (WorldpayDepositRequest body = null);
        /// <summary>
        /// Retrieve conditions for the first deposit to be bonus eligible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DepositBonusConditionsResponse</returns>
        DepositBonusConditionsResponse GetFirstDepositBonusConditions ();

        /// <summary>
        /// Retrieve conditions for the first deposit to be bonus eligible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DepositBonusConditionsResponse</returns>
        ApiResponse<DepositBonusConditionsResponse> GetFirstDepositBonusConditionsWithHttpInfo ();
        /// <summary>
        ///      Retrieve a Open Bank Transfer deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the deposit&#x27;s provider reference, we return the state of the corresponding open bank transfer deposit. This route should be called after the user is redirected back to Smarkets after processing his/her open bank transfer deposit in the bank&#x27;s website or mobile app.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerReference"></param>
        /// <returns>DepositStateResponse</returns>
        DepositStateResponse GetOpenBankTransferDepositState (string providerReference);

        /// <summary>
        ///      Retrieve a Open Bank Transfer deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the deposit&#x27;s provider reference, we return the state of the corresponding open bank transfer deposit. This route should be called after the user is redirected back to Smarkets after processing his/her open bank transfer deposit in the bank&#x27;s website or mobile app.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerReference"></param>
        /// <returns>ApiResponse of DepositStateResponse</returns>
        ApiResponse<DepositStateResponse> GetOpenBankTransferDepositStateWithHttpInfo (string providerReference);
        /// <summary>
        /// Get client token to initialize Paypal client SDK.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClientToken</returns>
        ClientToken GetPaypalClientToken ();

        /// <summary>
        /// Get client token to initialize Paypal client SDK.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClientToken</returns>
        ApiResponse<ClientToken> GetPaypalClientTokenWithHttpInfo ();
        /// <summary>
        ///      Retrieve a Skrill deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the transation id and the skrill signature, we return the state of the corresponding skrill deposit. This route should be called after the user is redirected back to Smarkets after processing his/her skrill deposit in the skrill website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="skrillSignature"></param>
        /// <returns>DepositStateResponse</returns>
        DepositStateResponse GetSkrillDepositState (string transactionId, string skrillSignature);

        /// <summary>
        ///      Retrieve a Skrill deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the transation id and the skrill signature, we return the state of the corresponding skrill deposit. This route should be called after the user is redirected back to Smarkets after processing his/her skrill deposit in the skrill website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="skrillSignature"></param>
        /// <returns>ApiResponse of DepositStateResponse</returns>
        ApiResponse<DepositStateResponse> GetSkrillDepositStateWithHttpInfo (string transactionId, string skrillSignature);
        /// <summary>
        ///      Create card token.
        /// </summary>
        /// <remarks>
        /// ## Description By sending Smarkets a card deposit token, we can use that token to contact our card payment provider and figure our whether the underlying payment was successful or not. If the payment succeeded, the response is a 201 status code, if not, a 4xx/5xx type error.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>CardToken</returns>
        CardToken PostCardToken (CardToken body = null);

        /// <summary>
        ///      Create card token.
        /// </summary>
        /// <remarks>
        /// ## Description By sending Smarkets a card deposit token, we can use that token to contact our card payment provider and figure our whether the underlying payment was successful or not. If the payment succeeded, the response is a 201 status code, if not, a 4xx/5xx type error.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of CardToken</returns>
        ApiResponse<CardToken> PostCardTokenWithHttpInfo (CardToken body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create deposit corresponding to card tokenization.
        /// </summary>
        /// <remarks>
        /// ## Description This call creates a deposit and a method placeholders and returns the parameters needed to tokenize a card using the eProtect Worlpay system. The deposit can then be processed by posting the &#x60;registration_id&#x60; (one time card token) to &#x60;/v3/worlspay_deposits/registration_id/&#x60;.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of WorldpayPretokenizationResponse</returns>
        System.Threading.Tasks.Task<WorldpayPretokenizationResponse> CreatePretokenizationDepositWorldpayAsync (WorldpayPretokenizationRequest body = null);

        /// <summary>
        /// Create deposit corresponding to card tokenization.
        /// </summary>
        /// <remarks>
        /// ## Description This call creates a deposit and a method placeholders and returns the parameters needed to tokenize a card using the eProtect Worlpay system. The deposit can then be processed by posting the &#x60;registration_id&#x60; (one time card token) to &#x60;/v3/worlspay_deposits/registration_id/&#x60;.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (WorldpayPretokenizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorldpayPretokenizationResponse>> CreatePretokenizationDepositWorldpayAsyncWithHttpInfo (WorldpayPretokenizationRequest body = null);
        /// <summary>
        ///      Create a card deposit.
        /// </summary>
        /// <remarks>
        /// ## Description This route can be used in 3 different ways:  - Deposit with a new card - the card details need to be provided along with the  remaining deposit details. After the deposit succeeds, the card will be added as  a recognized method of payment  - Deposit with an existing card - the method id must be provided along with the  deposit details. This needs to be a card that was previously used for a deposit.  - Deposit with Google/Apple Pay - last four, issuer, token, token type and  token expiry need to be provided.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of CardDepositResponse</returns>
        System.Threading.Tasks.Task<CardDepositResponse> DepositCardAsync (Body19 body = null);

        /// <summary>
        ///      Create a card deposit.
        /// </summary>
        /// <remarks>
        /// ## Description This route can be used in 3 different ways:  - Deposit with a new card - the card details need to be provided along with the  remaining deposit details. After the deposit succeeds, the card will be added as  a recognized method of payment  - Deposit with an existing card - the method id must be provided along with the  deposit details. This needs to be a card that was previously used for a deposit.  - Deposit with Google/Apple Pay - last four, issuer, token, token type and  token expiry need to be provided.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (CardDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardDepositResponse>> DepositCardAsyncWithHttpInfo (Body19 body = null);
        /// <summary>
        ///      Create a Neteller deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the amount, neteller secure id and the stored method id, we call neteller to process the transaction and return a success or failure response accordingly.  By calling this route with the amount, success/fail urls and the stored method id, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the neteller website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of NetellerDepositResponse</returns>
        System.Threading.Tasks.Task<NetellerDepositResponse> DepositNetellerAsync (Body33 body = null);

        /// <summary>
        ///      Create a Neteller deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the amount, neteller secure id and the stored method id, we call neteller to process the transaction and return a success or failure response accordingly.  By calling this route with the amount, success/fail urls and the stored method id, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the neteller website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (NetellerDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetellerDepositResponse>> DepositNetellerAsyncWithHttpInfo (Body33 body = null);
        /// <summary>
        ///      Create an Open Bank Tranfer deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a open bank tranfer deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on their bank&#x27;s website/app.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of OpenBankTransferDepositResponse</returns>
        System.Threading.Tasks.Task<OpenBankTransferDepositResponse> DepositOpenBankTransferAsync (Body41 body = null);

        /// <summary>
        ///      Create an Open Bank Tranfer deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a open bank tranfer deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on their bank&#x27;s website/app.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (OpenBankTransferDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OpenBankTransferDepositResponse>> DepositOpenBankTransferAsyncWithHttpInfo (Body41 body = null);
        /// <summary>
        ///      Create a Paypal deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the amount, paypal payment_method_nonce and paypal payer_id, we call paypal to process the transaction and return a success or failure response accordingly.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of PaypalDepositResponse</returns>
        System.Threading.Tasks.Task<PaypalDepositResponse> DepositPaypalAsync (Body48 body = null);

        /// <summary>
        ///      Create a Paypal deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the amount, paypal payment_method_nonce and paypal payer_id, we call paypal to process the transaction and return a success or failure response accordingly.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (PaypalDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaypalDepositResponse>> DepositPaypalAsyncWithHttpInfo (Body48 body = null);
        /// <summary>
        ///      Create a Skrill deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a skrill deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the skrill website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of SkrillDepositResponse</returns>
        System.Threading.Tasks.Task<SkrillDepositResponse> DepositSkrillAsync (Body52 body = null);

        /// <summary>
        ///      Create a Skrill deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a skrill deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the skrill website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (SkrillDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SkrillDepositResponse>> DepositSkrillAsyncWithHttpInfo (Body52 body = null);
        /// <summary>
        ///      Create a Trustly deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a trustly deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the trustly website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TrustlyDepositResponse</returns>
        System.Threading.Tasks.Task<TrustlyDepositResponse> DepositTrustlyAsync (Body56 body = null);

        /// <summary>
        ///      Create a Trustly deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the details needed to trigger a trustly deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the trustly website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TrustlyDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustlyDepositResponse>> DepositTrustlyAsyncWithHttpInfo (Body56 body = null);
        /// <summary>
        /// Process card deposit with one time use registration id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of WorldpayDepositResponse</returns>
        System.Threading.Tasks.Task<WorldpayDepositResponse> DepositWithRegistrationIdWorldpayAsync (WorldpayRegistrationIdDepositRequest body = null);

        /// <summary>
        /// Process card deposit with one time use registration id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (WorldpayDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorldpayDepositResponse>> DepositWithRegistrationIdWorldpayAsyncWithHttpInfo (WorldpayRegistrationIdDepositRequest body = null);
        /// <summary>
        /// Create deposit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of WorldpayDepositResponse</returns>
        System.Threading.Tasks.Task<WorldpayDepositResponse> DepositWorldpayAsync (WorldpayDepositRequest body = null);

        /// <summary>
        /// Create deposit.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (WorldpayDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorldpayDepositResponse>> DepositWorldpayAsyncWithHttpInfo (WorldpayDepositRequest body = null);
        /// <summary>
        /// Retrieve conditions for the first deposit to be bonus eligible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DepositBonusConditionsResponse</returns>
        System.Threading.Tasks.Task<DepositBonusConditionsResponse> GetFirstDepositBonusConditionsAsync ();

        /// <summary>
        /// Retrieve conditions for the first deposit to be bonus eligible.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DepositBonusConditionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositBonusConditionsResponse>> GetFirstDepositBonusConditionsAsyncWithHttpInfo ();
        /// <summary>
        ///      Retrieve a Open Bank Transfer deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the deposit&#x27;s provider reference, we return the state of the corresponding open bank transfer deposit. This route should be called after the user is redirected back to Smarkets after processing his/her open bank transfer deposit in the bank&#x27;s website or mobile app.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerReference"></param>
        /// <returns>Task of DepositStateResponse</returns>
        System.Threading.Tasks.Task<DepositStateResponse> GetOpenBankTransferDepositStateAsync (string providerReference);

        /// <summary>
        ///      Retrieve a Open Bank Transfer deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the deposit&#x27;s provider reference, we return the state of the corresponding open bank transfer deposit. This route should be called after the user is redirected back to Smarkets after processing his/her open bank transfer deposit in the bank&#x27;s website or mobile app.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerReference"></param>
        /// <returns>Task of ApiResponse (DepositStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositStateResponse>> GetOpenBankTransferDepositStateAsyncWithHttpInfo (string providerReference);
        /// <summary>
        /// Get client token to initialize Paypal client SDK.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ClientToken</returns>
        System.Threading.Tasks.Task<ClientToken> GetPaypalClientTokenAsync ();

        /// <summary>
        /// Get client token to initialize Paypal client SDK.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ClientToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientToken>> GetPaypalClientTokenAsyncWithHttpInfo ();
        /// <summary>
        ///      Retrieve a Skrill deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the transation id and the skrill signature, we return the state of the corresponding skrill deposit. This route should be called after the user is redirected back to Smarkets after processing his/her skrill deposit in the skrill website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="skrillSignature"></param>
        /// <returns>Task of DepositStateResponse</returns>
        System.Threading.Tasks.Task<DepositStateResponse> GetSkrillDepositStateAsync (string transactionId, string skrillSignature);

        /// <summary>
        ///      Retrieve a Skrill deposit.
        /// </summary>
        /// <remarks>
        /// ## Description By calling this route with the transation id and the skrill signature, we return the state of the corresponding skrill deposit. This route should be called after the user is redirected back to Smarkets after processing his/her skrill deposit in the skrill website.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="skrillSignature"></param>
        /// <returns>Task of ApiResponse (DepositStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositStateResponse>> GetSkrillDepositStateAsyncWithHttpInfo (string transactionId, string skrillSignature);
        /// <summary>
        ///      Create card token.
        /// </summary>
        /// <remarks>
        /// ## Description By sending Smarkets a card deposit token, we can use that token to contact our card payment provider and figure our whether the underlying payment was successful or not. If the payment succeeded, the response is a 201 status code, if not, a 4xx/5xx type error.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of CardToken</returns>
        System.Threading.Tasks.Task<CardToken> PostCardTokenAsync (CardToken body = null);

        /// <summary>
        ///      Create card token.
        /// </summary>
        /// <remarks>
        /// ## Description By sending Smarkets a card deposit token, we can use that token to contact our card payment provider and figure our whether the underlying payment was successful or not. If the payment succeeded, the response is a 201 status code, if not, a 4xx/5xx type error.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (CardToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardToken>> PostCardTokenAsyncWithHttpInfo (CardToken body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DepositsApi : IDepositsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DepositsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DepositsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DepositsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create deposit corresponding to card tokenization. ## Description This call creates a deposit and a method placeholders and returns the parameters needed to tokenize a card using the eProtect Worlpay system. The deposit can then be processed by posting the &#x60;registration_id&#x60; (one time card token) to &#x60;/v3/worlspay_deposits/registration_id/&#x60;.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>WorldpayPretokenizationResponse</returns>
        public WorldpayPretokenizationResponse CreatePretokenizationDepositWorldpay (WorldpayPretokenizationRequest body = null)
        {
             ApiResponse<WorldpayPretokenizationResponse> localVarResponse = CreatePretokenizationDepositWorldpayWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create deposit corresponding to card tokenization. ## Description This call creates a deposit and a method placeholders and returns the parameters needed to tokenize a card using the eProtect Worlpay system. The deposit can then be processed by posting the &#x60;registration_id&#x60; (one time card token) to &#x60;/v3/worlspay_deposits/registration_id/&#x60;.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of WorldpayPretokenizationResponse</returns>
        public ApiResponse< WorldpayPretokenizationResponse > CreatePretokenizationDepositWorldpayWithHttpInfo (WorldpayPretokenizationRequest body = null)
        {

            var localVarPath = "/v3/worldpay_deposits/pretokenization/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePretokenizationDepositWorldpay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldpayPretokenizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorldpayPretokenizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldpayPretokenizationResponse)));
        }

        /// <summary>
        /// Create deposit corresponding to card tokenization. ## Description This call creates a deposit and a method placeholders and returns the parameters needed to tokenize a card using the eProtect Worlpay system. The deposit can then be processed by posting the &#x60;registration_id&#x60; (one time card token) to &#x60;/v3/worlspay_deposits/registration_id/&#x60;.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of WorldpayPretokenizationResponse</returns>
        public async System.Threading.Tasks.Task<WorldpayPretokenizationResponse> CreatePretokenizationDepositWorldpayAsync (WorldpayPretokenizationRequest body = null)
        {
             ApiResponse<WorldpayPretokenizationResponse> localVarResponse = await CreatePretokenizationDepositWorldpayAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create deposit corresponding to card tokenization. ## Description This call creates a deposit and a method placeholders and returns the parameters needed to tokenize a card using the eProtect Worlpay system. The deposit can then be processed by posting the &#x60;registration_id&#x60; (one time card token) to &#x60;/v3/worlspay_deposits/registration_id/&#x60;.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (WorldpayPretokenizationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorldpayPretokenizationResponse>> CreatePretokenizationDepositWorldpayAsyncWithHttpInfo (WorldpayPretokenizationRequest body = null)
        {

            var localVarPath = "/v3/worldpay_deposits/pretokenization/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePretokenizationDepositWorldpay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldpayPretokenizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorldpayPretokenizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldpayPretokenizationResponse)));
        }

        /// <summary>
        ///      Create a card deposit. ## Description This route can be used in 3 different ways:  - Deposit with a new card - the card details need to be provided along with the  remaining deposit details. After the deposit succeeds, the card will be added as  a recognized method of payment  - Deposit with an existing card - the method id must be provided along with the  deposit details. This needs to be a card that was previously used for a deposit.  - Deposit with Google/Apple Pay - last four, issuer, token, token type and  token expiry need to be provided.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>CardDepositResponse</returns>
        public CardDepositResponse DepositCard (Body19 body = null)
        {
             ApiResponse<CardDepositResponse> localVarResponse = DepositCardWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Create a card deposit. ## Description This route can be used in 3 different ways:  - Deposit with a new card - the card details need to be provided along with the  remaining deposit details. After the deposit succeeds, the card will be added as  a recognized method of payment  - Deposit with an existing card - the method id must be provided along with the  deposit details. This needs to be a card that was previously used for a deposit.  - Deposit with Google/Apple Pay - last four, issuer, token, token type and  token expiry need to be provided.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of CardDepositResponse</returns>
        public ApiResponse< CardDepositResponse > DepositCardWithHttpInfo (Body19 body = null)
        {

            var localVarPath = "/v3/card_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CardDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardDepositResponse)));
        }

        /// <summary>
        ///      Create a card deposit. ## Description This route can be used in 3 different ways:  - Deposit with a new card - the card details need to be provided along with the  remaining deposit details. After the deposit succeeds, the card will be added as  a recognized method of payment  - Deposit with an existing card - the method id must be provided along with the  deposit details. This needs to be a card that was previously used for a deposit.  - Deposit with Google/Apple Pay - last four, issuer, token, token type and  token expiry need to be provided.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of CardDepositResponse</returns>
        public async System.Threading.Tasks.Task<CardDepositResponse> DepositCardAsync (Body19 body = null)
        {
             ApiResponse<CardDepositResponse> localVarResponse = await DepositCardAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Create a card deposit. ## Description This route can be used in 3 different ways:  - Deposit with a new card - the card details need to be provided along with the  remaining deposit details. After the deposit succeeds, the card will be added as  a recognized method of payment  - Deposit with an existing card - the method id must be provided along with the  deposit details. This needs to be a card that was previously used for a deposit.  - Deposit with Google/Apple Pay - last four, issuer, token, token type and  token expiry need to be provided.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (CardDepositResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardDepositResponse>> DepositCardAsyncWithHttpInfo (Body19 body = null)
        {

            var localVarPath = "/v3/card_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CardDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardDepositResponse)));
        }

        /// <summary>
        ///      Create a Neteller deposit. ## Description By calling this route with the amount, neteller secure id and the stored method id, we call neteller to process the transaction and return a success or failure response accordingly.  By calling this route with the amount, success/fail urls and the stored method id, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the neteller website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>NetellerDepositResponse</returns>
        public NetellerDepositResponse DepositNeteller (Body33 body = null)
        {
             ApiResponse<NetellerDepositResponse> localVarResponse = DepositNetellerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Create a Neteller deposit. ## Description By calling this route with the amount, neteller secure id and the stored method id, we call neteller to process the transaction and return a success or failure response accordingly.  By calling this route with the amount, success/fail urls and the stored method id, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the neteller website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of NetellerDepositResponse</returns>
        public ApiResponse< NetellerDepositResponse > DepositNetellerWithHttpInfo (Body33 body = null)
        {

            var localVarPath = "/v3/neteller_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositNeteller", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetellerDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetellerDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetellerDepositResponse)));
        }

        /// <summary>
        ///      Create a Neteller deposit. ## Description By calling this route with the amount, neteller secure id and the stored method id, we call neteller to process the transaction and return a success or failure response accordingly.  By calling this route with the amount, success/fail urls and the stored method id, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the neteller website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of NetellerDepositResponse</returns>
        public async System.Threading.Tasks.Task<NetellerDepositResponse> DepositNetellerAsync (Body33 body = null)
        {
             ApiResponse<NetellerDepositResponse> localVarResponse = await DepositNetellerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Create a Neteller deposit. ## Description By calling this route with the amount, neteller secure id and the stored method id, we call neteller to process the transaction and return a success or failure response accordingly.  By calling this route with the amount, success/fail urls and the stored method id, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the neteller website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (NetellerDepositResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetellerDepositResponse>> DepositNetellerAsyncWithHttpInfo (Body33 body = null)
        {

            var localVarPath = "/v3/neteller_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositNeteller", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetellerDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetellerDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetellerDepositResponse)));
        }

        /// <summary>
        ///      Create an Open Bank Tranfer deposit. ## Description By calling this route with the details needed to trigger a open bank tranfer deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on their bank&#x27;s website/app.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>OpenBankTransferDepositResponse</returns>
        public OpenBankTransferDepositResponse DepositOpenBankTransfer (Body41 body = null)
        {
             ApiResponse<OpenBankTransferDepositResponse> localVarResponse = DepositOpenBankTransferWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Create an Open Bank Tranfer deposit. ## Description By calling this route with the details needed to trigger a open bank tranfer deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on their bank&#x27;s website/app.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of OpenBankTransferDepositResponse</returns>
        public ApiResponse< OpenBankTransferDepositResponse > DepositOpenBankTransferWithHttpInfo (Body41 body = null)
        {

            var localVarPath = "/v3/open_bank_transfer_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositOpenBankTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OpenBankTransferDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OpenBankTransferDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OpenBankTransferDepositResponse)));
        }

        /// <summary>
        ///      Create an Open Bank Tranfer deposit. ## Description By calling this route with the details needed to trigger a open bank tranfer deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on their bank&#x27;s website/app.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of OpenBankTransferDepositResponse</returns>
        public async System.Threading.Tasks.Task<OpenBankTransferDepositResponse> DepositOpenBankTransferAsync (Body41 body = null)
        {
             ApiResponse<OpenBankTransferDepositResponse> localVarResponse = await DepositOpenBankTransferAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Create an Open Bank Tranfer deposit. ## Description By calling this route with the details needed to trigger a open bank tranfer deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on their bank&#x27;s website/app.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (OpenBankTransferDepositResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OpenBankTransferDepositResponse>> DepositOpenBankTransferAsyncWithHttpInfo (Body41 body = null)
        {

            var localVarPath = "/v3/open_bank_transfer_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositOpenBankTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OpenBankTransferDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OpenBankTransferDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OpenBankTransferDepositResponse)));
        }

        /// <summary>
        ///      Create a Paypal deposit. ## Description By calling this route with the amount, paypal payment_method_nonce and paypal payer_id, we call paypal to process the transaction and return a success or failure response accordingly.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>PaypalDepositResponse</returns>
        public PaypalDepositResponse DepositPaypal (Body48 body = null)
        {
             ApiResponse<PaypalDepositResponse> localVarResponse = DepositPaypalWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Create a Paypal deposit. ## Description By calling this route with the amount, paypal payment_method_nonce and paypal payer_id, we call paypal to process the transaction and return a success or failure response accordingly.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of PaypalDepositResponse</returns>
        public ApiResponse< PaypalDepositResponse > DepositPaypalWithHttpInfo (Body48 body = null)
        {

            var localVarPath = "/v3/paypal_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositPaypal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaypalDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaypalDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaypalDepositResponse)));
        }

        /// <summary>
        ///      Create a Paypal deposit. ## Description By calling this route with the amount, paypal payment_method_nonce and paypal payer_id, we call paypal to process the transaction and return a success or failure response accordingly.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of PaypalDepositResponse</returns>
        public async System.Threading.Tasks.Task<PaypalDepositResponse> DepositPaypalAsync (Body48 body = null)
        {
             ApiResponse<PaypalDepositResponse> localVarResponse = await DepositPaypalAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Create a Paypal deposit. ## Description By calling this route with the amount, paypal payment_method_nonce and paypal payer_id, we call paypal to process the transaction and return a success or failure response accordingly.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (PaypalDepositResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaypalDepositResponse>> DepositPaypalAsyncWithHttpInfo (Body48 body = null)
        {

            var localVarPath = "/v3/paypal_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositPaypal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaypalDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaypalDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaypalDepositResponse)));
        }

        /// <summary>
        ///      Create a Skrill deposit. ## Description By calling this route with the details needed to trigger a skrill deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the skrill website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>SkrillDepositResponse</returns>
        public SkrillDepositResponse DepositSkrill (Body52 body = null)
        {
             ApiResponse<SkrillDepositResponse> localVarResponse = DepositSkrillWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Create a Skrill deposit. ## Description By calling this route with the details needed to trigger a skrill deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the skrill website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of SkrillDepositResponse</returns>
        public ApiResponse< SkrillDepositResponse > DepositSkrillWithHttpInfo (Body52 body = null)
        {

            var localVarPath = "/v3/skrill_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositSkrill", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SkrillDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SkrillDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SkrillDepositResponse)));
        }

        /// <summary>
        ///      Create a Skrill deposit. ## Description By calling this route with the details needed to trigger a skrill deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the skrill website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of SkrillDepositResponse</returns>
        public async System.Threading.Tasks.Task<SkrillDepositResponse> DepositSkrillAsync (Body52 body = null)
        {
             ApiResponse<SkrillDepositResponse> localVarResponse = await DepositSkrillAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Create a Skrill deposit. ## Description By calling this route with the details needed to trigger a skrill deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the skrill website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (SkrillDepositResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SkrillDepositResponse>> DepositSkrillAsyncWithHttpInfo (Body52 body = null)
        {

            var localVarPath = "/v3/skrill_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositSkrill", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SkrillDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SkrillDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SkrillDepositResponse)));
        }

        /// <summary>
        ///      Create a Trustly deposit. ## Description By calling this route with the details needed to trigger a trustly deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the trustly website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TrustlyDepositResponse</returns>
        public TrustlyDepositResponse DepositTrustly (Body56 body = null)
        {
             ApiResponse<TrustlyDepositResponse> localVarResponse = DepositTrustlyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Create a Trustly deposit. ## Description By calling this route with the details needed to trigger a trustly deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the trustly website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TrustlyDepositResponse</returns>
        public ApiResponse< TrustlyDepositResponse > DepositTrustlyWithHttpInfo (Body56 body = null)
        {

            var localVarPath = "/v3/trustly_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositTrustly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustlyDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrustlyDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustlyDepositResponse)));
        }

        /// <summary>
        ///      Create a Trustly deposit. ## Description By calling this route with the details needed to trigger a trustly deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the trustly website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TrustlyDepositResponse</returns>
        public async System.Threading.Tasks.Task<TrustlyDepositResponse> DepositTrustlyAsync (Body56 body = null)
        {
             ApiResponse<TrustlyDepositResponse> localVarResponse = await DepositTrustlyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Create a Trustly deposit. ## Description By calling this route with the details needed to trigger a trustly deposit, it will return a response that contains a URL. Clients can follow this URL, in order to finish the deposit process on the trustly website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TrustlyDepositResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustlyDepositResponse>> DepositTrustlyAsyncWithHttpInfo (Body56 body = null)
        {

            var localVarPath = "/v3/trustly_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositTrustly", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustlyDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrustlyDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustlyDepositResponse)));
        }

        /// <summary>
        /// Process card deposit with one time use registration id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>WorldpayDepositResponse</returns>
        public WorldpayDepositResponse DepositWithRegistrationIdWorldpay (WorldpayRegistrationIdDepositRequest body = null)
        {
             ApiResponse<WorldpayDepositResponse> localVarResponse = DepositWithRegistrationIdWorldpayWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Process card deposit with one time use registration id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of WorldpayDepositResponse</returns>
        public ApiResponse< WorldpayDepositResponse > DepositWithRegistrationIdWorldpayWithHttpInfo (WorldpayRegistrationIdDepositRequest body = null)
        {

            var localVarPath = "/v3/worldpay_deposits/registration_id/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositWithRegistrationIdWorldpay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldpayDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorldpayDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldpayDepositResponse)));
        }

        /// <summary>
        /// Process card deposit with one time use registration id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of WorldpayDepositResponse</returns>
        public async System.Threading.Tasks.Task<WorldpayDepositResponse> DepositWithRegistrationIdWorldpayAsync (WorldpayRegistrationIdDepositRequest body = null)
        {
             ApiResponse<WorldpayDepositResponse> localVarResponse = await DepositWithRegistrationIdWorldpayAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Process card deposit with one time use registration id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (WorldpayDepositResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorldpayDepositResponse>> DepositWithRegistrationIdWorldpayAsyncWithHttpInfo (WorldpayRegistrationIdDepositRequest body = null)
        {

            var localVarPath = "/v3/worldpay_deposits/registration_id/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositWithRegistrationIdWorldpay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldpayDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorldpayDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldpayDepositResponse)));
        }

        /// <summary>
        /// Create deposit. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>WorldpayDepositResponse</returns>
        public WorldpayDepositResponse DepositWorldpay (WorldpayDepositRequest body = null)
        {
             ApiResponse<WorldpayDepositResponse> localVarResponse = DepositWorldpayWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create deposit. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of WorldpayDepositResponse</returns>
        public ApiResponse< WorldpayDepositResponse > DepositWorldpayWithHttpInfo (WorldpayDepositRequest body = null)
        {

            var localVarPath = "/v3/worldpay_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositWorldpay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldpayDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorldpayDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldpayDepositResponse)));
        }

        /// <summary>
        /// Create deposit. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of WorldpayDepositResponse</returns>
        public async System.Threading.Tasks.Task<WorldpayDepositResponse> DepositWorldpayAsync (WorldpayDepositRequest body = null)
        {
             ApiResponse<WorldpayDepositResponse> localVarResponse = await DepositWorldpayAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create deposit. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (WorldpayDepositResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorldpayDepositResponse>> DepositWorldpayAsyncWithHttpInfo (WorldpayDepositRequest body = null)
        {

            var localVarPath = "/v3/worldpay_deposits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DepositWorldpay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldpayDepositResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorldpayDepositResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldpayDepositResponse)));
        }

        /// <summary>
        /// Retrieve conditions for the first deposit to be bonus eligible. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DepositBonusConditionsResponse</returns>
        public DepositBonusConditionsResponse GetFirstDepositBonusConditions ()
        {
             ApiResponse<DepositBonusConditionsResponse> localVarResponse = GetFirstDepositBonusConditionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve conditions for the first deposit to be bonus eligible. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DepositBonusConditionsResponse</returns>
        public ApiResponse< DepositBonusConditionsResponse > GetFirstDepositBonusConditionsWithHttpInfo ()
        {

            var localVarPath = "/v3/deposits/bonus_conditions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFirstDepositBonusConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositBonusConditionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositBonusConditionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositBonusConditionsResponse)));
        }

        /// <summary>
        /// Retrieve conditions for the first deposit to be bonus eligible. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DepositBonusConditionsResponse</returns>
        public async System.Threading.Tasks.Task<DepositBonusConditionsResponse> GetFirstDepositBonusConditionsAsync ()
        {
             ApiResponse<DepositBonusConditionsResponse> localVarResponse = await GetFirstDepositBonusConditionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve conditions for the first deposit to be bonus eligible. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DepositBonusConditionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepositBonusConditionsResponse>> GetFirstDepositBonusConditionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/deposits/bonus_conditions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFirstDepositBonusConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositBonusConditionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositBonusConditionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositBonusConditionsResponse)));
        }

        /// <summary>
        ///      Retrieve a Open Bank Transfer deposit. ## Description By calling this route with the deposit&#x27;s provider reference, we return the state of the corresponding open bank transfer deposit. This route should be called after the user is redirected back to Smarkets after processing his/her open bank transfer deposit in the bank&#x27;s website or mobile app.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerReference"></param>
        /// <returns>DepositStateResponse</returns>
        public DepositStateResponse GetOpenBankTransferDepositState (string providerReference)
        {
             ApiResponse<DepositStateResponse> localVarResponse = GetOpenBankTransferDepositStateWithHttpInfo(providerReference);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Retrieve a Open Bank Transfer deposit. ## Description By calling this route with the deposit&#x27;s provider reference, we return the state of the corresponding open bank transfer deposit. This route should be called after the user is redirected back to Smarkets after processing his/her open bank transfer deposit in the bank&#x27;s website or mobile app.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerReference"></param>
        /// <returns>ApiResponse of DepositStateResponse</returns>
        public ApiResponse< DepositStateResponse > GetOpenBankTransferDepositStateWithHttpInfo (string providerReference)
        {
            // verify the required parameter 'providerReference' is set
            if (providerReference == null)
                throw new ApiException(400, "Missing required parameter 'providerReference' when calling DepositsApi->GetOpenBankTransferDepositState");

            var localVarPath = "/v3/open_bank_transfer_deposits/{provider_reference}/states/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerReference != null) localVarPathParams.Add("provider_reference", this.Configuration.ApiClient.ParameterToString(providerReference)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenBankTransferDepositState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositStateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositStateResponse)));
        }

        /// <summary>
        ///      Retrieve a Open Bank Transfer deposit. ## Description By calling this route with the deposit&#x27;s provider reference, we return the state of the corresponding open bank transfer deposit. This route should be called after the user is redirected back to Smarkets after processing his/her open bank transfer deposit in the bank&#x27;s website or mobile app.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerReference"></param>
        /// <returns>Task of DepositStateResponse</returns>
        public async System.Threading.Tasks.Task<DepositStateResponse> GetOpenBankTransferDepositStateAsync (string providerReference)
        {
             ApiResponse<DepositStateResponse> localVarResponse = await GetOpenBankTransferDepositStateAsyncWithHttpInfo(providerReference);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Retrieve a Open Bank Transfer deposit. ## Description By calling this route with the deposit&#x27;s provider reference, we return the state of the corresponding open bank transfer deposit. This route should be called after the user is redirected back to Smarkets after processing his/her open bank transfer deposit in the bank&#x27;s website or mobile app.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="providerReference"></param>
        /// <returns>Task of ApiResponse (DepositStateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepositStateResponse>> GetOpenBankTransferDepositStateAsyncWithHttpInfo (string providerReference)
        {
            // verify the required parameter 'providerReference' is set
            if (providerReference == null)
                throw new ApiException(400, "Missing required parameter 'providerReference' when calling DepositsApi->GetOpenBankTransferDepositState");

            var localVarPath = "/v3/open_bank_transfer_deposits/{provider_reference}/states/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerReference != null) localVarPathParams.Add("provider_reference", this.Configuration.ApiClient.ParameterToString(providerReference)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenBankTransferDepositState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositStateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositStateResponse)));
        }

        /// <summary>
        /// Get client token to initialize Paypal client SDK. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClientToken</returns>
        public ClientToken GetPaypalClientToken ()
        {
             ApiResponse<ClientToken> localVarResponse = GetPaypalClientTokenWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get client token to initialize Paypal client SDK. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClientToken</returns>
        public ApiResponse< ClientToken > GetPaypalClientTokenWithHttpInfo ()
        {

            var localVarPath = "/v3/paypal_deposits/client_tokens/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaypalClientToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientToken)));
        }

        /// <summary>
        /// Get client token to initialize Paypal client SDK. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ClientToken</returns>
        public async System.Threading.Tasks.Task<ClientToken> GetPaypalClientTokenAsync ()
        {
             ApiResponse<ClientToken> localVarResponse = await GetPaypalClientTokenAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get client token to initialize Paypal client SDK. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ClientToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientToken>> GetPaypalClientTokenAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/paypal_deposits/client_tokens/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaypalClientToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientToken)));
        }

        /// <summary>
        ///      Retrieve a Skrill deposit. ## Description By calling this route with the transation id and the skrill signature, we return the state of the corresponding skrill deposit. This route should be called after the user is redirected back to Smarkets after processing his/her skrill deposit in the skrill website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="skrillSignature"></param>
        /// <returns>DepositStateResponse</returns>
        public DepositStateResponse GetSkrillDepositState (string transactionId, string skrillSignature)
        {
             ApiResponse<DepositStateResponse> localVarResponse = GetSkrillDepositStateWithHttpInfo(transactionId, skrillSignature);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Retrieve a Skrill deposit. ## Description By calling this route with the transation id and the skrill signature, we return the state of the corresponding skrill deposit. This route should be called after the user is redirected back to Smarkets after processing his/her skrill deposit in the skrill website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="skrillSignature"></param>
        /// <returns>ApiResponse of DepositStateResponse</returns>
        public ApiResponse< DepositStateResponse > GetSkrillDepositStateWithHttpInfo (string transactionId, string skrillSignature)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DepositsApi->GetSkrillDepositState");
            // verify the required parameter 'skrillSignature' is set
            if (skrillSignature == null)
                throw new ApiException(400, "Missing required parameter 'skrillSignature' when calling DepositsApi->GetSkrillDepositState");

            var localVarPath = "/v3/skrill_deposits/{transaction_id}/{skrill_signature}/states/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transaction_id", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (skrillSignature != null) localVarPathParams.Add("skrill_signature", this.Configuration.ApiClient.ParameterToString(skrillSignature)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSkrillDepositState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositStateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositStateResponse)));
        }

        /// <summary>
        ///      Retrieve a Skrill deposit. ## Description By calling this route with the transation id and the skrill signature, we return the state of the corresponding skrill deposit. This route should be called after the user is redirected back to Smarkets after processing his/her skrill deposit in the skrill website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="skrillSignature"></param>
        /// <returns>Task of DepositStateResponse</returns>
        public async System.Threading.Tasks.Task<DepositStateResponse> GetSkrillDepositStateAsync (string transactionId, string skrillSignature)
        {
             ApiResponse<DepositStateResponse> localVarResponse = await GetSkrillDepositStateAsyncWithHttpInfo(transactionId, skrillSignature);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Retrieve a Skrill deposit. ## Description By calling this route with the transation id and the skrill signature, we return the state of the corresponding skrill deposit. This route should be called after the user is redirected back to Smarkets after processing his/her skrill deposit in the skrill website.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="skrillSignature"></param>
        /// <returns>Task of ApiResponse (DepositStateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepositStateResponse>> GetSkrillDepositStateAsyncWithHttpInfo (string transactionId, string skrillSignature)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DepositsApi->GetSkrillDepositState");
            // verify the required parameter 'skrillSignature' is set
            if (skrillSignature == null)
                throw new ApiException(400, "Missing required parameter 'skrillSignature' when calling DepositsApi->GetSkrillDepositState");

            var localVarPath = "/v3/skrill_deposits/{transaction_id}/{skrill_signature}/states/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transaction_id", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (skrillSignature != null) localVarPathParams.Add("skrill_signature", this.Configuration.ApiClient.ParameterToString(skrillSignature)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSkrillDepositState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositStateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositStateResponse)));
        }

        /// <summary>
        ///      Create card token. ## Description By sending Smarkets a card deposit token, we can use that token to contact our card payment provider and figure our whether the underlying payment was successful or not. If the payment succeeded, the response is a 201 status code, if not, a 4xx/5xx type error.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>CardToken</returns>
        public CardToken PostCardToken (CardToken body = null)
        {
             ApiResponse<CardToken> localVarResponse = PostCardTokenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Create card token. ## Description By sending Smarkets a card deposit token, we can use that token to contact our card payment provider and figure our whether the underlying payment was successful or not. If the payment succeeded, the response is a 201 status code, if not, a 4xx/5xx type error.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of CardToken</returns>
        public ApiResponse< CardToken > PostCardTokenWithHttpInfo (CardToken body = null)
        {

            var localVarPath = "/v3/card_deposits/token/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCardToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CardToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardToken)));
        }

        /// <summary>
        ///      Create card token. ## Description By sending Smarkets a card deposit token, we can use that token to contact our card payment provider and figure our whether the underlying payment was successful or not. If the payment succeeded, the response is a 201 status code, if not, a 4xx/5xx type error.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of CardToken</returns>
        public async System.Threading.Tasks.Task<CardToken> PostCardTokenAsync (CardToken body = null)
        {
             ApiResponse<CardToken> localVarResponse = await PostCardTokenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Create card token. ## Description By sending Smarkets a card deposit token, we can use that token to contact our card payment provider and figure our whether the underlying payment was successful or not. If the payment succeeded, the response is a 201 status code, if not, a 4xx/5xx type error.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (CardToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardToken>> PostCardTokenAsyncWithHttpInfo (CardToken body = null)
        {

            var localVarPath = "/v3/card_deposits/token/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCardToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CardToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardToken)));
        }

    }
}
