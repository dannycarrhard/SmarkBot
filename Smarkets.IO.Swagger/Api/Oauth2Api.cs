/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IOauth2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per 600 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20048</returns>
        InlineResponse20048 ChangeSecret (int? clientId, Body38 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per 600 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        ApiResponse<InlineResponse20048> ChangeSecretWithHttpInfo (int? clientId, Body38 body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri">Client redirect address (optional)</param>
        /// <param name="scopes"> (optional)</param>
        /// <param name="state">An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery (optional)</param>
        /// <returns>InlineResponse20047</returns>
        InlineResponse20047 GetClient (int? clientId, string redirectUri = null, List<string> scopes = null, string state = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri">Client redirect address (optional)</param>
        /// <param name="scopes"> (optional)</param>
        /// <param name="state">An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery (optional)</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        ApiResponse<InlineResponse20047> GetClientWithHttpInfo (int? clientId, string redirectUri = null, List<string> scopes = null, string state = null);
        /// <summary>
        /// Issue a new token for oauth2 requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20050</returns>
        InlineResponse20050 IssueToken (Body40 body = null);

        /// <summary>
        /// Issue a new token for oauth2 requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        ApiResponse<InlineResponse20050> IssueTokenWithHttpInfo (Body40 body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20049</returns>
        InlineResponse20049 ProcessAffiliateConsent (Body39 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        ApiResponse<InlineResponse20049> ProcessAffiliateConsentWithHttpInfo (Body39 body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per 600 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20048</returns>
        System.Threading.Tasks.Task<InlineResponse20048> ChangeSecretAsync (int? clientId, Body38 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per 600 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> ChangeSecretAsyncWithHttpInfo (int? clientId, Body38 body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri">Client redirect address (optional)</param>
        /// <param name="scopes"> (optional)</param>
        /// <param name="state">An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery (optional)</param>
        /// <returns>Task of InlineResponse20047</returns>
        System.Threading.Tasks.Task<InlineResponse20047> GetClientAsync (int? clientId, string redirectUri = null, List<string> scopes = null, string state = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri">Client redirect address (optional)</param>
        /// <param name="scopes"> (optional)</param>
        /// <param name="state">An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> GetClientAsyncWithHttpInfo (int? clientId, string redirectUri = null, List<string> scopes = null, string state = null);
        /// <summary>
        /// Issue a new token for oauth2 requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20050</returns>
        System.Threading.Tasks.Task<InlineResponse20050> IssueTokenAsync (Body40 body = null);

        /// <summary>
        /// Issue a new token for oauth2 requests.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> IssueTokenAsyncWithHttpInfo (Body40 body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20049</returns>
        System.Threading.Tasks.Task<InlineResponse20049> ProcessAffiliateConsentAsync (Body39 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> ProcessAffiliateConsentAsyncWithHttpInfo (Body39 body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class Oauth2Api : IOauth2Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Oauth2Api(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2Api"/> class
        /// </summary>
        /// <returns></returns>
        public Oauth2Api()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Oauth2Api(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///   ##  Rate limits Maximum 10 requests per 600 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20048</returns>
        public InlineResponse20048 ChangeSecret (int? clientId, Body38 body = null)
        {
             ApiResponse<InlineResponse20048> localVarResponse = ChangeSecretWithHttpInfo(clientId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///   ##  Rate limits Maximum 10 requests per 600 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        public ApiResponse< InlineResponse20048 > ChangeSecretWithHttpInfo (int? clientId, Body38 body = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->ChangeSecret");

            var localVarPath = "/v3/oauth2/clients/{client_id}/secret/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///   ##  Rate limits Maximum 10 requests per 600 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20048</returns>
        public async System.Threading.Tasks.Task<InlineResponse20048> ChangeSecretAsync (int? clientId, Body38 body = null)
        {
             ApiResponse<InlineResponse20048> localVarResponse = await ChangeSecretAsyncWithHttpInfo(clientId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///   ##  Rate limits Maximum 10 requests per 600 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> ChangeSecretAsyncWithHttpInfo (int? clientId, Body38 body = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->ChangeSecret");

            var localVarPath = "/v3/oauth2/clients/{client_id}/secret/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20048>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20048) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20048)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri">Client redirect address (optional)</param>
        /// <param name="scopes"> (optional)</param>
        /// <param name="state">An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery (optional)</param>
        /// <returns>InlineResponse20047</returns>
        public InlineResponse20047 GetClient (int? clientId, string redirectUri = null, List<string> scopes = null, string state = null)
        {
             ApiResponse<InlineResponse20047> localVarResponse = GetClientWithHttpInfo(clientId, redirectUri, scopes, state);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri">Client redirect address (optional)</param>
        /// <param name="scopes"> (optional)</param>
        /// <param name="state">An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery (optional)</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        public ApiResponse< InlineResponse20047 > GetClientWithHttpInfo (int? clientId, string redirectUri = null, List<string> scopes = null, string state = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->GetClient");

            var localVarPath = "/v3/oauth2/clients/{client_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (redirectUri != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "redirect_uri", redirectUri)); // query parameter
            if (scopes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "scopes", scopes)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20047) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri">Client redirect address (optional)</param>
        /// <param name="scopes"> (optional)</param>
        /// <param name="state">An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery (optional)</param>
        /// <returns>Task of InlineResponse20047</returns>
        public async System.Threading.Tasks.Task<InlineResponse20047> GetClientAsync (int? clientId, string redirectUri = null, List<string> scopes = null, string state = null)
        {
             ApiResponse<InlineResponse20047> localVarResponse = await GetClientAsyncWithHttpInfo(clientId, redirectUri, scopes, state);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="redirectUri">Client redirect address (optional)</param>
        /// <param name="scopes"> (optional)</param>
        /// <param name="state">An opaque value used by the client to maintain          state between the request and callback.  The authorization          server includes this value when redirecting the user-agent back          to the client.  The parameter SHOULD be used for preventing          cross-site request forgery (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> GetClientAsyncWithHttpInfo (int? clientId, string redirectUri = null, List<string> scopes = null, string state = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->GetClient");

            var localVarPath = "/v3/oauth2/clients/{client_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (redirectUri != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "redirect_uri", redirectUri)); // query parameter
            if (scopes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "scopes", scopes)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20047>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20047) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20047)));
        }

        /// <summary>
        /// Issue a new token for oauth2 requests. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20050</returns>
        public InlineResponse20050 IssueToken (Body40 body = null)
        {
             ApiResponse<InlineResponse20050> localVarResponse = IssueTokenWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Issue a new token for oauth2 requests. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        public ApiResponse< InlineResponse20050 > IssueTokenWithHttpInfo (Body40 body = null)
        {

            var localVarPath = "/v3/oauth2/token/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20050) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        /// Issue a new token for oauth2 requests. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20050</returns>
        public async System.Threading.Tasks.Task<InlineResponse20050> IssueTokenAsync (Body40 body = null)
        {
             ApiResponse<InlineResponse20050> localVarResponse = await IssueTokenAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Issue a new token for oauth2 requests. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> IssueTokenAsyncWithHttpInfo (Body40 body = null)
        {

            var localVarPath = "/v3/oauth2/token/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IssueToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20050>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20050) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20050)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20049</returns>
        public InlineResponse20049 ProcessAffiliateConsent (Body39 body = null)
        {
             ApiResponse<InlineResponse20049> localVarResponse = ProcessAffiliateConsentWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        public ApiResponse< InlineResponse20049 > ProcessAffiliateConsentWithHttpInfo (Body39 body = null)
        {

            var localVarPath = "/v3/oauth2/consent/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessAffiliateConsent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20049>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20049) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20049)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20049</returns>
        public async System.Threading.Tasks.Task<InlineResponse20049> ProcessAffiliateConsentAsync (Body39 body = null)
        {
             ApiResponse<InlineResponse20049> localVarResponse = await ProcessAffiliateConsentAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> ProcessAffiliateConsentAsyncWithHttpInfo (Body39 body = null)
        {

            var localVarPath = "/v3/oauth2/consent/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessAffiliateConsent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20049>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20049) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20049)));
        }

    }
}
