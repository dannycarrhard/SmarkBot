/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILayoutsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get applied image groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIds"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 GetAppliedImageGroups (List<int?> resourceIds = null, List<string> resourceTypes = null, List<string> clientTypes = null);

        /// <summary>
        /// Get applied image groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIds"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> GetAppliedImageGroupsWithHttpInfo (List<int?> resourceIds = null, List<string> resourceTypes = null, List<string> clientTypes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageIds"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 GetAttributions (List<int?> imageIds = null, List<string> clientTypes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageIds"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> GetAttributionsWithHttpInfo (List<int?> imageIds = null, List<string> clientTypes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId"></param>
        /// <param name="jurisdiction"> (optional, default to null)</param>
        /// <returns>GetLayoutResponse</returns>
        GetLayoutResponse GetLayout (int? layoutId, string jurisdiction = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId"></param>
        /// <param name="jurisdiction"> (optional, default to null)</param>
        /// <returns>ApiResponse of GetLayoutResponse</returns>
        ApiResponse<GetLayoutResponse> GetLayoutWithHttpInfo (int? layoutId, string jurisdiction = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get applied image groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIds"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> GetAppliedImageGroupsAsync (List<int?> resourceIds = null, List<string> resourceTypes = null, List<string> clientTypes = null);

        /// <summary>
        /// Get applied image groups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIds"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetAppliedImageGroupsAsyncWithHttpInfo (List<int?> resourceIds = null, List<string> resourceTypes = null, List<string> clientTypes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageIds"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> GetAttributionsAsync (List<int?> imageIds = null, List<string> clientTypes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageIds"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetAttributionsAsyncWithHttpInfo (List<int?> imageIds = null, List<string> clientTypes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId"></param>
        /// <param name="jurisdiction"> (optional, default to null)</param>
        /// <returns>Task of GetLayoutResponse</returns>
        System.Threading.Tasks.Task<GetLayoutResponse> GetLayoutAsync (int? layoutId, string jurisdiction = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId"></param>
        /// <param name="jurisdiction"> (optional, default to null)</param>
        /// <returns>Task of ApiResponse (GetLayoutResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLayoutResponse>> GetLayoutAsyncWithHttpInfo (int? layoutId, string jurisdiction = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LayoutsApi : ILayoutsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LayoutsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutsApi"/> class
        /// </summary>
        /// <returns></returns>
        public LayoutsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LayoutsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get applied image groups. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIds"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 GetAppliedImageGroups (List<int?> resourceIds = null, List<string> resourceTypes = null, List<string> clientTypes = null)
        {
             ApiResponse<InlineResponse20032> localVarResponse = GetAppliedImageGroupsWithHttpInfo(resourceIds, resourceTypes, clientTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get applied image groups. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIds"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public ApiResponse< InlineResponse20032 > GetAppliedImageGroupsWithHttpInfo (List<int?> resourceIds = null, List<string> resourceTypes = null, List<string> clientTypes = null)
        {

            var localVarPath = "/v3/applied-image-groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "resource_ids", resourceIds)); // query parameter
            if (resourceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "resource_types", resourceTypes)); // query parameter
            if (clientTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "client_types", clientTypes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppliedImageGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20032) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
        }

        /// <summary>
        /// Get applied image groups. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIds"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032> GetAppliedImageGroupsAsync (List<int?> resourceIds = null, List<string> resourceTypes = null, List<string> clientTypes = null)
        {
             ApiResponse<InlineResponse20032> localVarResponse = await GetAppliedImageGroupsAsyncWithHttpInfo(resourceIds, resourceTypes, clientTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get applied image groups. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIds"> (optional)</param>
        /// <param name="resourceTypes"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetAppliedImageGroupsAsyncWithHttpInfo (List<int?> resourceIds = null, List<string> resourceTypes = null, List<string> clientTypes = null)
        {

            var localVarPath = "/v3/applied-image-groups/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "resource_ids", resourceIds)); // query parameter
            if (resourceTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "resource_types", resourceTypes)); // query parameter
            if (clientTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "client_types", clientTypes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppliedImageGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20032) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageIds"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 GetAttributions (List<int?> imageIds = null, List<string> clientTypes = null)
        {
             ApiResponse<InlineResponse20033> localVarResponse = GetAttributionsWithHttpInfo(imageIds, clientTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageIds"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public ApiResponse< InlineResponse20033 > GetAttributionsWithHttpInfo (List<int?> imageIds = null, List<string> clientTypes = null)
        {

            var localVarPath = "/v3/attributions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "image_ids", imageIds)); // query parameter
            if (clientTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "client_types", clientTypes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20033) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageIds"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033> GetAttributionsAsync (List<int?> imageIds = null, List<string> clientTypes = null)
        {
             ApiResponse<InlineResponse20033> localVarResponse = await GetAttributionsAsyncWithHttpInfo(imageIds, clientTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageIds"> (optional)</param>
        /// <param name="clientTypes"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetAttributionsAsyncWithHttpInfo (List<int?> imageIds = null, List<string> clientTypes = null)
        {

            var localVarPath = "/v3/attributions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "image_ids", imageIds)); // query parameter
            if (clientTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "client_types", clientTypes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20033) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId"></param>
        /// <param name="jurisdiction"> (optional, default to null)</param>
        /// <returns>GetLayoutResponse</returns>
        public GetLayoutResponse GetLayout (int? layoutId, string jurisdiction = null)
        {
             ApiResponse<GetLayoutResponse> localVarResponse = GetLayoutWithHttpInfo(layoutId, jurisdiction);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId"></param>
        /// <param name="jurisdiction"> (optional, default to null)</param>
        /// <returns>ApiResponse of GetLayoutResponse</returns>
        public ApiResponse< GetLayoutResponse > GetLayoutWithHttpInfo (int? layoutId, string jurisdiction = null)
        {
            // verify the required parameter 'layoutId' is set
            if (layoutId == null)
                throw new ApiException(400, "Missing required parameter 'layoutId' when calling LayoutsApi->GetLayout");

            var localVarPath = "/v3/layouts/{layout_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutId != null) localVarPathParams.Add("layout_id", this.Configuration.ApiClient.ParameterToString(layoutId)); // path parameter
            if (jurisdiction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jurisdiction", jurisdiction)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLayoutResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetLayoutResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLayoutResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId"></param>
        /// <param name="jurisdiction"> (optional, default to null)</param>
        /// <returns>Task of GetLayoutResponse</returns>
        public async System.Threading.Tasks.Task<GetLayoutResponse> GetLayoutAsync (int? layoutId, string jurisdiction = null)
        {
             ApiResponse<GetLayoutResponse> localVarResponse = await GetLayoutAsyncWithHttpInfo(layoutId, jurisdiction);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutId"></param>
        /// <param name="jurisdiction"> (optional, default to null)</param>
        /// <returns>Task of ApiResponse (GetLayoutResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLayoutResponse>> GetLayoutAsyncWithHttpInfo (int? layoutId, string jurisdiction = null)
        {
            // verify the required parameter 'layoutId' is set
            if (layoutId == null)
                throw new ApiException(400, "Missing required parameter 'layoutId' when calling LayoutsApi->GetLayout");

            var localVarPath = "/v3/layouts/{layout_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutId != null) localVarPathParams.Add("layout_id", this.Configuration.ApiClient.ParameterToString(layoutId)); // path parameter
            if (jurisdiction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jurisdiction", jurisdiction)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLayoutResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetLayoutResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLayoutResponse)));
        }

    }
}
