/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPromotionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get data for frontend home page marketing widget, specifying which slides need to be displayed.
        /// </summary>
        /// <remarks>
        /// ## Description The marketing widget on the home page displays several slides, according to user auth condition and media type.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isMember"> (optional, default to true)</param>
        /// <returns>Widget</returns>
        Widget GetMarketingWidget (bool? isMember = null);

        /// <summary>
        /// Get data for frontend home page marketing widget, specifying which slides need to be displayed.
        /// </summary>
        /// <remarks>
        /// ## Description The marketing widget on the home page displays several slides, according to user auth condition and media type.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isMember"> (optional, default to true)</param>
        /// <returns>ApiResponse of Widget</returns>
        ApiResponse<Widget> GetMarketingWidgetWithHttpInfo (bool? isMember = null);
        /// <summary>
        /// Get slides detail data for frontend home page marketing widget, specifying links on each slide.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WidgetSlidesDetail</returns>
        WidgetSlidesDetail GetMarketingWidgetSlideDetails ();

        /// <summary>
        /// Get slides detail data for frontend home page marketing widget, specifying links on each slide.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WidgetSlidesDetail</returns>
        ApiResponse<WidgetSlidesDetail> GetMarketingWidgetSlideDetailsWithHttpInfo ();
        /// <summary>
        /// Get multiple promotions info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionIds"></param>
        /// <returns>InlineResponse20062</returns>
        InlineResponse20062 GetMultiplePromotions (List<int?> promotionIds);

        /// <summary>
        /// Get multiple promotions info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionIds"></param>
        /// <returns>ApiResponse of InlineResponse20062</returns>
        ApiResponse<InlineResponse20062> GetMultiplePromotionsWithHttpInfo (List<int?> promotionIds);
        /// <summary>
        /// Get the promotion information from marketing.
        /// </summary>
        /// <remarks>
        /// ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId"></param>
        /// <returns>InlineResponse20063</returns>
        InlineResponse20063 GetPromotion (int? promotionId);

        /// <summary>
        /// Get the promotion information from marketing.
        /// </summary>
        /// <remarks>
        /// ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId"></param>
        /// <returns>ApiResponse of InlineResponse20063</returns>
        ApiResponse<InlineResponse20063> GetPromotionWithHttpInfo (int? promotionId);
        /// <summary>
        /// Get the promotions that the authenticated user has and the logs for each time the promotion progressed.
        /// </summary>
        /// <remarks>
        /// ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20061</returns>
        InlineResponse20061 GetPromotionUsages ();

        /// <summary>
        /// Get the promotions that the authenticated user has and the logs for each time the promotion progressed.
        /// </summary>
        /// <remarks>
        /// ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20061</returns>
        ApiResponse<InlineResponse20061> GetPromotionUsagesWithHttpInfo ();
        /// <summary>
        /// Get the current value of the refer a friend bonus in a number of different supported currencies.
        /// </summary>
        /// <remarks>
        /// ## Description For use in frontend so they dont need to redeploy if we update the RAF bonus.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RafBonus</returns>
        RafBonus GetRafBonusAmounts ();

        /// <summary>
        /// Get the current value of the refer a friend bonus in a number of different supported currencies.
        /// </summary>
        /// <remarks>
        /// ## Description For use in frontend so they dont need to redeploy if we update the RAF bonus.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RafBonus</returns>
        ApiResponse<RafBonus> GetRafBonusAmountsWithHttpInfo ();
        /// <summary>
        /// Get stats for the promotions that the user has signed up for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReferAFriendResponse</returns>
        ReferAFriendResponse GetReferredStats ();

        /// <summary>
        /// Get stats for the promotions that the user has signed up for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReferAFriendResponse</returns>
        ApiResponse<ReferAFriendResponse> GetReferredStatsWithHttpInfo ();
        /// <summary>
        /// Get stats for the promotions that the user has signed up for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetReferredStatsV0 ();

        /// <summary>
        /// Get stats for the promotions that the user has signed up for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetReferredStatsV0WithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get data for frontend home page marketing widget, specifying which slides need to be displayed.
        /// </summary>
        /// <remarks>
        /// ## Description The marketing widget on the home page displays several slides, according to user auth condition and media type.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isMember"> (optional, default to true)</param>
        /// <returns>Task of Widget</returns>
        System.Threading.Tasks.Task<Widget> GetMarketingWidgetAsync (bool? isMember = null);

        /// <summary>
        /// Get data for frontend home page marketing widget, specifying which slides need to be displayed.
        /// </summary>
        /// <remarks>
        /// ## Description The marketing widget on the home page displays several slides, according to user auth condition and media type.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isMember"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Widget)</returns>
        System.Threading.Tasks.Task<ApiResponse<Widget>> GetMarketingWidgetAsyncWithHttpInfo (bool? isMember = null);
        /// <summary>
        /// Get slides detail data for frontend home page marketing widget, specifying links on each slide.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WidgetSlidesDetail</returns>
        System.Threading.Tasks.Task<WidgetSlidesDetail> GetMarketingWidgetSlideDetailsAsync ();

        /// <summary>
        /// Get slides detail data for frontend home page marketing widget, specifying links on each slide.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WidgetSlidesDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<WidgetSlidesDetail>> GetMarketingWidgetSlideDetailsAsyncWithHttpInfo ();
        /// <summary>
        /// Get multiple promotions info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionIds"></param>
        /// <returns>Task of InlineResponse20062</returns>
        System.Threading.Tasks.Task<InlineResponse20062> GetMultiplePromotionsAsync (List<int?> promotionIds);

        /// <summary>
        /// Get multiple promotions info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionIds"></param>
        /// <returns>Task of ApiResponse (InlineResponse20062)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20062>> GetMultiplePromotionsAsyncWithHttpInfo (List<int?> promotionIds);
        /// <summary>
        /// Get the promotion information from marketing.
        /// </summary>
        /// <remarks>
        /// ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId"></param>
        /// <returns>Task of InlineResponse20063</returns>
        System.Threading.Tasks.Task<InlineResponse20063> GetPromotionAsync (int? promotionId);

        /// <summary>
        /// Get the promotion information from marketing.
        /// </summary>
        /// <remarks>
        /// ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20063)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20063>> GetPromotionAsyncWithHttpInfo (int? promotionId);
        /// <summary>
        /// Get the promotions that the authenticated user has and the logs for each time the promotion progressed.
        /// </summary>
        /// <remarks>
        /// ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20061</returns>
        System.Threading.Tasks.Task<InlineResponse20061> GetPromotionUsagesAsync ();

        /// <summary>
        /// Get the promotions that the authenticated user has and the logs for each time the promotion progressed.
        /// </summary>
        /// <remarks>
        /// ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20061)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20061>> GetPromotionUsagesAsyncWithHttpInfo ();
        /// <summary>
        /// Get the current value of the refer a friend bonus in a number of different supported currencies.
        /// </summary>
        /// <remarks>
        /// ## Description For use in frontend so they dont need to redeploy if we update the RAF bonus.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RafBonus</returns>
        System.Threading.Tasks.Task<RafBonus> GetRafBonusAmountsAsync ();

        /// <summary>
        /// Get the current value of the refer a friend bonus in a number of different supported currencies.
        /// </summary>
        /// <remarks>
        /// ## Description For use in frontend so they dont need to redeploy if we update the RAF bonus.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RafBonus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RafBonus>> GetRafBonusAmountsAsyncWithHttpInfo ();
        /// <summary>
        /// Get stats for the promotions that the user has signed up for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReferAFriendResponse</returns>
        System.Threading.Tasks.Task<ReferAFriendResponse> GetReferredStatsAsync ();

        /// <summary>
        /// Get stats for the promotions that the user has signed up for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReferAFriendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReferAFriendResponse>> GetReferredStatsAsyncWithHttpInfo ();
        /// <summary>
        /// Get stats for the promotions that the user has signed up for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetReferredStatsV0Async ();

        /// <summary>
        /// Get stats for the promotions that the user has signed up for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetReferredStatsV0AsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PromotionsApi : IPromotionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PromotionsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PromotionsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PromotionsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get data for frontend home page marketing widget, specifying which slides need to be displayed. ## Description The marketing widget on the home page displays several slides, according to user auth condition and media type.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isMember"> (optional, default to true)</param>
        /// <returns>Widget</returns>
        public Widget GetMarketingWidget (bool? isMember = null)
        {
             ApiResponse<Widget> localVarResponse = GetMarketingWidgetWithHttpInfo(isMember);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get data for frontend home page marketing widget, specifying which slides need to be displayed. ## Description The marketing widget on the home page displays several slides, according to user auth condition and media type.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isMember"> (optional, default to true)</param>
        /// <returns>ApiResponse of Widget</returns>
        public ApiResponse< Widget > GetMarketingWidgetWithHttpInfo (bool? isMember = null)
        {

            var localVarPath = "/v3/marketing-widget/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_member", isMember)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketingWidget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Widget>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Widget) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Widget)));
        }

        /// <summary>
        /// Get data for frontend home page marketing widget, specifying which slides need to be displayed. ## Description The marketing widget on the home page displays several slides, according to user auth condition and media type.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isMember"> (optional, default to true)</param>
        /// <returns>Task of Widget</returns>
        public async System.Threading.Tasks.Task<Widget> GetMarketingWidgetAsync (bool? isMember = null)
        {
             ApiResponse<Widget> localVarResponse = await GetMarketingWidgetAsyncWithHttpInfo(isMember);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get data for frontend home page marketing widget, specifying which slides need to be displayed. ## Description The marketing widget on the home page displays several slides, according to user auth condition and media type.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isMember"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Widget)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Widget>> GetMarketingWidgetAsyncWithHttpInfo (bool? isMember = null)
        {

            var localVarPath = "/v3/marketing-widget/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_member", isMember)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketingWidget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Widget>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Widget) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Widget)));
        }

        /// <summary>
        /// Get slides detail data for frontend home page marketing widget, specifying links on each slide. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WidgetSlidesDetail</returns>
        public WidgetSlidesDetail GetMarketingWidgetSlideDetails ()
        {
             ApiResponse<WidgetSlidesDetail> localVarResponse = GetMarketingWidgetSlideDetailsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get slides detail data for frontend home page marketing widget, specifying links on each slide. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WidgetSlidesDetail</returns>
        public ApiResponse< WidgetSlidesDetail > GetMarketingWidgetSlideDetailsWithHttpInfo ()
        {

            var localVarPath = "/v3/marketing-widget/slide-details/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketingWidgetSlideDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WidgetSlidesDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WidgetSlidesDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WidgetSlidesDetail)));
        }

        /// <summary>
        /// Get slides detail data for frontend home page marketing widget, specifying links on each slide. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WidgetSlidesDetail</returns>
        public async System.Threading.Tasks.Task<WidgetSlidesDetail> GetMarketingWidgetSlideDetailsAsync ()
        {
             ApiResponse<WidgetSlidesDetail> localVarResponse = await GetMarketingWidgetSlideDetailsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get slides detail data for frontend home page marketing widget, specifying links on each slide. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WidgetSlidesDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WidgetSlidesDetail>> GetMarketingWidgetSlideDetailsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/marketing-widget/slide-details/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketingWidgetSlideDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WidgetSlidesDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WidgetSlidesDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WidgetSlidesDetail)));
        }

        /// <summary>
        /// Get multiple promotions info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionIds"></param>
        /// <returns>InlineResponse20062</returns>
        public InlineResponse20062 GetMultiplePromotions (List<int?> promotionIds)
        {
             ApiResponse<InlineResponse20062> localVarResponse = GetMultiplePromotionsWithHttpInfo(promotionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple promotions info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionIds"></param>
        /// <returns>ApiResponse of InlineResponse20062</returns>
        public ApiResponse< InlineResponse20062 > GetMultiplePromotionsWithHttpInfo (List<int?> promotionIds)
        {
            // verify the required parameter 'promotionIds' is set
            if (promotionIds == null)
                throw new ApiException(400, "Missing required parameter 'promotionIds' when calling PromotionsApi->GetMultiplePromotions");

            var localVarPath = "/v3/promotions/{promotion_ids}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (promotionIds != null) localVarPathParams.Add("promotion_ids", this.Configuration.ApiClient.ParameterToString(promotionIds)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiplePromotions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20062>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20062) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20062)));
        }

        /// <summary>
        /// Get multiple promotions info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionIds"></param>
        /// <returns>Task of InlineResponse20062</returns>
        public async System.Threading.Tasks.Task<InlineResponse20062> GetMultiplePromotionsAsync (List<int?> promotionIds)
        {
             ApiResponse<InlineResponse20062> localVarResponse = await GetMultiplePromotionsAsyncWithHttpInfo(promotionIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get multiple promotions info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionIds"></param>
        /// <returns>Task of ApiResponse (InlineResponse20062)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20062>> GetMultiplePromotionsAsyncWithHttpInfo (List<int?> promotionIds)
        {
            // verify the required parameter 'promotionIds' is set
            if (promotionIds == null)
                throw new ApiException(400, "Missing required parameter 'promotionIds' when calling PromotionsApi->GetMultiplePromotions");

            var localVarPath = "/v3/promotions/{promotion_ids}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (promotionIds != null) localVarPathParams.Add("promotion_ids", this.Configuration.ApiClient.ParameterToString(promotionIds)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiplePromotions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20062>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20062) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20062)));
        }

        /// <summary>
        /// Get the promotion information from marketing. ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId"></param>
        /// <returns>InlineResponse20063</returns>
        public InlineResponse20063 GetPromotion (int? promotionId)
        {
             ApiResponse<InlineResponse20063> localVarResponse = GetPromotionWithHttpInfo(promotionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the promotion information from marketing. ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId"></param>
        /// <returns>ApiResponse of InlineResponse20063</returns>
        public ApiResponse< InlineResponse20063 > GetPromotionWithHttpInfo (int? promotionId)
        {
            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->GetPromotion");

            var localVarPath = "/v3/promotions/{promotion_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (promotionId != null) localVarPathParams.Add("promotion_id", this.Configuration.ApiClient.ParameterToString(promotionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPromotion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20063>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20063) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20063)));
        }

        /// <summary>
        /// Get the promotion information from marketing. ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId"></param>
        /// <returns>Task of InlineResponse20063</returns>
        public async System.Threading.Tasks.Task<InlineResponse20063> GetPromotionAsync (int? promotionId)
        {
             ApiResponse<InlineResponse20063> localVarResponse = await GetPromotionAsyncWithHttpInfo(promotionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the promotion information from marketing. ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20063)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20063>> GetPromotionAsyncWithHttpInfo (int? promotionId)
        {
            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new ApiException(400, "Missing required parameter 'promotionId' when calling PromotionsApi->GetPromotion");

            var localVarPath = "/v3/promotions/{promotion_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (promotionId != null) localVarPathParams.Add("promotion_id", this.Configuration.ApiClient.ParameterToString(promotionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPromotion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20063>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20063) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20063)));
        }

        /// <summary>
        /// Get the promotions that the authenticated user has and the logs for each time the promotion progressed. ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20061</returns>
        public InlineResponse20061 GetPromotionUsages ()
        {
             ApiResponse<InlineResponse20061> localVarResponse = GetPromotionUsagesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the promotions that the authenticated user has and the logs for each time the promotion progressed. ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20061</returns>
        public ApiResponse< InlineResponse20061 > GetPromotionUsagesWithHttpInfo ()
        {

            var localVarPath = "/v3/promotions/usage/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPromotionUsages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20061>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20061) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20061)));
        }

        /// <summary>
        /// Get the promotions that the authenticated user has and the logs for each time the promotion progressed. ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20061</returns>
        public async System.Threading.Tasks.Task<InlineResponse20061> GetPromotionUsagesAsync ()
        {
             ApiResponse<InlineResponse20061> localVarResponse = await GetPromotionUsagesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the promotions that the authenticated user has and the logs for each time the promotion progressed. ## Description This is to be displayed on FE as part of an updated refer a friend page that includes all promotions.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20061)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20061>> GetPromotionUsagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/promotions/usage/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPromotionUsages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20061>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20061) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20061)));
        }

        /// <summary>
        /// Get the current value of the refer a friend bonus in a number of different supported currencies. ## Description For use in frontend so they dont need to redeploy if we update the RAF bonus.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RafBonus</returns>
        public RafBonus GetRafBonusAmounts ()
        {
             ApiResponse<RafBonus> localVarResponse = GetRafBonusAmountsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current value of the refer a friend bonus in a number of different supported currencies. ## Description For use in frontend so they dont need to redeploy if we update the RAF bonus.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RafBonus</returns>
        public ApiResponse< RafBonus > GetRafBonusAmountsWithHttpInfo ()
        {

            var localVarPath = "/v3/promotions/raf-bonus/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRafBonusAmounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RafBonus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RafBonus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RafBonus)));
        }

        /// <summary>
        /// Get the current value of the refer a friend bonus in a number of different supported currencies. ## Description For use in frontend so they dont need to redeploy if we update the RAF bonus.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RafBonus</returns>
        public async System.Threading.Tasks.Task<RafBonus> GetRafBonusAmountsAsync ()
        {
             ApiResponse<RafBonus> localVarResponse = await GetRafBonusAmountsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current value of the refer a friend bonus in a number of different supported currencies. ## Description For use in frontend so they dont need to redeploy if we update the RAF bonus.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RafBonus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RafBonus>> GetRafBonusAmountsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/promotions/raf-bonus/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRafBonusAmounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RafBonus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RafBonus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RafBonus)));
        }

        /// <summary>
        /// Get stats for the promotions that the user has signed up for. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReferAFriendResponse</returns>
        public ReferAFriendResponse GetReferredStats ()
        {
             ApiResponse<ReferAFriendResponse> localVarResponse = GetReferredStatsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stats for the promotions that the user has signed up for. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReferAFriendResponse</returns>
        public ApiResponse< ReferAFriendResponse > GetReferredStatsWithHttpInfo ()
        {

            var localVarPath = "/v3/promotions/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferredStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReferAFriendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReferAFriendResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReferAFriendResponse)));
        }

        /// <summary>
        /// Get stats for the promotions that the user has signed up for. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReferAFriendResponse</returns>
        public async System.Threading.Tasks.Task<ReferAFriendResponse> GetReferredStatsAsync ()
        {
             ApiResponse<ReferAFriendResponse> localVarResponse = await GetReferredStatsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stats for the promotions that the user has signed up for. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReferAFriendResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReferAFriendResponse>> GetReferredStatsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/promotions/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferredStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReferAFriendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReferAFriendResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReferAFriendResponse)));
        }

        /// <summary>
        /// Get stats for the promotions that the user has signed up for. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetReferredStatsV0 ()
        {
             ApiResponse<InlineResponse20013> localVarResponse = GetReferredStatsV0WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stats for the promotions that the user has signed up for. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > GetReferredStatsV0WithHttpInfo ()
        {

            var localVarPath = "/v0/promotions/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferredStatsV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Get stats for the promotions that the user has signed up for. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetReferredStatsV0Async ()
        {
             ApiResponse<InlineResponse20013> localVarResponse = await GetReferredStatsV0AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stats for the promotions that the user has signed up for. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetReferredStatsV0AsyncWithHttpInfo ()
        {

            var localVarPath = "/v0/promotions/stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferredStatsV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

    }
}
