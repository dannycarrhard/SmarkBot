/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILimitsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acknowledge responsible gambling message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponsibleGamblingAcknowledgeResponse</returns>
        ResponsibleGamblingAcknowledgeResponse AcknowledgeResponsibleGambling ();

        /// <summary>
        /// Acknowledge responsible gambling message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponsibleGamblingAcknowledgeResponse</returns>
        ApiResponse<ResponsibleGamblingAcknowledgeResponse> AcknowledgeResponsibleGamblingWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 AcknowledgeSelfExclusionPromptSeen ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> AcknowledgeSelfExclusionPromptSeenWithHttpInfo ();
        /// <summary>
        ///      DELETE Limits with specified type and status.
        /// </summary>
        /// <remarks>
        /// ## Description Returns all remaining limits.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>LimitResponse</returns>
        LimitResponse DeleteLimits (string limitType, string status = null);

        /// <summary>
        ///      DELETE Limits with specified type and status.
        /// </summary>
        /// <remarks>
        /// ## Description Returns all remaining limits.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        ApiResponse<LimitResponse> DeleteLimitsWithHttpInfo (string limitType, string status = null);
        /// <summary>
        ///      DELETE Limits with specified type and status.
        /// </summary>
        /// <remarks>
        /// ## Description Returns all remaining limits.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>LimitResponse</returns>
        LimitResponse DeleteLimits_0 (string limitType, string interval, string status = null);

        /// <summary>
        ///      DELETE Limits with specified type and status.
        /// </summary>
        /// <remarks>
        /// ## Description Returns all remaining limits.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        ApiResponse<LimitResponse> DeleteLimits_0WithHttpInfo (string limitType, string interval, string status = null);
        /// <summary>
        ///      GET Limits associated with your account.
        /// </summary>
        /// <remarks>
        /// ## Description A limit is a limit of some activity (losing money, depositing), that has maximum allowance in a certain period of time (yearly, monthly, weekly, daily).  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <returns>LimitResponse</returns>
        LimitResponse GetLimits (string limitType);

        /// <summary>
        ///      GET Limits associated with your account.
        /// </summary>
        /// <remarks>
        /// ## Description A limit is a limit of some activity (losing money, depositing), that has maximum allowance in a certain period of time (yearly, monthly, weekly, daily).  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <returns>ApiResponse of LimitResponse</returns>
        ApiResponse<LimitResponse> GetLimitsWithHttpInfo (string limitType);
        /// <summary>
        /// Retrieve responsible gambling status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponsibleGamblingStatusResponse</returns>
        ResponsibleGamblingStatusResponse GetResponsibleGamblingStatus ();

        /// <summary>
        /// Retrieve responsible gambling status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponsibleGamblingStatusResponse</returns>
        ApiResponse<ResponsibleGamblingStatusResponse> GetResponsibleGamblingStatusWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 GetSelfExclusionPromptSeen ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> GetSelfExclusionPromptSeenWithHttpInfo ();
        /// <summary>
        ///      PATCH limit.
        /// </summary>
        /// <remarks>
        /// ## Description This should only be used to change the status from queued to active.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        LimitResponse PatchLimits (string limitType, Body61 body = null);

        /// <summary>
        ///      PATCH limit.
        /// </summary>
        /// <remarks>
        /// ## Description This should only be used to change the status from queued to active.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        ApiResponse<LimitResponse> PatchLimitsWithHttpInfo (string limitType, Body61 body = null);
        /// <summary>
        ///      PATCH limit.
        /// </summary>
        /// <remarks>
        /// ## Description This should only be used to change the status from queued to active.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        LimitResponse PatchLimits_0 (string limitType, string interval, Body62 body = null);

        /// <summary>
        ///      PATCH limit.
        /// </summary>
        /// <remarks>
        /// ## Description This should only be used to change the status from queued to active.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        ApiResponse<LimitResponse> PatchLimits_0WithHttpInfo (string limitType, string interval, Body62 body = null);
        /// <summary>
        ///      POST Break.
        /// </summary>
        /// <remarks>
        /// ## Description A timeout is an opt-in, temporary break from betting on Smarkets. You can choose a timeout period of 1, 7, 31, or 42 days. During this time the user will not be able to bet or use the Smarkets site. When the timeout expires their account will automatically be reopened.  A self exclusion will lock your account for a minimum of six months. Once the chosen time period has elapsed, the user must request to reopen their account.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>BreakResponse</returns>
        BreakResponse PostBreak (ModelBreak body = null);

        /// <summary>
        ///      POST Break.
        /// </summary>
        /// <remarks>
        /// ## Description A timeout is an opt-in, temporary break from betting on Smarkets. You can choose a timeout period of 1, 7, 31, or 42 days. During this time the user will not be able to bet or use the Smarkets site. When the timeout expires their account will automatically be reopened.  A self exclusion will lock your account for a minimum of six months. Once the chosen time period has elapsed, the user must request to reopen their account.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of BreakResponse</returns>
        ApiResponse<BreakResponse> PostBreakWithHttpInfo (ModelBreak body = null);
        /// <summary>
        ///      POST Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        LimitResponse PostDepositLimits (Body26 body = null);

        /// <summary>
        ///      POST Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        ApiResponse<LimitResponse> PostDepositLimitsWithHttpInfo (Body26 body = null);
        /// <summary>
        ///      POST Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        LimitResponse PostLossLimits (Body31 body = null);

        /// <summary>
        ///      POST Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        ApiResponse<LimitResponse> PostLossLimitsWithHttpInfo (Body31 body = null);
        /// <summary>
        ///      POST Session Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        LimitResponse PostSessionLimit (Body51 body = null);

        /// <summary>
        ///      POST Session Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        ApiResponse<LimitResponse> PostSessionLimitWithHttpInfo (Body51 body = null);
        /// <summary>
        ///      POST Stake Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        LimitResponse PostStakeLimit (Body54 body = null);

        /// <summary>
        ///      POST Stake Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        ApiResponse<LimitResponse> PostStakeLimitWithHttpInfo (Body54 body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>GamblingSelfTestResponse</returns>
        GamblingSelfTestResponse ProcessGamblingSelfTest (GamblingSelfTestRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of GamblingSelfTestResponse</returns>
        ApiResponse<GamblingSelfTestResponse> ProcessGamblingSelfTestWithHttpInfo (GamblingSelfTestRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Acknowledge responsible gambling message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponsibleGamblingAcknowledgeResponse</returns>
        System.Threading.Tasks.Task<ResponsibleGamblingAcknowledgeResponse> AcknowledgeResponsibleGamblingAsync ();

        /// <summary>
        /// Acknowledge responsible gambling message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponsibleGamblingAcknowledgeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsibleGamblingAcknowledgeResponse>> AcknowledgeResponsibleGamblingAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> AcknowledgeSelfExclusionPromptSeenAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> AcknowledgeSelfExclusionPromptSeenAsyncWithHttpInfo ();
        /// <summary>
        ///      DELETE Limits with specified type and status.
        /// </summary>
        /// <remarks>
        /// ## Description Returns all remaining limits.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        System.Threading.Tasks.Task<LimitResponse> DeleteLimitsAsync (string limitType, string status = null);

        /// <summary>
        ///      DELETE Limits with specified type and status.
        /// </summary>
        /// <remarks>
        /// ## Description Returns all remaining limits.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LimitResponse>> DeleteLimitsAsyncWithHttpInfo (string limitType, string status = null);
        /// <summary>
        ///      DELETE Limits with specified type and status.
        /// </summary>
        /// <remarks>
        /// ## Description Returns all remaining limits.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        System.Threading.Tasks.Task<LimitResponse> DeleteLimits_0Async (string limitType, string interval, string status = null);

        /// <summary>
        ///      DELETE Limits with specified type and status.
        /// </summary>
        /// <remarks>
        /// ## Description Returns all remaining limits.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LimitResponse>> DeleteLimits_0AsyncWithHttpInfo (string limitType, string interval, string status = null);
        /// <summary>
        ///      GET Limits associated with your account.
        /// </summary>
        /// <remarks>
        /// ## Description A limit is a limit of some activity (losing money, depositing), that has maximum allowance in a certain period of time (yearly, monthly, weekly, daily).  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <returns>Task of LimitResponse</returns>
        System.Threading.Tasks.Task<LimitResponse> GetLimitsAsync (string limitType);

        /// <summary>
        ///      GET Limits associated with your account.
        /// </summary>
        /// <remarks>
        /// ## Description A limit is a limit of some activity (losing money, depositing), that has maximum allowance in a certain period of time (yearly, monthly, weekly, daily).  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LimitResponse>> GetLimitsAsyncWithHttpInfo (string limitType);
        /// <summary>
        /// Retrieve responsible gambling status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponsibleGamblingStatusResponse</returns>
        System.Threading.Tasks.Task<ResponsibleGamblingStatusResponse> GetResponsibleGamblingStatusAsync ();

        /// <summary>
        /// Retrieve responsible gambling status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponsibleGamblingStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsibleGamblingStatusResponse>> GetResponsibleGamblingStatusAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> GetSelfExclusionPromptSeenAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GetSelfExclusionPromptSeenAsyncWithHttpInfo ();
        /// <summary>
        ///      PATCH limit.
        /// </summary>
        /// <remarks>
        /// ## Description This should only be used to change the status from queued to active.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        System.Threading.Tasks.Task<LimitResponse> PatchLimitsAsync (string limitType, Body61 body = null);

        /// <summary>
        ///      PATCH limit.
        /// </summary>
        /// <remarks>
        /// ## Description This should only be used to change the status from queued to active.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PatchLimitsAsyncWithHttpInfo (string limitType, Body61 body = null);
        /// <summary>
        ///      PATCH limit.
        /// </summary>
        /// <remarks>
        /// ## Description This should only be used to change the status from queued to active.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        System.Threading.Tasks.Task<LimitResponse> PatchLimits_0Async (string limitType, string interval, Body62 body = null);

        /// <summary>
        ///      PATCH limit.
        /// </summary>
        /// <remarks>
        /// ## Description This should only be used to change the status from queued to active.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PatchLimits_0AsyncWithHttpInfo (string limitType, string interval, Body62 body = null);
        /// <summary>
        ///      POST Break.
        /// </summary>
        /// <remarks>
        /// ## Description A timeout is an opt-in, temporary break from betting on Smarkets. You can choose a timeout period of 1, 7, 31, or 42 days. During this time the user will not be able to bet or use the Smarkets site. When the timeout expires their account will automatically be reopened.  A self exclusion will lock your account for a minimum of six months. Once the chosen time period has elapsed, the user must request to reopen their account.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of BreakResponse</returns>
        System.Threading.Tasks.Task<BreakResponse> PostBreakAsync (ModelBreak body = null);

        /// <summary>
        ///      POST Break.
        /// </summary>
        /// <remarks>
        /// ## Description A timeout is an opt-in, temporary break from betting on Smarkets. You can choose a timeout period of 1, 7, 31, or 42 days. During this time the user will not be able to bet or use the Smarkets site. When the timeout expires their account will automatically be reopened.  A self exclusion will lock your account for a minimum of six months. Once the chosen time period has elapsed, the user must request to reopen their account.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (BreakResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreakResponse>> PostBreakAsyncWithHttpInfo (ModelBreak body = null);
        /// <summary>
        ///      POST Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        System.Threading.Tasks.Task<LimitResponse> PostDepositLimitsAsync (Body26 body = null);

        /// <summary>
        ///      POST Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PostDepositLimitsAsyncWithHttpInfo (Body26 body = null);
        /// <summary>
        ///      POST Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        System.Threading.Tasks.Task<LimitResponse> PostLossLimitsAsync (Body31 body = null);

        /// <summary>
        ///      POST Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PostLossLimitsAsyncWithHttpInfo (Body31 body = null);
        /// <summary>
        ///      POST Session Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        System.Threading.Tasks.Task<LimitResponse> PostSessionLimitAsync (Body51 body = null);

        /// <summary>
        ///      POST Session Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PostSessionLimitAsyncWithHttpInfo (Body51 body = null);
        /// <summary>
        ///      POST Stake Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        System.Threading.Tasks.Task<LimitResponse> PostStakeLimitAsync (Body54 body = null);

        /// <summary>
        ///      POST Stake Limit for your account.
        /// </summary>
        /// <remarks>
        /// ## Description A list of all your limits will be returned.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PostStakeLimitAsyncWithHttpInfo (Body54 body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of GamblingSelfTestResponse</returns>
        System.Threading.Tasks.Task<GamblingSelfTestResponse> ProcessGamblingSelfTestAsync (GamblingSelfTestRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (GamblingSelfTestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GamblingSelfTestResponse>> ProcessGamblingSelfTestAsyncWithHttpInfo (GamblingSelfTestRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LimitsApi : ILimitsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LimitsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LimitsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LimitsApi"/> class
        /// </summary>
        /// <returns></returns>
        public LimitsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LimitsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LimitsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Acknowledge responsible gambling message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponsibleGamblingAcknowledgeResponse</returns>
        public ResponsibleGamblingAcknowledgeResponse AcknowledgeResponsibleGambling ()
        {
             ApiResponse<ResponsibleGamblingAcknowledgeResponse> localVarResponse = AcknowledgeResponsibleGamblingWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge responsible gambling message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponsibleGamblingAcknowledgeResponse</returns>
        public ApiResponse< ResponsibleGamblingAcknowledgeResponse > AcknowledgeResponsibleGamblingWithHttpInfo ()
        {

            var localVarPath = "/v3/responsible_gambling/acknowledge/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcknowledgeResponsibleGambling", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsibleGamblingAcknowledgeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponsibleGamblingAcknowledgeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsibleGamblingAcknowledgeResponse)));
        }

        /// <summary>
        /// Acknowledge responsible gambling message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponsibleGamblingAcknowledgeResponse</returns>
        public async System.Threading.Tasks.Task<ResponsibleGamblingAcknowledgeResponse> AcknowledgeResponsibleGamblingAsync ()
        {
             ApiResponse<ResponsibleGamblingAcknowledgeResponse> localVarResponse = await AcknowledgeResponsibleGamblingAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Acknowledge responsible gambling message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponsibleGamblingAcknowledgeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsibleGamblingAcknowledgeResponse>> AcknowledgeResponsibleGamblingAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/responsible_gambling/acknowledge/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcknowledgeResponsibleGambling", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsibleGamblingAcknowledgeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponsibleGamblingAcknowledgeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsibleGamblingAcknowledgeResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 AcknowledgeSelfExclusionPromptSeen ()
        {
             ApiResponse<InlineResponse20035> localVarResponse = AcknowledgeSelfExclusionPromptSeenWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public ApiResponse< InlineResponse20035 > AcknowledgeSelfExclusionPromptSeenWithHttpInfo ()
        {

            var localVarPath = "/v3/breaks/self_exclusion_prompt_required/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcknowledgeSelfExclusionPromptSeen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035> AcknowledgeSelfExclusionPromptSeenAsync ()
        {
             ApiResponse<InlineResponse20035> localVarResponse = await AcknowledgeSelfExclusionPromptSeenAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> AcknowledgeSelfExclusionPromptSeenAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/breaks/self_exclusion_prompt_required/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcknowledgeSelfExclusionPromptSeen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        ///      DELETE Limits with specified type and status. ## Description Returns all remaining limits.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>LimitResponse</returns>
        public LimitResponse DeleteLimits (string limitType, string status = null)
        {
             ApiResponse<LimitResponse> localVarResponse = DeleteLimitsWithHttpInfo(limitType, status);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      DELETE Limits with specified type and status. ## Description Returns all remaining limits.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        public ApiResponse< LimitResponse > DeleteLimitsWithHttpInfo (string limitType, string status = null)
        {
            // verify the required parameter 'limitType' is set
            if (limitType == null)
                throw new ApiException(400, "Missing required parameter 'limitType' when calling LimitsApi->DeleteLimits");

            var localVarPath = "/v3/{limit_type}_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limitType != null) localVarPathParams.Add("limit_type", this.Configuration.ApiClient.ParameterToString(limitType)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      DELETE Limits with specified type and status. ## Description Returns all remaining limits.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        public async System.Threading.Tasks.Task<LimitResponse> DeleteLimitsAsync (string limitType, string status = null)
        {
             ApiResponse<LimitResponse> localVarResponse = await DeleteLimitsAsyncWithHttpInfo(limitType, status);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      DELETE Limits with specified type and status. ## Description Returns all remaining limits.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LimitResponse>> DeleteLimitsAsyncWithHttpInfo (string limitType, string status = null)
        {
            // verify the required parameter 'limitType' is set
            if (limitType == null)
                throw new ApiException(400, "Missing required parameter 'limitType' when calling LimitsApi->DeleteLimits");

            var localVarPath = "/v3/{limit_type}_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limitType != null) localVarPathParams.Add("limit_type", this.Configuration.ApiClient.ParameterToString(limitType)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      DELETE Limits with specified type and status. ## Description Returns all remaining limits.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>LimitResponse</returns>
        public LimitResponse DeleteLimits_0 (string limitType, string interval, string status = null)
        {
             ApiResponse<LimitResponse> localVarResponse = DeleteLimits_0WithHttpInfo(limitType, interval, status);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      DELETE Limits with specified type and status. ## Description Returns all remaining limits.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        public ApiResponse< LimitResponse > DeleteLimits_0WithHttpInfo (string limitType, string interval, string status = null)
        {
            // verify the required parameter 'limitType' is set
            if (limitType == null)
                throw new ApiException(400, "Missing required parameter 'limitType' when calling LimitsApi->DeleteLimits_0");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling LimitsApi->DeleteLimits_0");

            var localVarPath = "/v3/{limit_type}_limits/intervals/{interval}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limitType != null) localVarPathParams.Add("limit_type", this.Configuration.ApiClient.ParameterToString(limitType)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLimits_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      DELETE Limits with specified type and status. ## Description Returns all remaining limits.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        public async System.Threading.Tasks.Task<LimitResponse> DeleteLimits_0Async (string limitType, string interval, string status = null)
        {
             ApiResponse<LimitResponse> localVarResponse = await DeleteLimits_0AsyncWithHttpInfo(limitType, interval, status);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      DELETE Limits with specified type and status. ## Description Returns all remaining limits.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LimitResponse>> DeleteLimits_0AsyncWithHttpInfo (string limitType, string interval, string status = null)
        {
            // verify the required parameter 'limitType' is set
            if (limitType == null)
                throw new ApiException(400, "Missing required parameter 'limitType' when calling LimitsApi->DeleteLimits_0");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling LimitsApi->DeleteLimits_0");

            var localVarPath = "/v3/{limit_type}_limits/intervals/{interval}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limitType != null) localVarPathParams.Add("limit_type", this.Configuration.ApiClient.ParameterToString(limitType)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLimits_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      GET Limits associated with your account. ## Description A limit is a limit of some activity (losing money, depositing), that has maximum allowance in a certain period of time (yearly, monthly, weekly, daily).  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <returns>LimitResponse</returns>
        public LimitResponse GetLimits (string limitType)
        {
             ApiResponse<LimitResponse> localVarResponse = GetLimitsWithHttpInfo(limitType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      GET Limits associated with your account. ## Description A limit is a limit of some activity (losing money, depositing), that has maximum allowance in a certain period of time (yearly, monthly, weekly, daily).  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <returns>ApiResponse of LimitResponse</returns>
        public ApiResponse< LimitResponse > GetLimitsWithHttpInfo (string limitType)
        {
            // verify the required parameter 'limitType' is set
            if (limitType == null)
                throw new ApiException(400, "Missing required parameter 'limitType' when calling LimitsApi->GetLimits");

            var localVarPath = "/v3/{limit_type}_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limitType != null) localVarPathParams.Add("limit_type", this.Configuration.ApiClient.ParameterToString(limitType)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      GET Limits associated with your account. ## Description A limit is a limit of some activity (losing money, depositing), that has maximum allowance in a certain period of time (yearly, monthly, weekly, daily).  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <returns>Task of LimitResponse</returns>
        public async System.Threading.Tasks.Task<LimitResponse> GetLimitsAsync (string limitType)
        {
             ApiResponse<LimitResponse> localVarResponse = await GetLimitsAsyncWithHttpInfo(limitType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      GET Limits associated with your account. ## Description A limit is a limit of some activity (losing money, depositing), that has maximum allowance in a certain period of time (yearly, monthly, weekly, daily).  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LimitResponse>> GetLimitsAsyncWithHttpInfo (string limitType)
        {
            // verify the required parameter 'limitType' is set
            if (limitType == null)
                throw new ApiException(400, "Missing required parameter 'limitType' when calling LimitsApi->GetLimits");

            var localVarPath = "/v3/{limit_type}_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limitType != null) localVarPathParams.Add("limit_type", this.Configuration.ApiClient.ParameterToString(limitType)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        /// Retrieve responsible gambling status. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponsibleGamblingStatusResponse</returns>
        public ResponsibleGamblingStatusResponse GetResponsibleGamblingStatus ()
        {
             ApiResponse<ResponsibleGamblingStatusResponse> localVarResponse = GetResponsibleGamblingStatusWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve responsible gambling status. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponsibleGamblingStatusResponse</returns>
        public ApiResponse< ResponsibleGamblingStatusResponse > GetResponsibleGamblingStatusWithHttpInfo ()
        {

            var localVarPath = "/v3/responsible_gambling/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponsibleGamblingStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsibleGamblingStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponsibleGamblingStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsibleGamblingStatusResponse)));
        }

        /// <summary>
        /// Retrieve responsible gambling status. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponsibleGamblingStatusResponse</returns>
        public async System.Threading.Tasks.Task<ResponsibleGamblingStatusResponse> GetResponsibleGamblingStatusAsync ()
        {
             ApiResponse<ResponsibleGamblingStatusResponse> localVarResponse = await GetResponsibleGamblingStatusAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve responsible gambling status. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponsibleGamblingStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsibleGamblingStatusResponse>> GetResponsibleGamblingStatusAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/responsible_gambling/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponsibleGamblingStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsibleGamblingStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponsibleGamblingStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsibleGamblingStatusResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 GetSelfExclusionPromptSeen ()
        {
             ApiResponse<InlineResponse20035> localVarResponse = GetSelfExclusionPromptSeenWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public ApiResponse< InlineResponse20035 > GetSelfExclusionPromptSeenWithHttpInfo ()
        {

            var localVarPath = "/v3/breaks/self_exclusion_prompt_required/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSelfExclusionPromptSeen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035> GetSelfExclusionPromptSeenAsync ()
        {
             ApiResponse<InlineResponse20035> localVarResponse = await GetSelfExclusionPromptSeenAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GetSelfExclusionPromptSeenAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/breaks/self_exclusion_prompt_required/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSelfExclusionPromptSeen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        ///      PATCH limit. ## Description This should only be used to change the status from queued to active.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        public LimitResponse PatchLimits (string limitType, Body61 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = PatchLimitsWithHttpInfo(limitType, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      PATCH limit. ## Description This should only be used to change the status from queued to active.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        public ApiResponse< LimitResponse > PatchLimitsWithHttpInfo (string limitType, Body61 body = null)
        {
            // verify the required parameter 'limitType' is set
            if (limitType == null)
                throw new ApiException(400, "Missing required parameter 'limitType' when calling LimitsApi->PatchLimits");

            var localVarPath = "/v3/{limit_type}_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limitType != null) localVarPathParams.Add("limit_type", this.Configuration.ApiClient.ParameterToString(limitType)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      PATCH limit. ## Description This should only be used to change the status from queued to active.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        public async System.Threading.Tasks.Task<LimitResponse> PatchLimitsAsync (string limitType, Body61 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = await PatchLimitsAsyncWithHttpInfo(limitType, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      PATCH limit. ## Description This should only be used to change the status from queued to active.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PatchLimitsAsyncWithHttpInfo (string limitType, Body61 body = null)
        {
            // verify the required parameter 'limitType' is set
            if (limitType == null)
                throw new ApiException(400, "Missing required parameter 'limitType' when calling LimitsApi->PatchLimits");

            var localVarPath = "/v3/{limit_type}_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limitType != null) localVarPathParams.Add("limit_type", this.Configuration.ApiClient.ParameterToString(limitType)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      PATCH limit. ## Description This should only be used to change the status from queued to active.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        public LimitResponse PatchLimits_0 (string limitType, string interval, Body62 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = PatchLimits_0WithHttpInfo(limitType, interval, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      PATCH limit. ## Description This should only be used to change the status from queued to active.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        public ApiResponse< LimitResponse > PatchLimits_0WithHttpInfo (string limitType, string interval, Body62 body = null)
        {
            // verify the required parameter 'limitType' is set
            if (limitType == null)
                throw new ApiException(400, "Missing required parameter 'limitType' when calling LimitsApi->PatchLimits_0");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling LimitsApi->PatchLimits_0");

            var localVarPath = "/v3/{limit_type}_limits/intervals/{interval}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limitType != null) localVarPathParams.Add("limit_type", this.Configuration.ApiClient.ParameterToString(limitType)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchLimits_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      PATCH limit. ## Description This should only be used to change the status from queued to active.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        public async System.Threading.Tasks.Task<LimitResponse> PatchLimits_0Async (string limitType, string interval, Body62 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = await PatchLimits_0AsyncWithHttpInfo(limitType, interval, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      PATCH limit. ## Description This should only be used to change the status from queued to active.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitType"></param>
        /// <param name="interval"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PatchLimits_0AsyncWithHttpInfo (string limitType, string interval, Body62 body = null)
        {
            // verify the required parameter 'limitType' is set
            if (limitType == null)
                throw new ApiException(400, "Missing required parameter 'limitType' when calling LimitsApi->PatchLimits_0");
            // verify the required parameter 'interval' is set
            if (interval == null)
                throw new ApiException(400, "Missing required parameter 'interval' when calling LimitsApi->PatchLimits_0");

            var localVarPath = "/v3/{limit_type}_limits/intervals/{interval}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limitType != null) localVarPathParams.Add("limit_type", this.Configuration.ApiClient.ParameterToString(limitType)); // path parameter
            if (interval != null) localVarPathParams.Add("interval", this.Configuration.ApiClient.ParameterToString(interval)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchLimits_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      POST Break. ## Description A timeout is an opt-in, temporary break from betting on Smarkets. You can choose a timeout period of 1, 7, 31, or 42 days. During this time the user will not be able to bet or use the Smarkets site. When the timeout expires their account will automatically be reopened.  A self exclusion will lock your account for a minimum of six months. Once the chosen time period has elapsed, the user must request to reopen their account.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>BreakResponse</returns>
        public BreakResponse PostBreak (ModelBreak body = null)
        {
             ApiResponse<BreakResponse> localVarResponse = PostBreakWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      POST Break. ## Description A timeout is an opt-in, temporary break from betting on Smarkets. You can choose a timeout period of 1, 7, 31, or 42 days. During this time the user will not be able to bet or use the Smarkets site. When the timeout expires their account will automatically be reopened.  A self exclusion will lock your account for a minimum of six months. Once the chosen time period has elapsed, the user must request to reopen their account.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of BreakResponse</returns>
        public ApiResponse< BreakResponse > PostBreakWithHttpInfo (ModelBreak body = null)
        {

            var localVarPath = "/v3/breaks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreakResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BreakResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreakResponse)));
        }

        /// <summary>
        ///      POST Break. ## Description A timeout is an opt-in, temporary break from betting on Smarkets. You can choose a timeout period of 1, 7, 31, or 42 days. During this time the user will not be able to bet or use the Smarkets site. When the timeout expires their account will automatically be reopened.  A self exclusion will lock your account for a minimum of six months. Once the chosen time period has elapsed, the user must request to reopen their account.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of BreakResponse</returns>
        public async System.Threading.Tasks.Task<BreakResponse> PostBreakAsync (ModelBreak body = null)
        {
             ApiResponse<BreakResponse> localVarResponse = await PostBreakAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      POST Break. ## Description A timeout is an opt-in, temporary break from betting on Smarkets. You can choose a timeout period of 1, 7, 31, or 42 days. During this time the user will not be able to bet or use the Smarkets site. When the timeout expires their account will automatically be reopened.  A self exclusion will lock your account for a minimum of six months. Once the chosen time period has elapsed, the user must request to reopen their account.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (BreakResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreakResponse>> PostBreakAsyncWithHttpInfo (ModelBreak body = null)
        {

            var localVarPath = "/v3/breaks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostBreak", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreakResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BreakResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreakResponse)));
        }

        /// <summary>
        ///      POST Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        public LimitResponse PostDepositLimits (Body26 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = PostDepositLimitsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      POST Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        public ApiResponse< LimitResponse > PostDepositLimitsWithHttpInfo (Body26 body = null)
        {

            var localVarPath = "/v3/deposit_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDepositLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      POST Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        public async System.Threading.Tasks.Task<LimitResponse> PostDepositLimitsAsync (Body26 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = await PostDepositLimitsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      POST Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PostDepositLimitsAsyncWithHttpInfo (Body26 body = null)
        {

            var localVarPath = "/v3/deposit_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDepositLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      POST Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        public LimitResponse PostLossLimits (Body31 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = PostLossLimitsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      POST Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        public ApiResponse< LimitResponse > PostLossLimitsWithHttpInfo (Body31 body = null)
        {

            var localVarPath = "/v3/loss_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLossLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      POST Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        public async System.Threading.Tasks.Task<LimitResponse> PostLossLimitsAsync (Body31 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = await PostLossLimitsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      POST Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PostLossLimitsAsyncWithHttpInfo (Body31 body = null)
        {

            var localVarPath = "/v3/loss_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLossLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      POST Session Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        public LimitResponse PostSessionLimit (Body51 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = PostSessionLimitWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      POST Session Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        public ApiResponse< LimitResponse > PostSessionLimitWithHttpInfo (Body51 body = null)
        {

            var localVarPath = "/v3/session_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSessionLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      POST Session Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        public async System.Threading.Tasks.Task<LimitResponse> PostSessionLimitAsync (Body51 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = await PostSessionLimitAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      POST Session Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PostSessionLimitAsyncWithHttpInfo (Body51 body = null)
        {

            var localVarPath = "/v3/session_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSessionLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      POST Stake Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>LimitResponse</returns>
        public LimitResponse PostStakeLimit (Body54 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = PostStakeLimitWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      POST Stake Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of LimitResponse</returns>
        public ApiResponse< LimitResponse > PostStakeLimitWithHttpInfo (Body54 body = null)
        {

            var localVarPath = "/v3/stake_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostStakeLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///      POST Stake Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of LimitResponse</returns>
        public async System.Threading.Tasks.Task<LimitResponse> PostStakeLimitAsync (Body54 body = null)
        {
             ApiResponse<LimitResponse> localVarResponse = await PostStakeLimitAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      POST Stake Limit for your account. ## Description A list of all your limits will be returned.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (LimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LimitResponse>> PostStakeLimitAsyncWithHttpInfo (Body54 body = null)
        {

            var localVarPath = "/v3/stake_limits/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostStakeLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LimitResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>GamblingSelfTestResponse</returns>
        public GamblingSelfTestResponse ProcessGamblingSelfTest (GamblingSelfTestRequest body = null)
        {
             ApiResponse<GamblingSelfTestResponse> localVarResponse = ProcessGamblingSelfTestWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of GamblingSelfTestResponse</returns>
        public ApiResponse< GamblingSelfTestResponse > ProcessGamblingSelfTestWithHttpInfo (GamblingSelfTestRequest body = null)
        {

            var localVarPath = "/v3/gambling_self_test/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessGamblingSelfTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GamblingSelfTestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GamblingSelfTestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GamblingSelfTestResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of GamblingSelfTestResponse</returns>
        public async System.Threading.Tasks.Task<GamblingSelfTestResponse> ProcessGamblingSelfTestAsync (GamblingSelfTestRequest body = null)
        {
             ApiResponse<GamblingSelfTestResponse> localVarResponse = await ProcessGamblingSelfTestAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (GamblingSelfTestResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GamblingSelfTestResponse>> ProcessGamblingSelfTestAsyncWithHttpInfo (GamblingSelfTestRequest body = null)
        {

            var localVarPath = "/v3/gambling_self_test/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProcessGamblingSelfTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GamblingSelfTestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GamblingSelfTestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GamblingSelfTestResponse)));
        }

    }
}
