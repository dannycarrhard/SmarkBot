/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SocialApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SocialApiTests
    {
        private SocialApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SocialApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SocialApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SocialApi
            //Assert.IsInstanceOfType(typeof(SocialApi), instance, "instance is a SocialApi");
        }

        /// <summary>
        /// Test CreateComment
        /// </summary>
        [Test]
        public void CreateCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostCommentsRequest body = null;
            //var response = instance.CreateComment(body);
            //Assert.IsInstanceOf<PostCommentResponse> (response, "response is PostCommentResponse");
        }
        /// <summary>
        /// Test CreateMember
        /// </summary>
        [Test]
        public void CreateMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSocialMemberRequest body = null;
            //var response = instance.CreateMember(body);
            //Assert.IsInstanceOf<CreateSocialMemberResponse> (response, "response is CreateSocialMemberResponse");
        }
        /// <summary>
        /// Test CreateReaction
        /// </summary>
        [Test]
        public void CreateReactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commentId = null;
            //int? emojiId = null;
            //var response = instance.CreateReaction(commentId, emojiId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteComment
        /// </summary>
        [Test]
        public void DeleteCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commentId = null;
            //var response = instance.DeleteComment(commentId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteMemberRelationship
        /// </summary>
        [Test]
        public void DeleteMemberRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? fromMemberId = null;
            //int? toMemberId = null;
            //var response = instance.DeleteMemberRelationship(fromMemberId, toMemberId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteReaction
        /// </summary>
        [Test]
        public void DeleteReactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? commentId = null;
            //int? emojiId = null;
            //var response = instance.DeleteReaction(commentId, emojiId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetComments
        /// </summary>
        [Test]
        public void GetCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> commentIds = null;
            //List<string> eventIds = null;
            //List<int?> memberIds = null;
            //List<int?> parentCommentIds = null;
            //string typeFilter = null;
            //bool? includeReplies = null;
            //int? limit = null;
            //int? paginationLastId = null;
            //string paginationLastCreated = null;
            //var response = instance.GetComments(commentIds, eventIds, memberIds, parentCommentIds, typeFilter, includeReplies, limit, paginationLastId, paginationLastCreated);
            //Assert.IsInstanceOf<GetCommentsReponse> (response, "response is GetCommentsReponse");
        }
        /// <summary>
        /// Test GetCurrentMember
        /// </summary>
        [Test]
        public void GetCurrentMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrentMember();
            //Assert.IsInstanceOf<GetSocialMemberResponse> (response, "response is GetSocialMemberResponse");
        }
        /// <summary>
        /// Test GetFollowers
        /// </summary>
        [Test]
        public void GetFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? memberId = null;
            //var response = instance.GetFollowers(memberId);
            //Assert.IsInstanceOf<GetFollowersResponse> (response, "response is GetFollowersResponse");
        }
        /// <summary>
        /// Test GetFollowing
        /// </summary>
        [Test]
        public void GetFollowingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? memberId = null;
            //var response = instance.GetFollowing(memberId);
            //Assert.IsInstanceOf<GetFollowingResponse> (response, "response is GetFollowingResponse");
        }
        /// <summary>
        /// Test GetMemberActivity
        /// </summary>
        [Test]
        public void GetMemberActivityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? lastId = null;
            //bool? seen = null;
            //var response = instance.GetMemberActivity(lastId, seen);
            //Assert.IsInstanceOf<GetActivityResponse> (response, "response is GetActivityResponse");
        }
        /// <summary>
        /// Test GetMemberRelationships
        /// </summary>
        [Test]
        public void GetMemberRelationshipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> fields = null;
            //var response = instance.GetMemberRelationships(fields);
            //Assert.IsInstanceOf<GetSocialMemberRelationshipResponse> (response, "response is GetSocialMemberRelationshipResponse");
        }
        /// <summary>
        /// Test GetMembers
        /// </summary>
        [Test]
        public void GetMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> memberIds = null;
            //var response = instance.GetMembers(memberIds);
            //Assert.IsInstanceOf<GetSocialMemberResponse> (response, "response is GetSocialMemberResponse");
        }
        /// <summary>
        /// Test GetMembersBetStats
        /// </summary>
        [Test]
        public void GetMembersBetStatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> memberIds = null;
            //var response = instance.GetMembersBetStats(memberIds);
            //Assert.IsInstanceOf<InlineResponse20064> (response, "response is InlineResponse20064");
        }
        /// <summary>
        /// Test GetUnreadActivityCount
        /// </summary>
        [Test]
        public void GetUnreadActivityCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUnreadActivityCount();
            //Assert.IsInstanceOf<GetUnreadActivityCountResponse> (response, "response is GetUnreadActivityCountResponse");
        }
        /// <summary>
        /// Test SearchMembers
        /// </summary>
        [Test]
        public void SearchMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string displayName = null;
            //string username = null;
            //int? limit = null;
            //int? paginationLastId = null;
            //var response = instance.SearchMembers(displayName, username, limit, paginationLastId);
            //Assert.IsInstanceOf<GetSocialMemberResponse> (response, "response is GetSocialMemberResponse");
        }
        /// <summary>
        /// Test SetActivityRead
        /// </summary>
        [Test]
        public void SetActivityReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetActivityReadRequest body = null;
            //var response = instance.SetActivityRead(body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test UpdateMember
        /// </summary>
        [Test]
        public void UpdateMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateMemberRequest body = null;
            //var response = instance.UpdateMember(body);
            //Assert.IsInstanceOf<GetSocialMemberResponse> (response, "response is GetSocialMemberResponse");
        }
        /// <summary>
        /// Test UpdateMemberPhoto
        /// </summary>
        [Test]
        public void UpdateMemberPhotoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UpdateMemberPhoto();
            //Assert.IsInstanceOf<GetSocialMemberResponse> (response, "response is GetSocialMemberResponse");
        }
        /// <summary>
        /// Test UploadSharedImage
        /// </summary>
        [Test]
        public void UploadSharedImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UploadSharedImage();
            //Assert.IsInstanceOf<SetImageResponse> (response, "response is SetImageResponse");
        }
        /// <summary>
        /// Test UpsertRelationship
        /// </summary>
        [Test]
        public void UpsertRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpsertRelationshipRequest body = null;
            //var response = instance.UpsertRelationship(body);
            //Assert.IsInstanceOf<UpsertRelationshipResponse> (response, "response is UpsertRelationshipResponse");
        }
    }

}
