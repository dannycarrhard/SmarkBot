/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing MethodsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MethodsApiTests
    {
        private MethodsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MethodsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MethodsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MethodsApi
            //Assert.IsInstanceOfType(typeof(MethodsApi), instance, "instance is a MethodsApi");
        }

        /// <summary>
        /// Test CreateBankTransferMethod
        /// </summary>
        [Test]
        public void CreateBankTransferMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body18 body = null;
            //var response = instance.CreateBankTransferMethod(body);
            //Assert.IsInstanceOf<MethodIdResponse> (response, "response is MethodIdResponse");
        }
        /// <summary>
        /// Test CreateNetellerMethod
        /// </summary>
        [Test]
        public void CreateNetellerMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body34 body = null;
            //var response = instance.CreateNetellerMethod(body);
            //Assert.IsInstanceOf<MethodIdResponse> (response, "response is MethodIdResponse");
        }
        /// <summary>
        /// Test CreateOpenBankTransferMethod
        /// </summary>
        [Test]
        public void CreateOpenBankTransferMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body42 body = null;
            //var response = instance.CreateOpenBankTransferMethod(body);
            //Assert.IsInstanceOf<MethodIdResponse> (response, "response is MethodIdResponse");
        }
        /// <summary>
        /// Test CreateSkrillMethod
        /// </summary>
        [Test]
        public void CreateSkrillMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body53 body = null;
            //var response = instance.CreateSkrillMethod(body);
            //Assert.IsInstanceOf<MethodIdResponse> (response, "response is MethodIdResponse");
        }
        /// <summary>
        /// Test DeleteCardMethod
        /// </summary>
        [Test]
        public void DeleteCardMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? methodId = null;
            //var response = instance.DeleteCardMethod(methodId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteOpenBankTransferMethod
        /// </summary>
        [Test]
        public void DeleteOpenBankTransferMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? methodId = null;
            //var response = instance.DeleteOpenBankTransferMethod(methodId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test DeleteWorldpayMethod
        /// </summary>
        [Test]
        public void DeleteWorldpayMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? methodId = null;
            //var response = instance.DeleteWorldpayMethod(methodId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        /// <summary>
        /// Test GetDepositMethods
        /// </summary>
        [Test]
        public void GetDepositMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDepositMethods();
            //Assert.IsInstanceOf<DepositMethodsResponse> (response, "response is DepositMethodsResponse");
        }
        /// <summary>
        /// Test GetOpenBankTransferProviders
        /// </summary>
        [Test]
        public void GetOpenBankTransferProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOpenBankTransferProviders();
            //Assert.IsInstanceOf<InlineResponse20052> (response, "response is InlineResponse20052");
        }
        /// <summary>
        /// Test GetPaymentProviderFeatures
        /// </summary>
        [Test]
        public void GetPaymentProviderFeaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPaymentProviderFeatures();
            //Assert.IsInstanceOf<ProviderFeaturesResponse> (response, "response is ProviderFeaturesResponse");
        }
        /// <summary>
        /// Test GetProviders
        /// </summary>
        [Test]
        public void GetProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodType = null;
            //var response = instance.GetProviders(methodType);
            //Assert.IsInstanceOf<ProvidersResponse> (response, "response is ProvidersResponse");
        }
        /// <summary>
        /// Test GetWithdrawalMethods
        /// </summary>
        [Test]
        public void GetWithdrawalMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWithdrawalMethods();
            //Assert.IsInstanceOf<InlineResponse20068> (response, "response is InlineResponse20068");
        }
        /// <summary>
        /// Test PutCardMethodBillingAddress
        /// </summary>
        [Test]
        public void PutCardMethodBillingAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? methodId = null;
            //MethodAddress body = null;
            //var response = instance.PutCardMethodBillingAddress(methodId, body);
            //Assert.IsInstanceOf<MethodAddress> (response, "response is MethodAddress");
        }
    }

}
