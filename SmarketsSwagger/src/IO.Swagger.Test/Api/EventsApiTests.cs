/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing EventsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EventsApiTests
    {
        private EventsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EventsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EventsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EventsApi
            //Assert.IsInstanceOfType(typeof(EventsApi), instance, "instance is a EventsApi");
        }

        /// <summary>
        /// Test GetEventStates
        /// </summary>
        [Test]
        public void GetEventStatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> eventIds = null;
            //var response = instance.GetEventStates(eventIds);
            //Assert.IsInstanceOf<EventStates> (response, "response is EventStates");
        }
        /// <summary>
        /// Test GetEvents
        /// </summary>
        [Test]
        public void GetEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //bool? inplayEnabled = null;
            //List<string> state = null;
            //List<string> type = null;
            //List<string> typeDomain = null;
            //List<string> typeScope = null;
            //bool? withNewType = null;
            //List<string> parentId = null;
            //DateTime? startDatetimeMin = null;
            //DateTime? startDatetimeMax = null;
            //DateTime? lastModifiedMin = null;
            //DateTime? lastModifiedMax = null;
            //int? paginationLastDisplayOrder = null;
            //DateTime? paginationLastStartDatetime = null;
            //string paginationLastId = null;
            //string paginationLastName = null;
            //string sort = null;
            //int? limit = null;
            //bool? includeHidden = null;
            //string jurisdiction = null;
            //var response = instance.GetEvents(id, inplayEnabled, state, type, typeDomain, typeScope, withNewType, parentId, startDatetimeMin, startDatetimeMax, lastModifiedMin, lastModifiedMax, paginationLastDisplayOrder, paginationLastStartDatetime, paginationLastId, paginationLastName, sort, limit, includeHidden, jurisdiction);
            //Assert.IsInstanceOf<Events> (response, "response is Events");
        }
        /// <summary>
        /// Test GetEventsByIds
        /// </summary>
        [Test]
        public void GetEventsByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> eventIds = null;
            //bool? withNewType = null;
            //bool? includeHidden = null;
            //string jurisdiction = null;
            //var response = instance.GetEventsByIds(eventIds, withNewType, includeHidden, jurisdiction);
            //Assert.IsInstanceOf<Events> (response, "response is Events");
        }
        /// <summary>
        /// Test GetLeagueTable
        /// </summary>
        [Test]
        public void GetLeagueTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? eventId = null;
            //var response = instance.GetLeagueTable(eventId);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        /// <summary>
        /// Test GetStatsMultipleEvents
        /// </summary>
        [Test]
        public void GetStatsMultipleEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> eventIds = null;
            //var response = instance.GetStatsMultipleEvents(eventIds);
            //Assert.IsInstanceOf<MultipleEventStats> (response, "response is MultipleEventStats");
        }
    }

}
