/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing Oauth2Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Oauth2ApiTests
    {
        private Oauth2Api instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Oauth2Api();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Oauth2Api
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' Oauth2Api
            //Assert.IsInstanceOfType(typeof(Oauth2Api), instance, "instance is a Oauth2Api");
        }

        /// <summary>
        /// Test ChangeSecret
        /// </summary>
        [Test]
        public void ChangeSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? clientId = null;
            //Body38 body = null;
            //var response = instance.ChangeSecret(clientId, body);
            //Assert.IsInstanceOf<InlineResponse20048> (response, "response is InlineResponse20048");
        }
        /// <summary>
        /// Test GetClient
        /// </summary>
        [Test]
        public void GetClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? clientId = null;
            //string redirectUri = null;
            //List<string> scopes = null;
            //string state = null;
            //var response = instance.GetClient(clientId, redirectUri, scopes, state);
            //Assert.IsInstanceOf<InlineResponse20047> (response, "response is InlineResponse20047");
        }
        /// <summary>
        /// Test IssueToken
        /// </summary>
        [Test]
        public void IssueTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body40 body = null;
            //var response = instance.IssueToken(body);
            //Assert.IsInstanceOf<InlineResponse20050> (response, "response is InlineResponse20050");
        }
        /// <summary>
        /// Test ProcessAffiliateConsent
        /// </summary>
        [Test]
        public void ProcessAffiliateConsentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body39 body = null;
            //var response = instance.ProcessAffiliateConsent(body);
            //Assert.IsInstanceOf<InlineResponse20049> (response, "response is InlineResponse20049");
        }
    }

}
