/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SessionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SessionsApiTests
    {
        private SessionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SessionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SessionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SessionsApi
            //Assert.IsInstanceOfType(typeof(SessionsApi), instance, "instance is a SessionsApi");
        }

        /// <summary>
        /// Test ConfirmNewLogin
        /// </summary>
        [Test]
        public void ConfirmNewLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body59 body = null;
            //var response = instance.ConfirmNewLogin(body);
            //Assert.IsInstanceOf<InlineResponse20067> (response, "response is InlineResponse20067");
        }
        /// <summary>
        /// Test CreateSession
        /// </summary>
        [Test]
        public void CreateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SessionCreate body = null;
            //var response = instance.CreateSession(body);
            //Assert.IsInstanceOf<TokenResponse> (response, "response is TokenResponse");
        }
        /// <summary>
        /// Test CreateSessionV0
        /// </summary>
        [Test]
        public void CreateSessionV0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body2 body = null;
            //var response = instance.CreateSessionV0(body);
            //Assert.IsInstanceOf<TokenResponse> (response, "response is TokenResponse");
        }
        /// <summary>
        /// Test DeleteCurrentSession
        /// </summary>
        [Test]
        public void DeleteCurrentSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DeleteCurrentSession();
            //Assert.IsInstanceOf<SessionDeleteStatus> (response, "response is SessionDeleteStatus");
        }
        /// <summary>
        /// Test DeleteSession
        /// </summary>
        [Test]
        public void DeleteSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DeleteSession();
            //Assert.IsInstanceOf<InlineResponse20014> (response, "response is InlineResponse20014");
        }
        /// <summary>
        /// Test LoginNemid
        /// </summary>
        [Test]
        public void LoginNemidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NemidLogin body = null;
            //var response = instance.LoginNemid(body);
            //Assert.IsInstanceOf<TokenResponse> (response, "response is TokenResponse");
        }
        /// <summary>
        /// Test LoginNemidV0
        /// </summary>
        [Test]
        public void LoginNemidV0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body3 body = null;
            //var response = instance.LoginNemidV0(body);
            //Assert.IsInstanceOf<TokenResponse> (response, "response is TokenResponse");
        }
        /// <summary>
        /// Test RenewSession
        /// </summary>
        [Test]
        public void RenewSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SessionRenew body = null;
            //var response = instance.RenewSession(body);
            //Assert.IsInstanceOf<SessionRenewStatus> (response, "response is SessionRenewStatus");
        }
        /// <summary>
        /// Test UpdateExpiredSession
        /// </summary>
        [Test]
        public void UpdateExpiredSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UpdateExpiredSession();
            //Assert.IsInstanceOf<SessionUpdateStatus> (response, "response is SessionUpdateStatus");
        }
        /// <summary>
        /// Test UpdateExpiredSessionV0
        /// </summary>
        [Test]
        public void UpdateExpiredSessionV0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UpdateExpiredSessionV0();
            //Assert.IsInstanceOf<InlineResponse20015> (response, "response is InlineResponse20015");
        }
        /// <summary>
        /// Test UpdateSession
        /// </summary>
        [Test]
        public void UpdateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UpdateSession();
            //Assert.IsInstanceOf<SessionUpdateStatusUpdated> (response, "response is SessionUpdateStatusUpdated");
        }
        /// <summary>
        /// Test UpdateSessionV0
        /// </summary>
        [Test]
        public void UpdateSessionV0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UpdateSessionV0();
            //Assert.IsInstanceOf<InlineResponse20014> (response, "response is InlineResponse20014");
        }
        /// <summary>
        /// Test Verify
        /// </summary>
        [Test]
        public void VerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TotpLogin body = null;
            //var response = instance.Verify(body);
            //Assert.IsInstanceOf<TokenResponse> (response, "response is TokenResponse");
        }
        /// <summary>
        /// Test VerifyV0
        /// </summary>
        [Test]
        public void VerifyV0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body4 body = null;
            //var response = instance.VerifyV0(body);
            //Assert.IsInstanceOf<TokenResponse> (response, "response is TokenResponse");
        }
    }

}
