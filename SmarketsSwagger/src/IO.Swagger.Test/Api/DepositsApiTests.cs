/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DepositsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DepositsApiTests
    {
        private DepositsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DepositsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DepositsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DepositsApi
            //Assert.IsInstanceOfType(typeof(DepositsApi), instance, "instance is a DepositsApi");
        }

        /// <summary>
        /// Test CreatePretokenizationDepositWorldpay
        /// </summary>
        [Test]
        public void CreatePretokenizationDepositWorldpayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorldpayPretokenizationRequest body = null;
            //var response = instance.CreatePretokenizationDepositWorldpay(body);
            //Assert.IsInstanceOf<WorldpayPretokenizationResponse> (response, "response is WorldpayPretokenizationResponse");
        }
        /// <summary>
        /// Test DepositCard
        /// </summary>
        [Test]
        public void DepositCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body19 body = null;
            //var response = instance.DepositCard(body);
            //Assert.IsInstanceOf<CardDepositResponse> (response, "response is CardDepositResponse");
        }
        /// <summary>
        /// Test DepositNeteller
        /// </summary>
        [Test]
        public void DepositNetellerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body33 body = null;
            //var response = instance.DepositNeteller(body);
            //Assert.IsInstanceOf<NetellerDepositResponse> (response, "response is NetellerDepositResponse");
        }
        /// <summary>
        /// Test DepositOpenBankTransfer
        /// </summary>
        [Test]
        public void DepositOpenBankTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body41 body = null;
            //var response = instance.DepositOpenBankTransfer(body);
            //Assert.IsInstanceOf<OpenBankTransferDepositResponse> (response, "response is OpenBankTransferDepositResponse");
        }
        /// <summary>
        /// Test DepositPaypal
        /// </summary>
        [Test]
        public void DepositPaypalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body48 body = null;
            //var response = instance.DepositPaypal(body);
            //Assert.IsInstanceOf<PaypalDepositResponse> (response, "response is PaypalDepositResponse");
        }
        /// <summary>
        /// Test DepositSkrill
        /// </summary>
        [Test]
        public void DepositSkrillTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body52 body = null;
            //var response = instance.DepositSkrill(body);
            //Assert.IsInstanceOf<SkrillDepositResponse> (response, "response is SkrillDepositResponse");
        }
        /// <summary>
        /// Test DepositTrustly
        /// </summary>
        [Test]
        public void DepositTrustlyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Body56 body = null;
            //var response = instance.DepositTrustly(body);
            //Assert.IsInstanceOf<TrustlyDepositResponse> (response, "response is TrustlyDepositResponse");
        }
        /// <summary>
        /// Test DepositWithRegistrationIdWorldpay
        /// </summary>
        [Test]
        public void DepositWithRegistrationIdWorldpayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorldpayRegistrationIdDepositRequest body = null;
            //var response = instance.DepositWithRegistrationIdWorldpay(body);
            //Assert.IsInstanceOf<WorldpayDepositResponse> (response, "response is WorldpayDepositResponse");
        }
        /// <summary>
        /// Test DepositWorldpay
        /// </summary>
        [Test]
        public void DepositWorldpayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorldpayDepositRequest body = null;
            //var response = instance.DepositWorldpay(body);
            //Assert.IsInstanceOf<WorldpayDepositResponse> (response, "response is WorldpayDepositResponse");
        }
        /// <summary>
        /// Test GetFirstDepositBonusConditions
        /// </summary>
        [Test]
        public void GetFirstDepositBonusConditionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetFirstDepositBonusConditions();
            //Assert.IsInstanceOf<DepositBonusConditionsResponse> (response, "response is DepositBonusConditionsResponse");
        }
        /// <summary>
        /// Test GetOpenBankTransferDepositState
        /// </summary>
        [Test]
        public void GetOpenBankTransferDepositStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string providerReference = null;
            //var response = instance.GetOpenBankTransferDepositState(providerReference);
            //Assert.IsInstanceOf<DepositStateResponse> (response, "response is DepositStateResponse");
        }
        /// <summary>
        /// Test GetPaypalClientToken
        /// </summary>
        [Test]
        public void GetPaypalClientTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPaypalClientToken();
            //Assert.IsInstanceOf<ClientToken> (response, "response is ClientToken");
        }
        /// <summary>
        /// Test GetSkrillDepositState
        /// </summary>
        [Test]
        public void GetSkrillDepositStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transactionId = null;
            //string skrillSignature = null;
            //var response = instance.GetSkrillDepositState(transactionId, skrillSignature);
            //Assert.IsInstanceOf<DepositStateResponse> (response, "response is DepositStateResponse");
        }
        /// <summary>
        /// Test PostCardToken
        /// </summary>
        [Test]
        public void PostCardTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CardToken body = null;
            //var response = instance.PostCardToken(body);
            //Assert.IsInstanceOf<CardToken> (response, "response is CardToken");
        }
    }

}
