/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPricesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve contract executions data, over a time window.
        /// </summary>
        /// <remarks>
        /// ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <param name="timestampGe"> (optional)</param>
        /// <param name="timestampLt"> (optional)</param>
        /// <returns>PriceSeries</returns>
        PriceSeries GetExecutionsTimeSeries (List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null, DateTime? timestampGe = null, DateTime? timestampLt = null);

        /// <summary>
        /// Retrieve contract executions data, over a time window.
        /// </summary>
        /// <remarks>
        /// ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <param name="timestampGe"> (optional)</param>
        /// <param name="timestampLt"> (optional)</param>
        /// <returns>ApiResponse of PriceSeries</returns>
        ApiResponse<PriceSeries> GetExecutionsTimeSeriesWithHttpInfo (List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null, DateTime? timestampGe = null, DateTime? timestampLt = null);
        /// <summary>
        /// Retrieve the last executed price and timestamp for each contract in the market ids provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:100</param>
        /// <returns>LastExecutedPricesByMarketResponse</returns>
        LastExecutedPricesByMarketResponse GetLastExecutedPricesByMarket (List<int?> marketIds);

        /// <summary>
        /// Retrieve the last executed price and timestamp for each contract in the market ids provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:100</param>
        /// <returns>ApiResponse of LastExecutedPricesByMarketResponse</returns>
        ApiResponse<LastExecutedPricesByMarketResponse> GetLastExecutedPricesByMarketWithHttpInfo (List<int?> marketIds);
        /// <summary>
        /// Retrieve contract executions data, over a time window.
        /// </summary>
        /// <remarks>
        /// ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="marketId"></param>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <returns>ExecutionsTimeSeriesResponse</returns>
        ExecutionsTimeSeriesResponse GetMdsCharts (int? eventId, int? marketId, List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null);

        /// <summary>
        /// Retrieve contract executions data, over a time window.
        /// </summary>
        /// <remarks>
        /// ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="marketId"></param>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <returns>ApiResponse of ExecutionsTimeSeriesResponse</returns>
        ApiResponse<ExecutionsTimeSeriesResponse> GetMdsChartsWithHttpInfo (int? eventId, int? marketId, List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null);
        /// <summary>
        /// Get the current prices from the exchange.
        /// </summary>
        /// <remarks>
        /// ## Description If session token is not sent, these prices will be delayed.&lt;br&gt;&lt;br&gt; The rate limits below are applicable to API users. The rate limits for non-API users are lower.  ##  Rate limits Maximum 50 requests per 60 seconds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:200</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GetQuotes (List<int?> marketIds);

        /// <summary>
        /// Get the current prices from the exchange.
        /// </summary>
        /// <remarks>
        /// ## Description If session token is not sent, these prices will be delayed.&lt;br&gt;&lt;br&gt; The rate limits below are applicable to API users. The rate limits for non-API users are lower.  ##  Rate limits Maximum 50 requests per 60 seconds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:200</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GetQuotesWithHttpInfo (List<int?> marketIds);
        /// <summary>
        /// Retrieve the most recent trades for each contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">Contract IDs to filter by&lt;br&gt;maxItems:300</param>
        /// <returns>RecentTrades</returns>
        RecentTrades GetRecentTrades (List<int?> contractIds);

        /// <summary>
        /// Retrieve the most recent trades for each contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">Contract IDs to filter by&lt;br&gt;maxItems:300</param>
        /// <returns>ApiResponse of RecentTrades</returns>
        ApiResponse<RecentTrades> GetRecentTradesWithHttpInfo (List<int?> contractIds);
        /// <summary>
        /// Retrieve starting price (at the off) and timestamp for each contract in the market ids provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">maxItems:300</param>
        /// <returns>StartingPricesByMarketResponse</returns>
        StartingPricesByMarketResponse GetStartPricesByMarket (List<int?> marketIds);

        /// <summary>
        /// Retrieve starting price (at the off) and timestamp for each contract in the market ids provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">maxItems:300</param>
        /// <returns>ApiResponse of StartingPricesByMarketResponse</returns>
        ApiResponse<StartingPricesByMarketResponse> GetStartPricesByMarketWithHttpInfo (List<int?> marketIds);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve contract executions data, over a time window.
        /// </summary>
        /// <remarks>
        /// ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <param name="timestampGe"> (optional)</param>
        /// <param name="timestampLt"> (optional)</param>
        /// <returns>Task of PriceSeries</returns>
        System.Threading.Tasks.Task<PriceSeries> GetExecutionsTimeSeriesAsync (List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null, DateTime? timestampGe = null, DateTime? timestampLt = null);

        /// <summary>
        /// Retrieve contract executions data, over a time window.
        /// </summary>
        /// <remarks>
        /// ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <param name="timestampGe"> (optional)</param>
        /// <param name="timestampLt"> (optional)</param>
        /// <returns>Task of ApiResponse (PriceSeries)</returns>
        System.Threading.Tasks.Task<ApiResponse<PriceSeries>> GetExecutionsTimeSeriesAsyncWithHttpInfo (List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null, DateTime? timestampGe = null, DateTime? timestampLt = null);
        /// <summary>
        /// Retrieve the last executed price and timestamp for each contract in the market ids provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:100</param>
        /// <returns>Task of LastExecutedPricesByMarketResponse</returns>
        System.Threading.Tasks.Task<LastExecutedPricesByMarketResponse> GetLastExecutedPricesByMarketAsync (List<int?> marketIds);

        /// <summary>
        /// Retrieve the last executed price and timestamp for each contract in the market ids provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:100</param>
        /// <returns>Task of ApiResponse (LastExecutedPricesByMarketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LastExecutedPricesByMarketResponse>> GetLastExecutedPricesByMarketAsyncWithHttpInfo (List<int?> marketIds);
        /// <summary>
        /// Retrieve contract executions data, over a time window.
        /// </summary>
        /// <remarks>
        /// ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="marketId"></param>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <returns>Task of ExecutionsTimeSeriesResponse</returns>
        System.Threading.Tasks.Task<ExecutionsTimeSeriesResponse> GetMdsChartsAsync (int? eventId, int? marketId, List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null);

        /// <summary>
        /// Retrieve contract executions data, over a time window.
        /// </summary>
        /// <remarks>
        /// ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="marketId"></param>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <returns>Task of ApiResponse (ExecutionsTimeSeriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecutionsTimeSeriesResponse>> GetMdsChartsAsyncWithHttpInfo (int? eventId, int? marketId, List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null);
        /// <summary>
        /// Get the current prices from the exchange.
        /// </summary>
        /// <remarks>
        /// ## Description If session token is not sent, these prices will be delayed.&lt;br&gt;&lt;br&gt; The rate limits below are applicable to API users. The rate limits for non-API users are lower.  ##  Rate limits Maximum 50 requests per 60 seconds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:200</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GetQuotesAsync (List<int?> marketIds);

        /// <summary>
        /// Get the current prices from the exchange.
        /// </summary>
        /// <remarks>
        /// ## Description If session token is not sent, these prices will be delayed.&lt;br&gt;&lt;br&gt; The rate limits below are applicable to API users. The rate limits for non-API users are lower.  ##  Rate limits Maximum 50 requests per 60 seconds
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:200</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetQuotesAsyncWithHttpInfo (List<int?> marketIds);
        /// <summary>
        /// Retrieve the most recent trades for each contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">Contract IDs to filter by&lt;br&gt;maxItems:300</param>
        /// <returns>Task of RecentTrades</returns>
        System.Threading.Tasks.Task<RecentTrades> GetRecentTradesAsync (List<int?> contractIds);

        /// <summary>
        /// Retrieve the most recent trades for each contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">Contract IDs to filter by&lt;br&gt;maxItems:300</param>
        /// <returns>Task of ApiResponse (RecentTrades)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecentTrades>> GetRecentTradesAsyncWithHttpInfo (List<int?> contractIds);
        /// <summary>
        /// Retrieve starting price (at the off) and timestamp for each contract in the market ids provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">maxItems:300</param>
        /// <returns>Task of StartingPricesByMarketResponse</returns>
        System.Threading.Tasks.Task<StartingPricesByMarketResponse> GetStartPricesByMarketAsync (List<int?> marketIds);

        /// <summary>
        /// Retrieve starting price (at the off) and timestamp for each contract in the market ids provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">maxItems:300</param>
        /// <returns>Task of ApiResponse (StartingPricesByMarketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartingPricesByMarketResponse>> GetStartPricesByMarketAsyncWithHttpInfo (List<int?> marketIds);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PricesApi : IPricesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class
        /// </summary>
        /// <returns></returns>
        public PricesApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PricesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve contract executions data, over a time window. ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <param name="timestampGe"> (optional)</param>
        /// <param name="timestampLt"> (optional)</param>
        /// <returns>PriceSeries</returns>
        public PriceSeries GetExecutionsTimeSeries (List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null, DateTime? timestampGe = null, DateTime? timestampLt = null)
        {
             ApiResponse<PriceSeries> localVarResponse = GetExecutionsTimeSeriesWithHttpInfo(contractIds, dataPoints, timestampMin, timestampMax, timestampGe, timestampLt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve contract executions data, over a time window. ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <param name="timestampGe"> (optional)</param>
        /// <param name="timestampLt"> (optional)</param>
        /// <returns>ApiResponse of PriceSeries</returns>
        public ApiResponse< PriceSeries > GetExecutionsTimeSeriesWithHttpInfo (List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null, DateTime? timestampGe = null, DateTime? timestampLt = null)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling PricesApi->GetExecutionsTimeSeries");

            var localVarPath = "/v3/contracts/{contract_ids}/executions_time_series/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (dataPoints != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "data_points", dataPoints)); // query parameter
            if (timestampMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_min", timestampMin)); // query parameter
            if (timestampMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_max", timestampMax)); // query parameter
            if (timestampGe != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_ge", timestampGe)); // query parameter
            if (timestampLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_lt", timestampLt)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutionsTimeSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PriceSeries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PriceSeries) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PriceSeries)));
        }

        /// <summary>
        /// Retrieve contract executions data, over a time window. ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <param name="timestampGe"> (optional)</param>
        /// <param name="timestampLt"> (optional)</param>
        /// <returns>Task of PriceSeries</returns>
        public async System.Threading.Tasks.Task<PriceSeries> GetExecutionsTimeSeriesAsync (List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null, DateTime? timestampGe = null, DateTime? timestampLt = null)
        {
             ApiResponse<PriceSeries> localVarResponse = await GetExecutionsTimeSeriesAsyncWithHttpInfo(contractIds, dataPoints, timestampMin, timestampMax, timestampGe, timestampLt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve contract executions data, over a time window. ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <param name="timestampGe"> (optional)</param>
        /// <param name="timestampLt"> (optional)</param>
        /// <returns>Task of ApiResponse (PriceSeries)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PriceSeries>> GetExecutionsTimeSeriesAsyncWithHttpInfo (List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null, DateTime? timestampGe = null, DateTime? timestampLt = null)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling PricesApi->GetExecutionsTimeSeries");

            var localVarPath = "/v3/contracts/{contract_ids}/executions_time_series/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (dataPoints != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "data_points", dataPoints)); // query parameter
            if (timestampMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_min", timestampMin)); // query parameter
            if (timestampMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_max", timestampMax)); // query parameter
            if (timestampGe != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_ge", timestampGe)); // query parameter
            if (timestampLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_lt", timestampLt)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutionsTimeSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PriceSeries>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PriceSeries) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PriceSeries)));
        }

        /// <summary>
        /// Retrieve the last executed price and timestamp for each contract in the market ids provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:100</param>
        /// <returns>LastExecutedPricesByMarketResponse</returns>
        public LastExecutedPricesByMarketResponse GetLastExecutedPricesByMarket (List<int?> marketIds)
        {
             ApiResponse<LastExecutedPricesByMarketResponse> localVarResponse = GetLastExecutedPricesByMarketWithHttpInfo(marketIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the last executed price and timestamp for each contract in the market ids provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:100</param>
        /// <returns>ApiResponse of LastExecutedPricesByMarketResponse</returns>
        public ApiResponse< LastExecutedPricesByMarketResponse > GetLastExecutedPricesByMarketWithHttpInfo (List<int?> marketIds)
        {
            // verify the required parameter 'marketIds' is set
            if (marketIds == null)
                throw new ApiException(400, "Missing required parameter 'marketIds' when calling PricesApi->GetLastExecutedPricesByMarket");

            var localVarPath = "/v3/markets/{market_ids}/last_executed_prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketIds != null) localVarPathParams.Add("market_ids", this.Configuration.ApiClient.ParameterToString(marketIds)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLastExecutedPricesByMarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LastExecutedPricesByMarketResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LastExecutedPricesByMarketResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LastExecutedPricesByMarketResponse)));
        }

        /// <summary>
        /// Retrieve the last executed price and timestamp for each contract in the market ids provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:100</param>
        /// <returns>Task of LastExecutedPricesByMarketResponse</returns>
        public async System.Threading.Tasks.Task<LastExecutedPricesByMarketResponse> GetLastExecutedPricesByMarketAsync (List<int?> marketIds)
        {
             ApiResponse<LastExecutedPricesByMarketResponse> localVarResponse = await GetLastExecutedPricesByMarketAsyncWithHttpInfo(marketIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the last executed price and timestamp for each contract in the market ids provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:100</param>
        /// <returns>Task of ApiResponse (LastExecutedPricesByMarketResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LastExecutedPricesByMarketResponse>> GetLastExecutedPricesByMarketAsyncWithHttpInfo (List<int?> marketIds)
        {
            // verify the required parameter 'marketIds' is set
            if (marketIds == null)
                throw new ApiException(400, "Missing required parameter 'marketIds' when calling PricesApi->GetLastExecutedPricesByMarket");

            var localVarPath = "/v3/markets/{market_ids}/last_executed_prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketIds != null) localVarPathParams.Add("market_ids", this.Configuration.ApiClient.ParameterToString(marketIds)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLastExecutedPricesByMarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LastExecutedPricesByMarketResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LastExecutedPricesByMarketResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LastExecutedPricesByMarketResponse)));
        }

        /// <summary>
        /// Retrieve contract executions data, over a time window. ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="marketId"></param>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <returns>ExecutionsTimeSeriesResponse</returns>
        public ExecutionsTimeSeriesResponse GetMdsCharts (int? eventId, int? marketId, List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null)
        {
             ApiResponse<ExecutionsTimeSeriesResponse> localVarResponse = GetMdsChartsWithHttpInfo(eventId, marketId, contractIds, dataPoints, timestampMin, timestampMax);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve contract executions data, over a time window. ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="marketId"></param>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <returns>ApiResponse of ExecutionsTimeSeriesResponse</returns>
        public ApiResponse< ExecutionsTimeSeriesResponse > GetMdsChartsWithHttpInfo (int? eventId, int? marketId, List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling PricesApi->GetMdsCharts");
            // verify the required parameter 'marketId' is set
            if (marketId == null)
                throw new ApiException(400, "Missing required parameter 'marketId' when calling PricesApi->GetMdsCharts");
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling PricesApi->GetMdsCharts");

            var localVarPath = "/v3/events/{event_id}/markets/{market_id}/contracts/{contract_ids}/executions_time_series/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("event_id", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (marketId != null) localVarPathParams.Add("market_id", this.Configuration.ApiClient.ParameterToString(marketId)); // path parameter
            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (dataPoints != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "data_points", dataPoints)); // query parameter
            if (timestampMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_min", timestampMin)); // query parameter
            if (timestampMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_max", timestampMax)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMdsCharts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutionsTimeSeriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecutionsTimeSeriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutionsTimeSeriesResponse)));
        }

        /// <summary>
        /// Retrieve contract executions data, over a time window. ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="marketId"></param>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <returns>Task of ExecutionsTimeSeriesResponse</returns>
        public async System.Threading.Tasks.Task<ExecutionsTimeSeriesResponse> GetMdsChartsAsync (int? eventId, int? marketId, List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null)
        {
             ApiResponse<ExecutionsTimeSeriesResponse> localVarResponse = await GetMdsChartsAsyncWithHttpInfo(eventId, marketId, contractIds, dataPoints, timestampMin, timestampMax);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve contract executions data, over a time window. ## Description This can be used to populate charts. The number of data points to receive is configurable and the size of the time buckets over the time range is automatically adjusted. In order to get a round-looking time series you must specify an appropriate number of data points for the time range. The requester can ask for price data for up to MAX_CONTRACTS contracts at a time. If there is no data over a time bucket then the data will be returned as null.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="marketId"></param>
        /// <param name="contractIds">maxItems:20</param>
        /// <param name="dataPoints"> (optional)</param>
        /// <param name="timestampMin"> (optional)</param>
        /// <param name="timestampMax"> (optional)</param>
        /// <returns>Task of ApiResponse (ExecutionsTimeSeriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecutionsTimeSeriesResponse>> GetMdsChartsAsyncWithHttpInfo (int? eventId, int? marketId, List<int?> contractIds, int? dataPoints = null, DateTime? timestampMin = null, DateTime? timestampMax = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling PricesApi->GetMdsCharts");
            // verify the required parameter 'marketId' is set
            if (marketId == null)
                throw new ApiException(400, "Missing required parameter 'marketId' when calling PricesApi->GetMdsCharts");
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling PricesApi->GetMdsCharts");

            var localVarPath = "/v3/events/{event_id}/markets/{market_id}/contracts/{contract_ids}/executions_time_series/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("event_id", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (marketId != null) localVarPathParams.Add("market_id", this.Configuration.ApiClient.ParameterToString(marketId)); // path parameter
            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (dataPoints != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "data_points", dataPoints)); // query parameter
            if (timestampMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_min", timestampMin)); // query parameter
            if (timestampMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp_max", timestampMax)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMdsCharts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutionsTimeSeriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecutionsTimeSeriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutionsTimeSeriesResponse)));
        }

        /// <summary>
        /// Get the current prices from the exchange. ## Description If session token is not sent, these prices will be delayed.&lt;br&gt;&lt;br&gt; The rate limits below are applicable to API users. The rate limits for non-API users are lower.  ##  Rate limits Maximum 50 requests per 60 seconds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:200</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GetQuotes (List<int?> marketIds)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GetQuotesWithHttpInfo(marketIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current prices from the exchange. ## Description If session token is not sent, these prices will be delayed.&lt;br&gt;&lt;br&gt; The rate limits below are applicable to API users. The rate limits for non-API users are lower.  ##  Rate limits Maximum 50 requests per 60 seconds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:200</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GetQuotesWithHttpInfo (List<int?> marketIds)
        {
            // verify the required parameter 'marketIds' is set
            if (marketIds == null)
                throw new ApiException(400, "Missing required parameter 'marketIds' when calling PricesApi->GetQuotes");

            var localVarPath = "/v3/markets/{market_ids}/quotes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketIds != null) localVarPathParams.Add("market_ids", this.Configuration.ApiClient.ParameterToString(marketIds)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Get the current prices from the exchange. ## Description If session token is not sent, these prices will be delayed.&lt;br&gt;&lt;br&gt; The rate limits below are applicable to API users. The rate limits for non-API users are lower.  ##  Rate limits Maximum 50 requests per 60 seconds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:200</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GetQuotesAsync (List<int?> marketIds)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GetQuotesAsyncWithHttpInfo(marketIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current prices from the exchange. ## Description If session token is not sent, these prices will be delayed.&lt;br&gt;&lt;br&gt; The rate limits below are applicable to API users. The rate limits for non-API users are lower.  ##  Rate limits Maximum 50 requests per 60 seconds
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">Market IDs to filter by&lt;br&gt;maxItems:200</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetQuotesAsyncWithHttpInfo (List<int?> marketIds)
        {
            // verify the required parameter 'marketIds' is set
            if (marketIds == null)
                throw new ApiException(400, "Missing required parameter 'marketIds' when calling PricesApi->GetQuotes");

            var localVarPath = "/v3/markets/{market_ids}/quotes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketIds != null) localVarPathParams.Add("market_ids", this.Configuration.ApiClient.ParameterToString(marketIds)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Retrieve the most recent trades for each contract. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">Contract IDs to filter by&lt;br&gt;maxItems:300</param>
        /// <returns>RecentTrades</returns>
        public RecentTrades GetRecentTrades (List<int?> contractIds)
        {
             ApiResponse<RecentTrades> localVarResponse = GetRecentTradesWithHttpInfo(contractIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the most recent trades for each contract. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">Contract IDs to filter by&lt;br&gt;maxItems:300</param>
        /// <returns>ApiResponse of RecentTrades</returns>
        public ApiResponse< RecentTrades > GetRecentTradesWithHttpInfo (List<int?> contractIds)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling PricesApi->GetRecentTrades");

            var localVarPath = "/v3/contracts/{contract_ids}/recent_trades/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecentTrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecentTrades>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecentTrades) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecentTrades)));
        }

        /// <summary>
        /// Retrieve the most recent trades for each contract. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">Contract IDs to filter by&lt;br&gt;maxItems:300</param>
        /// <returns>Task of RecentTrades</returns>
        public async System.Threading.Tasks.Task<RecentTrades> GetRecentTradesAsync (List<int?> contractIds)
        {
             ApiResponse<RecentTrades> localVarResponse = await GetRecentTradesAsyncWithHttpInfo(contractIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the most recent trades for each contract. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">Contract IDs to filter by&lt;br&gt;maxItems:300</param>
        /// <returns>Task of ApiResponse (RecentTrades)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecentTrades>> GetRecentTradesAsyncWithHttpInfo (List<int?> contractIds)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling PricesApi->GetRecentTrades");

            var localVarPath = "/v3/contracts/{contract_ids}/recent_trades/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecentTrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecentTrades>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RecentTrades) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecentTrades)));
        }

        /// <summary>
        /// Retrieve starting price (at the off) and timestamp for each contract in the market ids provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">maxItems:300</param>
        /// <returns>StartingPricesByMarketResponse</returns>
        public StartingPricesByMarketResponse GetStartPricesByMarket (List<int?> marketIds)
        {
             ApiResponse<StartingPricesByMarketResponse> localVarResponse = GetStartPricesByMarketWithHttpInfo(marketIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve starting price (at the off) and timestamp for each contract in the market ids provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">maxItems:300</param>
        /// <returns>ApiResponse of StartingPricesByMarketResponse</returns>
        public ApiResponse< StartingPricesByMarketResponse > GetStartPricesByMarketWithHttpInfo (List<int?> marketIds)
        {
            // verify the required parameter 'marketIds' is set
            if (marketIds == null)
                throw new ApiException(400, "Missing required parameter 'marketIds' when calling PricesApi->GetStartPricesByMarket");

            var localVarPath = "/v3/markets/{market_ids}/starting_prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketIds != null) localVarPathParams.Add("market_ids", this.Configuration.ApiClient.ParameterToString(marketIds)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartPricesByMarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartingPricesByMarketResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StartingPricesByMarketResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartingPricesByMarketResponse)));
        }

        /// <summary>
        /// Retrieve starting price (at the off) and timestamp for each contract in the market ids provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">maxItems:300</param>
        /// <returns>Task of StartingPricesByMarketResponse</returns>
        public async System.Threading.Tasks.Task<StartingPricesByMarketResponse> GetStartPricesByMarketAsync (List<int?> marketIds)
        {
             ApiResponse<StartingPricesByMarketResponse> localVarResponse = await GetStartPricesByMarketAsyncWithHttpInfo(marketIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve starting price (at the off) and timestamp for each contract in the market ids provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIds">maxItems:300</param>
        /// <returns>Task of ApiResponse (StartingPricesByMarketResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StartingPricesByMarketResponse>> GetStartPricesByMarketAsyncWithHttpInfo (List<int?> marketIds)
        {
            // verify the required parameter 'marketIds' is set
            if (marketIds == null)
                throw new ApiException(400, "Missing required parameter 'marketIds' when calling PricesApi->GetStartPricesByMarket");

            var localVarPath = "/v3/markets/{market_ids}/starting_prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketIds != null) localVarPathParams.Add("market_ids", this.Configuration.ApiClient.ParameterToString(marketIds)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStartPricesByMarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartingPricesByMarketResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StartingPricesByMarketResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartingPricesByMarketResponse)));
        }

    }
}
