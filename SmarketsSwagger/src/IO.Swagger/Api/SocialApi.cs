/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISocialApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>PostCommentResponse</returns>
        PostCommentResponse CreateComment (PostCommentsRequest body = null);

        /// <summary>
        /// Create a new comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of PostCommentResponse</returns>
        ApiResponse<PostCommentResponse> CreateCommentWithHttpInfo (PostCommentsRequest body = null);
        /// <summary>
        /// Create a new social member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>CreateSocialMemberResponse</returns>
        CreateSocialMemberResponse CreateMember (CreateSocialMemberRequest body = null);

        /// <summary>
        /// Create a new social member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of CreateSocialMemberResponse</returns>
        ApiResponse<CreateSocialMemberResponse> CreateMemberWithHttpInfo (CreateSocialMemberRequest body = null);
        /// <summary>
        /// Add a reaction to a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Object</returns>
        Object CreateReaction (int? commentId, int? emojiId);

        /// <summary>
        /// Add a reaction to a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateReactionWithHttpInfo (int? commentId, int? emojiId);
        /// <summary>
        /// Delete a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <returns>Object</returns>
        Object DeleteComment (int? commentId);

        /// <summary>
        /// Delete a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteCommentWithHttpInfo (int? commentId);
        /// <summary>
        /// Delete the current one-way relationship from between the two members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromMemberId"></param>
        /// <param name="toMemberId"></param>
        /// <returns>Object</returns>
        Object DeleteMemberRelationship (int? fromMemberId, int? toMemberId);

        /// <summary>
        /// Delete the current one-way relationship from between the two members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromMemberId"></param>
        /// <param name="toMemberId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteMemberRelationshipWithHttpInfo (int? fromMemberId, int? toMemberId);
        /// <summary>
        /// Remove a reaction to a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Object</returns>
        Object DeleteReaction (int? commentId, int? emojiId);

        /// <summary>
        /// Remove a reaction to a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteReactionWithHttpInfo (int? commentId, int? emojiId);
        /// <summary>
        /// Get a list of top-level comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentIds"> (optional)</param>
        /// <param name="eventIds">Event IDs to filter by (optional)</param>
        /// <param name="memberIds"> (optional)</param>
        /// <param name="parentCommentIds"> (optional)</param>
        /// <param name="typeFilter"> (optional)</param>
        /// <param name="includeReplies"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <param name="paginationLastCreated"> (optional)</param>
        /// <returns>GetCommentsReponse</returns>
        GetCommentsReponse GetComments (List<int?> commentIds = null, List<string> eventIds = null, List<int?> memberIds = null, List<int?> parentCommentIds = null, string typeFilter = null, bool? includeReplies = null, int? limit = null, int? paginationLastId = null, string paginationLastCreated = null);

        /// <summary>
        /// Get a list of top-level comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentIds"> (optional)</param>
        /// <param name="eventIds">Event IDs to filter by (optional)</param>
        /// <param name="memberIds"> (optional)</param>
        /// <param name="parentCommentIds"> (optional)</param>
        /// <param name="typeFilter"> (optional)</param>
        /// <param name="includeReplies"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <param name="paginationLastCreated"> (optional)</param>
        /// <returns>ApiResponse of GetCommentsReponse</returns>
        ApiResponse<GetCommentsReponse> GetCommentsWithHttpInfo (List<int?> commentIds = null, List<string> eventIds = null, List<int?> memberIds = null, List<int?> parentCommentIds = null, string typeFilter = null, bool? includeReplies = null, int? limit = null, int? paginationLastId = null, string paginationLastCreated = null);
        /// <summary>
        /// Get the current member logged in.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSocialMemberResponse</returns>
        GetSocialMemberResponse GetCurrentMember ();

        /// <summary>
        /// Get the current member logged in.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSocialMemberResponse</returns>
        ApiResponse<GetSocialMemberResponse> GetCurrentMemberWithHttpInfo ();
        /// <summary>
        /// Get the ids following the specified member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>GetFollowersResponse</returns>
        GetFollowersResponse GetFollowers (int? memberId);

        /// <summary>
        /// Get the ids following the specified member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>ApiResponse of GetFollowersResponse</returns>
        ApiResponse<GetFollowersResponse> GetFollowersWithHttpInfo (int? memberId);
        /// <summary>
        /// Get the ids the specified member is following.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>GetFollowingResponse</returns>
        GetFollowingResponse GetFollowing (int? memberId);

        /// <summary>
        /// Get the ids the specified member is following.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>ApiResponse of GetFollowingResponse</returns>
        ApiResponse<GetFollowingResponse> GetFollowingWithHttpInfo (int? memberId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <param name="seen"> (optional)</param>
        /// <returns>GetActivityResponse</returns>
        GetActivityResponse GetMemberActivity (int? lastId = null, bool? seen = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <param name="seen"> (optional)</param>
        /// <returns>ApiResponse of GetActivityResponse</returns>
        ApiResponse<GetActivityResponse> GetMemberActivityWithHttpInfo (int? lastId = null, bool? seen = null);
        /// <summary>
        /// Get members that share the relationship specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"> (optional)</param>
        /// <returns>GetSocialMemberRelationshipResponse</returns>
        GetSocialMemberRelationshipResponse GetMemberRelationships (List<string> fields = null);

        /// <summary>
        /// Get members that share the relationship specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of GetSocialMemberRelationshipResponse</returns>
        ApiResponse<GetSocialMemberRelationshipResponse> GetMemberRelationshipsWithHttpInfo (List<string> fields = null);
        /// <summary>
        /// Get a list of social members by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds">maxItems:300</param>
        /// <returns>GetSocialMemberResponse</returns>
        GetSocialMemberResponse GetMembers (List<int?> memberIds);

        /// <summary>
        /// Get a list of social members by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds">maxItems:300</param>
        /// <returns>ApiResponse of GetSocialMemberResponse</returns>
        ApiResponse<GetSocialMemberResponse> GetMembersWithHttpInfo (List<int?> memberIds);
        /// <summary>
        /// Get the bet stats for a list of members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds"></param>
        /// <returns>InlineResponse20064</returns>
        InlineResponse20064 GetMembersBetStats (List<int?> memberIds);

        /// <summary>
        /// Get the bet stats for a list of members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds"></param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        ApiResponse<InlineResponse20064> GetMembersBetStatsWithHttpInfo (List<int?> memberIds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUnreadActivityCountResponse</returns>
        GetUnreadActivityCountResponse GetUnreadActivityCount ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUnreadActivityCountResponse</returns>
        ApiResponse<GetUnreadActivityCountResponse> GetUnreadActivityCountWithHttpInfo ();
        /// <summary>
        /// Retrieve members based on filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <returns>GetSocialMemberResponse</returns>
        GetSocialMemberResponse SearchMembers (string displayName = null, string username = null, int? limit = null, int? paginationLastId = null);

        /// <summary>
        /// Retrieve members based on filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <returns>ApiResponse of GetSocialMemberResponse</returns>
        ApiResponse<GetSocialMemberResponse> SearchMembersWithHttpInfo (string displayName = null, string username = null, int? limit = null, int? paginationLastId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Object</returns>
        Object SetActivityRead (SetActivityReadRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetActivityReadWithHttpInfo (SetActivityReadRequest body = null);
        /// <summary>
        /// Update member data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>GetSocialMemberResponse</returns>
        GetSocialMemberResponse UpdateMember (UpdateMemberRequest body = null);

        /// <summary>
        /// Update member data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of GetSocialMemberResponse</returns>
        ApiResponse<GetSocialMemberResponse> UpdateMemberWithHttpInfo (UpdateMemberRequest body = null);
        /// <summary>
        /// Update the member&#x27;s photo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSocialMemberResponse</returns>
        GetSocialMemberResponse UpdateMemberPhoto ();

        /// <summary>
        /// Update the member&#x27;s photo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSocialMemberResponse</returns>
        ApiResponse<GetSocialMemberResponse> UpdateMemberPhotoWithHttpInfo ();
        /// <summary>
        /// Upload an image.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 5 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SetImageResponse</returns>
        SetImageResponse UploadSharedImage ();

        /// <summary>
        /// Upload an image.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 5 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SetImageResponse</returns>
        ApiResponse<SetImageResponse> UploadSharedImageWithHttpInfo ();
        /// <summary>
        /// Upsert the member&#x27;s relationship to the targeted member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>UpsertRelationshipResponse</returns>
        UpsertRelationshipResponse UpsertRelationship (UpsertRelationshipRequest body = null);

        /// <summary>
        /// Upsert the member&#x27;s relationship to the targeted member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of UpsertRelationshipResponse</returns>
        ApiResponse<UpsertRelationshipResponse> UpsertRelationshipWithHttpInfo (UpsertRelationshipRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of PostCommentResponse</returns>
        System.Threading.Tasks.Task<PostCommentResponse> CreateCommentAsync (PostCommentsRequest body = null);

        /// <summary>
        /// Create a new comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (PostCommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostCommentResponse>> CreateCommentAsyncWithHttpInfo (PostCommentsRequest body = null);
        /// <summary>
        /// Create a new social member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of CreateSocialMemberResponse</returns>
        System.Threading.Tasks.Task<CreateSocialMemberResponse> CreateMemberAsync (CreateSocialMemberRequest body = null);

        /// <summary>
        /// Create a new social member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (CreateSocialMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSocialMemberResponse>> CreateMemberAsyncWithHttpInfo (CreateSocialMemberRequest body = null);
        /// <summary>
        /// Add a reaction to a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateReactionAsync (int? commentId, int? emojiId);

        /// <summary>
        /// Add a reaction to a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateReactionAsyncWithHttpInfo (int? commentId, int? emojiId);
        /// <summary>
        /// Delete a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteCommentAsync (int? commentId);

        /// <summary>
        /// Delete a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommentAsyncWithHttpInfo (int? commentId);
        /// <summary>
        /// Delete the current one-way relationship from between the two members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromMemberId"></param>
        /// <param name="toMemberId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteMemberRelationshipAsync (int? fromMemberId, int? toMemberId);

        /// <summary>
        /// Delete the current one-way relationship from between the two members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromMemberId"></param>
        /// <param name="toMemberId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMemberRelationshipAsyncWithHttpInfo (int? fromMemberId, int? toMemberId);
        /// <summary>
        /// Remove a reaction to a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteReactionAsync (int? commentId, int? emojiId);

        /// <summary>
        /// Remove a reaction to a comment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReactionAsyncWithHttpInfo (int? commentId, int? emojiId);
        /// <summary>
        /// Get a list of top-level comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentIds"> (optional)</param>
        /// <param name="eventIds">Event IDs to filter by (optional)</param>
        /// <param name="memberIds"> (optional)</param>
        /// <param name="parentCommentIds"> (optional)</param>
        /// <param name="typeFilter"> (optional)</param>
        /// <param name="includeReplies"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <param name="paginationLastCreated"> (optional)</param>
        /// <returns>Task of GetCommentsReponse</returns>
        System.Threading.Tasks.Task<GetCommentsReponse> GetCommentsAsync (List<int?> commentIds = null, List<string> eventIds = null, List<int?> memberIds = null, List<int?> parentCommentIds = null, string typeFilter = null, bool? includeReplies = null, int? limit = null, int? paginationLastId = null, string paginationLastCreated = null);

        /// <summary>
        /// Get a list of top-level comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentIds"> (optional)</param>
        /// <param name="eventIds">Event IDs to filter by (optional)</param>
        /// <param name="memberIds"> (optional)</param>
        /// <param name="parentCommentIds"> (optional)</param>
        /// <param name="typeFilter"> (optional)</param>
        /// <param name="includeReplies"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <param name="paginationLastCreated"> (optional)</param>
        /// <returns>Task of ApiResponse (GetCommentsReponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCommentsReponse>> GetCommentsAsyncWithHttpInfo (List<int?> commentIds = null, List<string> eventIds = null, List<int?> memberIds = null, List<int?> parentCommentIds = null, string typeFilter = null, bool? includeReplies = null, int? limit = null, int? paginationLastId = null, string paginationLastCreated = null);
        /// <summary>
        /// Get the current member logged in.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSocialMemberResponse</returns>
        System.Threading.Tasks.Task<GetSocialMemberResponse> GetCurrentMemberAsync ();

        /// <summary>
        /// Get the current member logged in.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSocialMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSocialMemberResponse>> GetCurrentMemberAsyncWithHttpInfo ();
        /// <summary>
        /// Get the ids following the specified member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>Task of GetFollowersResponse</returns>
        System.Threading.Tasks.Task<GetFollowersResponse> GetFollowersAsync (int? memberId);

        /// <summary>
        /// Get the ids following the specified member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>Task of ApiResponse (GetFollowersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFollowersResponse>> GetFollowersAsyncWithHttpInfo (int? memberId);
        /// <summary>
        /// Get the ids the specified member is following.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>Task of GetFollowingResponse</returns>
        System.Threading.Tasks.Task<GetFollowingResponse> GetFollowingAsync (int? memberId);

        /// <summary>
        /// Get the ids the specified member is following.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>Task of ApiResponse (GetFollowingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFollowingResponse>> GetFollowingAsyncWithHttpInfo (int? memberId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <param name="seen"> (optional)</param>
        /// <returns>Task of GetActivityResponse</returns>
        System.Threading.Tasks.Task<GetActivityResponse> GetMemberActivityAsync (int? lastId = null, bool? seen = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <param name="seen"> (optional)</param>
        /// <returns>Task of ApiResponse (GetActivityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetActivityResponse>> GetMemberActivityAsyncWithHttpInfo (int? lastId = null, bool? seen = null);
        /// <summary>
        /// Get members that share the relationship specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of GetSocialMemberRelationshipResponse</returns>
        System.Threading.Tasks.Task<GetSocialMemberRelationshipResponse> GetMemberRelationshipsAsync (List<string> fields = null);

        /// <summary>
        /// Get members that share the relationship specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (GetSocialMemberRelationshipResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSocialMemberRelationshipResponse>> GetMemberRelationshipsAsyncWithHttpInfo (List<string> fields = null);
        /// <summary>
        /// Get a list of social members by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds">maxItems:300</param>
        /// <returns>Task of GetSocialMemberResponse</returns>
        System.Threading.Tasks.Task<GetSocialMemberResponse> GetMembersAsync (List<int?> memberIds);

        /// <summary>
        /// Get a list of social members by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds">maxItems:300</param>
        /// <returns>Task of ApiResponse (GetSocialMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSocialMemberResponse>> GetMembersAsyncWithHttpInfo (List<int?> memberIds);
        /// <summary>
        /// Get the bet stats for a list of members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds"></param>
        /// <returns>Task of InlineResponse20064</returns>
        System.Threading.Tasks.Task<InlineResponse20064> GetMembersBetStatsAsync (List<int?> memberIds);

        /// <summary>
        /// Get the bet stats for a list of members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds"></param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20064>> GetMembersBetStatsAsyncWithHttpInfo (List<int?> memberIds);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUnreadActivityCountResponse</returns>
        System.Threading.Tasks.Task<GetUnreadActivityCountResponse> GetUnreadActivityCountAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUnreadActivityCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUnreadActivityCountResponse>> GetUnreadActivityCountAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve members based on filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <returns>Task of GetSocialMemberResponse</returns>
        System.Threading.Tasks.Task<GetSocialMemberResponse> SearchMembersAsync (string displayName = null, string username = null, int? limit = null, int? paginationLastId = null);

        /// <summary>
        /// Retrieve members based on filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <returns>Task of ApiResponse (GetSocialMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSocialMemberResponse>> SearchMembersAsyncWithHttpInfo (string displayName = null, string username = null, int? limit = null, int? paginationLastId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetActivityReadAsync (SetActivityReadRequest body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetActivityReadAsyncWithHttpInfo (SetActivityReadRequest body = null);
        /// <summary>
        /// Update member data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of GetSocialMemberResponse</returns>
        System.Threading.Tasks.Task<GetSocialMemberResponse> UpdateMemberAsync (UpdateMemberRequest body = null);

        /// <summary>
        /// Update member data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (GetSocialMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSocialMemberResponse>> UpdateMemberAsyncWithHttpInfo (UpdateMemberRequest body = null);
        /// <summary>
        /// Update the member&#x27;s photo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSocialMemberResponse</returns>
        System.Threading.Tasks.Task<GetSocialMemberResponse> UpdateMemberPhotoAsync ();

        /// <summary>
        /// Update the member&#x27;s photo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSocialMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSocialMemberResponse>> UpdateMemberPhotoAsyncWithHttpInfo ();
        /// <summary>
        /// Upload an image.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 5 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SetImageResponse</returns>
        System.Threading.Tasks.Task<SetImageResponse> UploadSharedImageAsync ();

        /// <summary>
        /// Upload an image.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 5 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SetImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetImageResponse>> UploadSharedImageAsyncWithHttpInfo ();
        /// <summary>
        /// Upsert the member&#x27;s relationship to the targeted member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of UpsertRelationshipResponse</returns>
        System.Threading.Tasks.Task<UpsertRelationshipResponse> UpsertRelationshipAsync (UpsertRelationshipRequest body = null);

        /// <summary>
        /// Upsert the member&#x27;s relationship to the targeted member.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (UpsertRelationshipResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpsertRelationshipResponse>> UpsertRelationshipAsyncWithHttpInfo (UpsertRelationshipRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SocialApi : ISocialApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SocialApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class
        /// </summary>
        /// <returns></returns>
        public SocialApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SocialApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>PostCommentResponse</returns>
        public PostCommentResponse CreateComment (PostCommentsRequest body = null)
        {
             ApiResponse<PostCommentResponse> localVarResponse = CreateCommentWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of PostCommentResponse</returns>
        public ApiResponse< PostCommentResponse > CreateCommentWithHttpInfo (PostCommentsRequest body = null)
        {

            var localVarPath = "/v3/social/comments/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostCommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostCommentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCommentResponse)));
        }

        /// <summary>
        /// Create a new comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of PostCommentResponse</returns>
        public async System.Threading.Tasks.Task<PostCommentResponse> CreateCommentAsync (PostCommentsRequest body = null)
        {
             ApiResponse<PostCommentResponse> localVarResponse = await CreateCommentAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (PostCommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostCommentResponse>> CreateCommentAsyncWithHttpInfo (PostCommentsRequest body = null)
        {

            var localVarPath = "/v3/social/comments/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostCommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PostCommentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCommentResponse)));
        }

        /// <summary>
        /// Create a new social member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>CreateSocialMemberResponse</returns>
        public CreateSocialMemberResponse CreateMember (CreateSocialMemberRequest body = null)
        {
             ApiResponse<CreateSocialMemberResponse> localVarResponse = CreateMemberWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new social member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of CreateSocialMemberResponse</returns>
        public ApiResponse< CreateSocialMemberResponse > CreateMemberWithHttpInfo (CreateSocialMemberRequest body = null)
        {

            var localVarPath = "/v3/social/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSocialMemberResponse)));
        }

        /// <summary>
        /// Create a new social member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of CreateSocialMemberResponse</returns>
        public async System.Threading.Tasks.Task<CreateSocialMemberResponse> CreateMemberAsync (CreateSocialMemberRequest body = null)
        {
             ApiResponse<CreateSocialMemberResponse> localVarResponse = await CreateMemberAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new social member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (CreateSocialMemberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateSocialMemberResponse>> CreateMemberAsyncWithHttpInfo (CreateSocialMemberRequest body = null)
        {

            var localVarPath = "/v3/social/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateSocialMemberResponse)));
        }

        /// <summary>
        /// Add a reaction to a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Object</returns>
        public Object CreateReaction (int? commentId, int? emojiId)
        {
             ApiResponse<Object> localVarResponse = CreateReactionWithHttpInfo(commentId, emojiId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a reaction to a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateReactionWithHttpInfo (int? commentId, int? emojiId)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling SocialApi->CreateReaction");
            // verify the required parameter 'emojiId' is set
            if (emojiId == null)
                throw new ApiException(400, "Missing required parameter 'emojiId' when calling SocialApi->CreateReaction");

            var localVarPath = "/v3/social/comments/{comment_id}/reactions/{emoji_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (emojiId != null) localVarPathParams.Add("emoji_id", this.Configuration.ApiClient.ParameterToString(emojiId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Add a reaction to a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateReactionAsync (int? commentId, int? emojiId)
        {
             ApiResponse<Object> localVarResponse = await CreateReactionAsyncWithHttpInfo(commentId, emojiId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a reaction to a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateReactionAsyncWithHttpInfo (int? commentId, int? emojiId)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling SocialApi->CreateReaction");
            // verify the required parameter 'emojiId' is set
            if (emojiId == null)
                throw new ApiException(400, "Missing required parameter 'emojiId' when calling SocialApi->CreateReaction");

            var localVarPath = "/v3/social/comments/{comment_id}/reactions/{emoji_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (emojiId != null) localVarPathParams.Add("emoji_id", this.Configuration.ApiClient.ParameterToString(emojiId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <returns>Object</returns>
        public Object DeleteComment (int? commentId)
        {
             ApiResponse<Object> localVarResponse = DeleteCommentWithHttpInfo(commentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteCommentWithHttpInfo (int? commentId)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling SocialApi->DeleteComment");

            var localVarPath = "/v3/social/comments/{comment_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteCommentAsync (int? commentId)
        {
             ApiResponse<Object> localVarResponse = await DeleteCommentAsyncWithHttpInfo(commentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommentAsyncWithHttpInfo (int? commentId)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling SocialApi->DeleteComment");

            var localVarPath = "/v3/social/comments/{comment_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete the current one-way relationship from between the two members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromMemberId"></param>
        /// <param name="toMemberId"></param>
        /// <returns>Object</returns>
        public Object DeleteMemberRelationship (int? fromMemberId, int? toMemberId)
        {
             ApiResponse<Object> localVarResponse = DeleteMemberRelationshipWithHttpInfo(fromMemberId, toMemberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the current one-way relationship from between the two members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromMemberId"></param>
        /// <param name="toMemberId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteMemberRelationshipWithHttpInfo (int? fromMemberId, int? toMemberId)
        {
            // verify the required parameter 'fromMemberId' is set
            if (fromMemberId == null)
                throw new ApiException(400, "Missing required parameter 'fromMemberId' when calling SocialApi->DeleteMemberRelationship");
            // verify the required parameter 'toMemberId' is set
            if (toMemberId == null)
                throw new ApiException(400, "Missing required parameter 'toMemberId' when calling SocialApi->DeleteMemberRelationship");

            var localVarPath = "/v3/social/members/{from_member_id}/relationships/target_id/{to_member_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromMemberId != null) localVarPathParams.Add("from_member_id", this.Configuration.ApiClient.ParameterToString(fromMemberId)); // path parameter
            if (toMemberId != null) localVarPathParams.Add("to_member_id", this.Configuration.ApiClient.ParameterToString(toMemberId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMemberRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete the current one-way relationship from between the two members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromMemberId"></param>
        /// <param name="toMemberId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteMemberRelationshipAsync (int? fromMemberId, int? toMemberId)
        {
             ApiResponse<Object> localVarResponse = await DeleteMemberRelationshipAsyncWithHttpInfo(fromMemberId, toMemberId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the current one-way relationship from between the two members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromMemberId"></param>
        /// <param name="toMemberId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMemberRelationshipAsyncWithHttpInfo (int? fromMemberId, int? toMemberId)
        {
            // verify the required parameter 'fromMemberId' is set
            if (fromMemberId == null)
                throw new ApiException(400, "Missing required parameter 'fromMemberId' when calling SocialApi->DeleteMemberRelationship");
            // verify the required parameter 'toMemberId' is set
            if (toMemberId == null)
                throw new ApiException(400, "Missing required parameter 'toMemberId' when calling SocialApi->DeleteMemberRelationship");

            var localVarPath = "/v3/social/members/{from_member_id}/relationships/target_id/{to_member_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fromMemberId != null) localVarPathParams.Add("from_member_id", this.Configuration.ApiClient.ParameterToString(fromMemberId)); // path parameter
            if (toMemberId != null) localVarPathParams.Add("to_member_id", this.Configuration.ApiClient.ParameterToString(toMemberId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMemberRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove a reaction to a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Object</returns>
        public Object DeleteReaction (int? commentId, int? emojiId)
        {
             ApiResponse<Object> localVarResponse = DeleteReactionWithHttpInfo(commentId, emojiId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a reaction to a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteReactionWithHttpInfo (int? commentId, int? emojiId)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling SocialApi->DeleteReaction");
            // verify the required parameter 'emojiId' is set
            if (emojiId == null)
                throw new ApiException(400, "Missing required parameter 'emojiId' when calling SocialApi->DeleteReaction");

            var localVarPath = "/v3/social/comments/{comment_id}/reactions/{emoji_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (emojiId != null) localVarPathParams.Add("emoji_id", this.Configuration.ApiClient.ParameterToString(emojiId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove a reaction to a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteReactionAsync (int? commentId, int? emojiId)
        {
             ApiResponse<Object> localVarResponse = await DeleteReactionAsyncWithHttpInfo(commentId, emojiId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a reaction to a comment. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentId"></param>
        /// <param name="emojiId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReactionAsyncWithHttpInfo (int? commentId, int? emojiId)
        {
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling SocialApi->DeleteReaction");
            // verify the required parameter 'emojiId' is set
            if (emojiId == null)
                throw new ApiException(400, "Missing required parameter 'emojiId' when calling SocialApi->DeleteReaction");

            var localVarPath = "/v3/social/comments/{comment_id}/reactions/{emoji_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentId != null) localVarPathParams.Add("comment_id", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (emojiId != null) localVarPathParams.Add("emoji_id", this.Configuration.ApiClient.ParameterToString(emojiId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get a list of top-level comments. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentIds"> (optional)</param>
        /// <param name="eventIds">Event IDs to filter by (optional)</param>
        /// <param name="memberIds"> (optional)</param>
        /// <param name="parentCommentIds"> (optional)</param>
        /// <param name="typeFilter"> (optional)</param>
        /// <param name="includeReplies"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <param name="paginationLastCreated"> (optional)</param>
        /// <returns>GetCommentsReponse</returns>
        public GetCommentsReponse GetComments (List<int?> commentIds = null, List<string> eventIds = null, List<int?> memberIds = null, List<int?> parentCommentIds = null, string typeFilter = null, bool? includeReplies = null, int? limit = null, int? paginationLastId = null, string paginationLastCreated = null)
        {
             ApiResponse<GetCommentsReponse> localVarResponse = GetCommentsWithHttpInfo(commentIds, eventIds, memberIds, parentCommentIds, typeFilter, includeReplies, limit, paginationLastId, paginationLastCreated);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of top-level comments. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentIds"> (optional)</param>
        /// <param name="eventIds">Event IDs to filter by (optional)</param>
        /// <param name="memberIds"> (optional)</param>
        /// <param name="parentCommentIds"> (optional)</param>
        /// <param name="typeFilter"> (optional)</param>
        /// <param name="includeReplies"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <param name="paginationLastCreated"> (optional)</param>
        /// <returns>ApiResponse of GetCommentsReponse</returns>
        public ApiResponse< GetCommentsReponse > GetCommentsWithHttpInfo (List<int?> commentIds = null, List<string> eventIds = null, List<int?> memberIds = null, List<int?> parentCommentIds = null, string typeFilter = null, bool? includeReplies = null, int? limit = null, int? paginationLastId = null, string paginationLastCreated = null)
        {

            var localVarPath = "/v3/social/comments/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "comment_ids", commentIds)); // query parameter
            if (eventIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "event_ids", eventIds)); // query parameter
            if (memberIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "member_ids", memberIds)); // query parameter
            if (parentCommentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "parent_comment_ids", parentCommentIds)); // query parameter
            if (typeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_filter", typeFilter)); // query parameter
            if (includeReplies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_replies", includeReplies)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (paginationLastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_id", paginationLastId)); // query parameter
            if (paginationLastCreated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_created", paginationLastCreated)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCommentsReponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCommentsReponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCommentsReponse)));
        }

        /// <summary>
        /// Get a list of top-level comments. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentIds"> (optional)</param>
        /// <param name="eventIds">Event IDs to filter by (optional)</param>
        /// <param name="memberIds"> (optional)</param>
        /// <param name="parentCommentIds"> (optional)</param>
        /// <param name="typeFilter"> (optional)</param>
        /// <param name="includeReplies"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <param name="paginationLastCreated"> (optional)</param>
        /// <returns>Task of GetCommentsReponse</returns>
        public async System.Threading.Tasks.Task<GetCommentsReponse> GetCommentsAsync (List<int?> commentIds = null, List<string> eventIds = null, List<int?> memberIds = null, List<int?> parentCommentIds = null, string typeFilter = null, bool? includeReplies = null, int? limit = null, int? paginationLastId = null, string paginationLastCreated = null)
        {
             ApiResponse<GetCommentsReponse> localVarResponse = await GetCommentsAsyncWithHttpInfo(commentIds, eventIds, memberIds, parentCommentIds, typeFilter, includeReplies, limit, paginationLastId, paginationLastCreated);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of top-level comments. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commentIds"> (optional)</param>
        /// <param name="eventIds">Event IDs to filter by (optional)</param>
        /// <param name="memberIds"> (optional)</param>
        /// <param name="parentCommentIds"> (optional)</param>
        /// <param name="typeFilter"> (optional)</param>
        /// <param name="includeReplies"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <param name="paginationLastCreated"> (optional)</param>
        /// <returns>Task of ApiResponse (GetCommentsReponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCommentsReponse>> GetCommentsAsyncWithHttpInfo (List<int?> commentIds = null, List<string> eventIds = null, List<int?> memberIds = null, List<int?> parentCommentIds = null, string typeFilter = null, bool? includeReplies = null, int? limit = null, int? paginationLastId = null, string paginationLastCreated = null)
        {

            var localVarPath = "/v3/social/comments/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (commentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "comment_ids", commentIds)); // query parameter
            if (eventIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "event_ids", eventIds)); // query parameter
            if (memberIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "member_ids", memberIds)); // query parameter
            if (parentCommentIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "parent_comment_ids", parentCommentIds)); // query parameter
            if (typeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_filter", typeFilter)); // query parameter
            if (includeReplies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_replies", includeReplies)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (paginationLastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_id", paginationLastId)); // query parameter
            if (paginationLastCreated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_created", paginationLastCreated)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCommentsReponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCommentsReponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCommentsReponse)));
        }

        /// <summary>
        /// Get the current member logged in. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSocialMemberResponse</returns>
        public GetSocialMemberResponse GetCurrentMember ()
        {
             ApiResponse<GetSocialMemberResponse> localVarResponse = GetCurrentMemberWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current member logged in. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSocialMemberResponse</returns>
        public ApiResponse< GetSocialMemberResponse > GetCurrentMemberWithHttpInfo ()
        {

            var localVarPath = "/v3/social/members/current/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberResponse)));
        }

        /// <summary>
        /// Get the current member logged in. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSocialMemberResponse</returns>
        public async System.Threading.Tasks.Task<GetSocialMemberResponse> GetCurrentMemberAsync ()
        {
             ApiResponse<GetSocialMemberResponse> localVarResponse = await GetCurrentMemberAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current member logged in. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSocialMemberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSocialMemberResponse>> GetCurrentMemberAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/social/members/current/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberResponse)));
        }

        /// <summary>
        /// Get the ids following the specified member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>GetFollowersResponse</returns>
        public GetFollowersResponse GetFollowers (int? memberId)
        {
             ApiResponse<GetFollowersResponse> localVarResponse = GetFollowersWithHttpInfo(memberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the ids following the specified member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>ApiResponse of GetFollowersResponse</returns>
        public ApiResponse< GetFollowersResponse > GetFollowersWithHttpInfo (int? memberId)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling SocialApi->GetFollowers");

            var localVarPath = "/v3/social/members/{member_id}/followers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberId != null) localVarPathParams.Add("member_id", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFollowersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFollowersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFollowersResponse)));
        }

        /// <summary>
        /// Get the ids following the specified member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>Task of GetFollowersResponse</returns>
        public async System.Threading.Tasks.Task<GetFollowersResponse> GetFollowersAsync (int? memberId)
        {
             ApiResponse<GetFollowersResponse> localVarResponse = await GetFollowersAsyncWithHttpInfo(memberId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the ids following the specified member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>Task of ApiResponse (GetFollowersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFollowersResponse>> GetFollowersAsyncWithHttpInfo (int? memberId)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling SocialApi->GetFollowers");

            var localVarPath = "/v3/social/members/{member_id}/followers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberId != null) localVarPathParams.Add("member_id", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFollowers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFollowersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFollowersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFollowersResponse)));
        }

        /// <summary>
        /// Get the ids the specified member is following. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>GetFollowingResponse</returns>
        public GetFollowingResponse GetFollowing (int? memberId)
        {
             ApiResponse<GetFollowingResponse> localVarResponse = GetFollowingWithHttpInfo(memberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the ids the specified member is following. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>ApiResponse of GetFollowingResponse</returns>
        public ApiResponse< GetFollowingResponse > GetFollowingWithHttpInfo (int? memberId)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling SocialApi->GetFollowing");

            var localVarPath = "/v3/social/members/{member_id}/following/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberId != null) localVarPathParams.Add("member_id", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFollowing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFollowingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFollowingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFollowingResponse)));
        }

        /// <summary>
        /// Get the ids the specified member is following. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>Task of GetFollowingResponse</returns>
        public async System.Threading.Tasks.Task<GetFollowingResponse> GetFollowingAsync (int? memberId)
        {
             ApiResponse<GetFollowingResponse> localVarResponse = await GetFollowingAsyncWithHttpInfo(memberId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the ids the specified member is following. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <returns>Task of ApiResponse (GetFollowingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFollowingResponse>> GetFollowingAsyncWithHttpInfo (int? memberId)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling SocialApi->GetFollowing");

            var localVarPath = "/v3/social/members/{member_id}/following/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberId != null) localVarPathParams.Add("member_id", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFollowing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFollowingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFollowingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFollowingResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <param name="seen"> (optional)</param>
        /// <returns>GetActivityResponse</returns>
        public GetActivityResponse GetMemberActivity (int? lastId = null, bool? seen = null)
        {
             ApiResponse<GetActivityResponse> localVarResponse = GetMemberActivityWithHttpInfo(lastId, seen);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <param name="seen"> (optional)</param>
        /// <returns>ApiResponse of GetActivityResponse</returns>
        public ApiResponse< GetActivityResponse > GetMemberActivityWithHttpInfo (int? lastId = null, bool? seen = null)
        {

            var localVarPath = "/v3/social/activity/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_id", lastId)); // query parameter
            if (seen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seen", seen)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMemberActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetActivityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetActivityResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <param name="seen"> (optional)</param>
        /// <returns>Task of GetActivityResponse</returns>
        public async System.Threading.Tasks.Task<GetActivityResponse> GetMemberActivityAsync (int? lastId = null, bool? seen = null)
        {
             ApiResponse<GetActivityResponse> localVarResponse = await GetMemberActivityAsyncWithHttpInfo(lastId, seen);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastId"> (optional)</param>
        /// <param name="seen"> (optional)</param>
        /// <returns>Task of ApiResponse (GetActivityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetActivityResponse>> GetMemberActivityAsyncWithHttpInfo (int? lastId = null, bool? seen = null)
        {

            var localVarPath = "/v3/social/activity/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_id", lastId)); // query parameter
            if (seen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seen", seen)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMemberActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetActivityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetActivityResponse)));
        }

        /// <summary>
        /// Get members that share the relationship specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"> (optional)</param>
        /// <returns>GetSocialMemberRelationshipResponse</returns>
        public GetSocialMemberRelationshipResponse GetMemberRelationships (List<string> fields = null)
        {
             ApiResponse<GetSocialMemberRelationshipResponse> localVarResponse = GetMemberRelationshipsWithHttpInfo(fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get members that share the relationship specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"> (optional)</param>
        /// <returns>ApiResponse of GetSocialMemberRelationshipResponse</returns>
        public ApiResponse< GetSocialMemberRelationshipResponse > GetMemberRelationshipsWithHttpInfo (List<string> fields = null)
        {

            var localVarPath = "/v3/social/members/relationships/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMemberRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberRelationshipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberRelationshipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberRelationshipResponse)));
        }

        /// <summary>
        /// Get members that share the relationship specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of GetSocialMemberRelationshipResponse</returns>
        public async System.Threading.Tasks.Task<GetSocialMemberRelationshipResponse> GetMemberRelationshipsAsync (List<string> fields = null)
        {
             ApiResponse<GetSocialMemberRelationshipResponse> localVarResponse = await GetMemberRelationshipsAsyncWithHttpInfo(fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get members that share the relationship specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields"> (optional)</param>
        /// <returns>Task of ApiResponse (GetSocialMemberRelationshipResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSocialMemberRelationshipResponse>> GetMemberRelationshipsAsyncWithHttpInfo (List<string> fields = null)
        {

            var localVarPath = "/v3/social/members/relationships/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fields", fields)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMemberRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberRelationshipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberRelationshipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberRelationshipResponse)));
        }

        /// <summary>
        /// Get a list of social members by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds">maxItems:300</param>
        /// <returns>GetSocialMemberResponse</returns>
        public GetSocialMemberResponse GetMembers (List<int?> memberIds)
        {
             ApiResponse<GetSocialMemberResponse> localVarResponse = GetMembersWithHttpInfo(memberIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of social members by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds">maxItems:300</param>
        /// <returns>ApiResponse of GetSocialMemberResponse</returns>
        public ApiResponse< GetSocialMemberResponse > GetMembersWithHttpInfo (List<int?> memberIds)
        {
            // verify the required parameter 'memberIds' is set
            if (memberIds == null)
                throw new ApiException(400, "Missing required parameter 'memberIds' when calling SocialApi->GetMembers");

            var localVarPath = "/v3/social/members/{member_ids}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberIds != null) localVarPathParams.Add("member_ids", this.Configuration.ApiClient.ParameterToString(memberIds)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberResponse)));
        }

        /// <summary>
        /// Get a list of social members by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds">maxItems:300</param>
        /// <returns>Task of GetSocialMemberResponse</returns>
        public async System.Threading.Tasks.Task<GetSocialMemberResponse> GetMembersAsync (List<int?> memberIds)
        {
             ApiResponse<GetSocialMemberResponse> localVarResponse = await GetMembersAsyncWithHttpInfo(memberIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of social members by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds">maxItems:300</param>
        /// <returns>Task of ApiResponse (GetSocialMemberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSocialMemberResponse>> GetMembersAsyncWithHttpInfo (List<int?> memberIds)
        {
            // verify the required parameter 'memberIds' is set
            if (memberIds == null)
                throw new ApiException(400, "Missing required parameter 'memberIds' when calling SocialApi->GetMembers");

            var localVarPath = "/v3/social/members/{member_ids}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberIds != null) localVarPathParams.Add("member_ids", this.Configuration.ApiClient.ParameterToString(memberIds)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberResponse)));
        }

        /// <summary>
        /// Get the bet stats for a list of members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds"></param>
        /// <returns>InlineResponse20064</returns>
        public InlineResponse20064 GetMembersBetStats (List<int?> memberIds)
        {
             ApiResponse<InlineResponse20064> localVarResponse = GetMembersBetStatsWithHttpInfo(memberIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the bet stats for a list of members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds"></param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        public ApiResponse< InlineResponse20064 > GetMembersBetStatsWithHttpInfo (List<int?> memberIds)
        {
            // verify the required parameter 'memberIds' is set
            if (memberIds == null)
                throw new ApiException(400, "Missing required parameter 'memberIds' when calling SocialApi->GetMembersBetStats");

            var localVarPath = "/v3/social/members/{member_ids}/bet_stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberIds != null) localVarPathParams.Add("member_ids", this.Configuration.ApiClient.ParameterToString(memberIds)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMembersBetStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20064>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20064) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20064)));
        }

        /// <summary>
        /// Get the bet stats for a list of members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds"></param>
        /// <returns>Task of InlineResponse20064</returns>
        public async System.Threading.Tasks.Task<InlineResponse20064> GetMembersBetStatsAsync (List<int?> memberIds)
        {
             ApiResponse<InlineResponse20064> localVarResponse = await GetMembersBetStatsAsyncWithHttpInfo(memberIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the bet stats for a list of members. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberIds"></param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20064>> GetMembersBetStatsAsyncWithHttpInfo (List<int?> memberIds)
        {
            // verify the required parameter 'memberIds' is set
            if (memberIds == null)
                throw new ApiException(400, "Missing required parameter 'memberIds' when calling SocialApi->GetMembersBetStats");

            var localVarPath = "/v3/social/members/{member_ids}/bet_stats/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberIds != null) localVarPathParams.Add("member_ids", this.Configuration.ApiClient.ParameterToString(memberIds)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMembersBetStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20064>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20064) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20064)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUnreadActivityCountResponse</returns>
        public GetUnreadActivityCountResponse GetUnreadActivityCount ()
        {
             ApiResponse<GetUnreadActivityCountResponse> localVarResponse = GetUnreadActivityCountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUnreadActivityCountResponse</returns>
        public ApiResponse< GetUnreadActivityCountResponse > GetUnreadActivityCountWithHttpInfo ()
        {

            var localVarPath = "/v3/social/activity/unread/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnreadActivityCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnreadActivityCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUnreadActivityCountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnreadActivityCountResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUnreadActivityCountResponse</returns>
        public async System.Threading.Tasks.Task<GetUnreadActivityCountResponse> GetUnreadActivityCountAsync ()
        {
             ApiResponse<GetUnreadActivityCountResponse> localVarResponse = await GetUnreadActivityCountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUnreadActivityCountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUnreadActivityCountResponse>> GetUnreadActivityCountAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/social/activity/unread/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnreadActivityCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnreadActivityCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetUnreadActivityCountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnreadActivityCountResponse)));
        }

        /// <summary>
        /// Retrieve members based on filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <returns>GetSocialMemberResponse</returns>
        public GetSocialMemberResponse SearchMembers (string displayName = null, string username = null, int? limit = null, int? paginationLastId = null)
        {
             ApiResponse<GetSocialMemberResponse> localVarResponse = SearchMembersWithHttpInfo(displayName, username, limit, paginationLastId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve members based on filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <returns>ApiResponse of GetSocialMemberResponse</returns>
        public ApiResponse< GetSocialMemberResponse > SearchMembersWithHttpInfo (string displayName = null, string username = null, int? limit = null, int? paginationLastId = null)
        {

            var localVarPath = "/v3/social/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (displayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "display_name", displayName)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (paginationLastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_id", paginationLastId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberResponse)));
        }

        /// <summary>
        /// Retrieve members based on filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <returns>Task of GetSocialMemberResponse</returns>
        public async System.Threading.Tasks.Task<GetSocialMemberResponse> SearchMembersAsync (string displayName = null, string username = null, int? limit = null, int? paginationLastId = null)
        {
             ApiResponse<GetSocialMemberResponse> localVarResponse = await SearchMembersAsyncWithHttpInfo(displayName, username, limit, paginationLastId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve members based on filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="paginationLastId"> (optional)</param>
        /// <returns>Task of ApiResponse (GetSocialMemberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSocialMemberResponse>> SearchMembersAsyncWithHttpInfo (string displayName = null, string username = null, int? limit = null, int? paginationLastId = null)
        {

            var localVarPath = "/v3/social/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (displayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "display_name", displayName)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (paginationLastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination_last_id", paginationLastId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Object</returns>
        public Object SetActivityRead (SetActivityReadRequest body = null)
        {
             ApiResponse<Object> localVarResponse = SetActivityReadWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SetActivityReadWithHttpInfo (SetActivityReadRequest body = null)
        {

            var localVarPath = "/v3/social/activity/read/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetActivityRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetActivityReadAsync (SetActivityReadRequest body = null)
        {
             ApiResponse<Object> localVarResponse = await SetActivityReadAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetActivityReadAsyncWithHttpInfo (SetActivityReadRequest body = null)
        {

            var localVarPath = "/v3/social/activity/read/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetActivityRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update member data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>GetSocialMemberResponse</returns>
        public GetSocialMemberResponse UpdateMember (UpdateMemberRequest body = null)
        {
             ApiResponse<GetSocialMemberResponse> localVarResponse = UpdateMemberWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update member data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of GetSocialMemberResponse</returns>
        public ApiResponse< GetSocialMemberResponse > UpdateMemberWithHttpInfo (UpdateMemberRequest body = null)
        {

            var localVarPath = "/v3/social/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberResponse)));
        }

        /// <summary>
        /// Update member data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of GetSocialMemberResponse</returns>
        public async System.Threading.Tasks.Task<GetSocialMemberResponse> UpdateMemberAsync (UpdateMemberRequest body = null)
        {
             ApiResponse<GetSocialMemberResponse> localVarResponse = await UpdateMemberAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update member data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (GetSocialMemberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSocialMemberResponse>> UpdateMemberAsyncWithHttpInfo (UpdateMemberRequest body = null)
        {

            var localVarPath = "/v3/social/members/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberResponse)));
        }

        /// <summary>
        /// Update the member&#x27;s photo. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetSocialMemberResponse</returns>
        public GetSocialMemberResponse UpdateMemberPhoto ()
        {
             ApiResponse<GetSocialMemberResponse> localVarResponse = UpdateMemberPhotoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the member&#x27;s photo. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetSocialMemberResponse</returns>
        public ApiResponse< GetSocialMemberResponse > UpdateMemberPhotoWithHttpInfo ()
        {

            var localVarPath = "/v3/social/members/photo/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMemberPhoto", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberResponse)));
        }

        /// <summary>
        /// Update the member&#x27;s photo. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetSocialMemberResponse</returns>
        public async System.Threading.Tasks.Task<GetSocialMemberResponse> UpdateMemberPhotoAsync ()
        {
             ApiResponse<GetSocialMemberResponse> localVarResponse = await UpdateMemberPhotoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the member&#x27;s photo. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetSocialMemberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSocialMemberResponse>> UpdateMemberPhotoAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/social/members/photo/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMemberPhoto", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSocialMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetSocialMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSocialMemberResponse)));
        }

        /// <summary>
        /// Upload an image.  ##  Rate limits Maximum 5 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SetImageResponse</returns>
        public SetImageResponse UploadSharedImage ()
        {
             ApiResponse<SetImageResponse> localVarResponse = UploadSharedImageWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an image.  ##  Rate limits Maximum 5 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SetImageResponse</returns>
        public ApiResponse< SetImageResponse > UploadSharedImageWithHttpInfo ()
        {

            var localVarPath = "/v3/social/images/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSharedImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SetImageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetImageResponse)));
        }

        /// <summary>
        /// Upload an image.  ##  Rate limits Maximum 5 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SetImageResponse</returns>
        public async System.Threading.Tasks.Task<SetImageResponse> UploadSharedImageAsync ()
        {
             ApiResponse<SetImageResponse> localVarResponse = await UploadSharedImageAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an image.  ##  Rate limits Maximum 5 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SetImageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetImageResponse>> UploadSharedImageAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/social/images/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSharedImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetImageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SetImageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetImageResponse)));
        }

        /// <summary>
        /// Upsert the member&#x27;s relationship to the targeted member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>UpsertRelationshipResponse</returns>
        public UpsertRelationshipResponse UpsertRelationship (UpsertRelationshipRequest body = null)
        {
             ApiResponse<UpsertRelationshipResponse> localVarResponse = UpsertRelationshipWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert the member&#x27;s relationship to the targeted member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of UpsertRelationshipResponse</returns>
        public ApiResponse< UpsertRelationshipResponse > UpsertRelationshipWithHttpInfo (UpsertRelationshipRequest body = null)
        {

            var localVarPath = "/v3/social/members/relationships/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertRelationshipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpsertRelationshipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertRelationshipResponse)));
        }

        /// <summary>
        /// Upsert the member&#x27;s relationship to the targeted member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of UpsertRelationshipResponse</returns>
        public async System.Threading.Tasks.Task<UpsertRelationshipResponse> UpsertRelationshipAsync (UpsertRelationshipRequest body = null)
        {
             ApiResponse<UpsertRelationshipResponse> localVarResponse = await UpsertRelationshipAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upsert the member&#x27;s relationship to the targeted member. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (UpsertRelationshipResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpsertRelationshipResponse>> UpsertRelationshipAsyncWithHttpInfo (UpsertRelationshipRequest body = null)
        {

            var localVarPath = "/v3/social/members/relationships/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertRelationshipResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpsertRelationshipResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertRelationshipResponse)));
        }

    }
}
