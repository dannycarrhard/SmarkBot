/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMultiplesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the status of the each way order with the given contract ids and u_id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="uId"></param>
        /// <returns>EachWayStatusSchema</returns>
        EachWayStatusSchema GetEachWayOrderStatus (int? winContractId, int? placeContractId, string uId);

        /// <summary>
        /// Get the status of the each way order with the given contract ids and u_id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="uId"></param>
        /// <returns>ApiResponse of EachWayStatusSchema</returns>
        ApiResponse<EachWayStatusSchema> GetEachWayOrderStatusWithHttpInfo (int? winContractId, int? placeContractId, string uId);
        /// <summary>
        /// Get the prices for the two contracts of an each way at a given stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>EachWaySinglePrice</returns>
        EachWaySinglePrice GetEachWaySinglePrice (int? winContractId, int? placeContractId, decimal? stake = null);

        /// <summary>
        /// Get the prices for the two contracts of an each way at a given stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>ApiResponse of EachWaySinglePrice</returns>
        ApiResponse<EachWaySinglePrice> GetEachWaySinglePriceWithHttpInfo (int? winContractId, int? placeContractId, decimal? stake = null);
        /// <summary>
        /// Get the price used for a cashout on a single.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <returns>MultiTickPrice</returns>
        MultiTickPrice GetMultiTickSingleCashoutPrice (int? contractId);

        /// <summary>
        /// Get the price used for a cashout on a single.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <returns>ApiResponse of MultiTickPrice</returns>
        ApiResponse<MultiTickPrice> GetMultiTickSingleCashoutPriceWithHttpInfo (int? contractId);
        /// <summary>
        /// Get the price averaged across ticks for a contract at a given stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>MultiTickPrice1</returns>
        MultiTickPrice1 GetMultiTickSinglePrice (int? contractId, decimal? stake = null);

        /// <summary>
        /// Get the price averaged across ticks for a contract at a given stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>ApiResponse of MultiTickPrice1</returns>
        ApiResponse<MultiTickPrice1> GetMultiTickSinglePriceWithHttpInfo (int? contractId, decimal? stake = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="uId"></param>
        /// <returns>MultiplesStatusSchema</returns>
        MultiplesStatusSchema GetMultipleOrderStatus (List<int?> contractIds, string uId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="uId"></param>
        /// <returns>ApiResponse of MultiplesStatusSchema</returns>
        ApiResponse<MultiplesStatusSchema> GetMultipleOrderStatusWithHttpInfo (List<int?> contractIds, string uId);
        /// <summary>
        /// Get the price used for a cashout on a multiple.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Pricing</returns>
        Pricing GetMultiplesCashoutPrice (List<int?> contractIds, string side = null);

        /// <summary>
        /// Get the price used for a cashout on a multiple.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>ApiResponse of Pricing</returns>
        ApiResponse<Pricing> GetMultiplesCashoutPriceWithHttpInfo (List<int?> contractIds, string side = null);
        /// <summary>
        /// Create an entry for and get the price of a multiple based on the given contract ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Pricing</returns>
        Pricing GetMultiplesPricing (List<int?> contractIds, string side = null);

        /// <summary>
        /// Create an entry for and get the price of a multiple based on the given contract ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>ApiResponse of Pricing</returns>
        ApiResponse<Pricing> GetMultiplesPricingWithHttpInfo (List<int?> contractIds, string side = null);
        /// <summary>
        /// Get a randomly generated multiple with the specified number of legs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numLegs"></param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>Random</returns>
        Random GetRandomMultiple (int? numLegs, List<string> contractId = null);

        /// <summary>
        /// Get a randomly generated multiple with the specified number of legs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numLegs"></param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>ApiResponse of Random</returns>
        ApiResponse<Random> GetRandomMultipleWithHttpInfo (int? numLegs, List<string> contractId = null);
        /// <summary>
        /// Get the status for a given single order contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds"></param>
        /// <param name="uIds"></param>
        /// <returns>MultiTickStatusSchema</returns>
        MultiTickStatusSchema GetSingleOrderStatus (List<int?> contractIds, string uIds);

        /// <summary>
        /// Get the status for a given single order contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds"></param>
        /// <param name="uIds"></param>
        /// <returns>ApiResponse of MultiTickStatusSchema</returns>
        ApiResponse<MultiTickStatusSchema> GetSingleOrderStatusWithHttpInfo (List<int?> contractIds, string uIds);
        /// <summary>
        /// Place an atomic each way bet at the given prices and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>EachWayPlace</returns>
        EachWayPlace PlaceEachWaySingle (EachWayRequestSchema body = null);

        /// <summary>
        /// Place an atomic each way bet at the given prices and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of EachWayPlace</returns>
        ApiResponse<EachWayPlace> PlaceEachWaySingleWithHttpInfo (EachWayRequestSchema body = null);
        /// <summary>
        /// Place a bet averaged across multiple ticks at the given price and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MultiTickPlace</returns>
        MultiTickPlace PlaceMultiTickSingle (MultiTickRequestSchema body = null);

        /// <summary>
        /// Place a bet averaged across multiple ticks at the given price and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MultiTickPlace</returns>
        ApiResponse<MultiTickPlace> PlaceMultiTickSingleWithHttpInfo (MultiTickRequestSchema body = null);
        /// <summary>
        /// Place a cashout bet at the given price and quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MultiTickPlace</returns>
        MultiTickPlace PlaceMultiTickSingleCashout (MultiTickRequestSchema1 body = null);

        /// <summary>
        /// Place a cashout bet at the given price and quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MultiTickPlace</returns>
        ApiResponse<MultiTickPlace> PlaceMultiTickSingleCashoutWithHttpInfo (MultiTickRequestSchema1 body = null);
        /// <summary>
        /// Place a multiple cashout for the given contract ids at the given price and quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MultiplesResponseSchema</returns>
        MultiplesResponseSchema PlaceMultipleCashoutOrder (MultiplesCashoutRequestSchema body = null);

        /// <summary>
        /// Place a multiple cashout for the given contract ids at the given price and quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MultiplesResponseSchema</returns>
        ApiResponse<MultiplesResponseSchema> PlaceMultipleCashoutOrderWithHttpInfo (MultiplesCashoutRequestSchema body = null);
        /// <summary>
        /// Place a multiple order for the given contract ids at the given price and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MultiplesResponseSchema</returns>
        MultiplesResponseSchema PlaceMultipleOrder (MultiplesRequestSchema body = null);

        /// <summary>
        /// Place a multiple order for the given contract ids at the given price and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MultiplesResponseSchema</returns>
        ApiResponse<MultiplesResponseSchema> PlaceMultipleOrderWithHttpInfo (MultiplesRequestSchema body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the status of the each way order with the given contract ids and u_id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="uId"></param>
        /// <returns>Task of EachWayStatusSchema</returns>
        System.Threading.Tasks.Task<EachWayStatusSchema> GetEachWayOrderStatusAsync (int? winContractId, int? placeContractId, string uId);

        /// <summary>
        /// Get the status of the each way order with the given contract ids and u_id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="uId"></param>
        /// <returns>Task of ApiResponse (EachWayStatusSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<EachWayStatusSchema>> GetEachWayOrderStatusAsyncWithHttpInfo (int? winContractId, int? placeContractId, string uId);
        /// <summary>
        /// Get the prices for the two contracts of an each way at a given stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>Task of EachWaySinglePrice</returns>
        System.Threading.Tasks.Task<EachWaySinglePrice> GetEachWaySinglePriceAsync (int? winContractId, int? placeContractId, decimal? stake = null);

        /// <summary>
        /// Get the prices for the two contracts of an each way at a given stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>Task of ApiResponse (EachWaySinglePrice)</returns>
        System.Threading.Tasks.Task<ApiResponse<EachWaySinglePrice>> GetEachWaySinglePriceAsyncWithHttpInfo (int? winContractId, int? placeContractId, decimal? stake = null);
        /// <summary>
        /// Get the price used for a cashout on a single.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <returns>Task of MultiTickPrice</returns>
        System.Threading.Tasks.Task<MultiTickPrice> GetMultiTickSingleCashoutPriceAsync (int? contractId);

        /// <summary>
        /// Get the price used for a cashout on a single.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <returns>Task of ApiResponse (MultiTickPrice)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiTickPrice>> GetMultiTickSingleCashoutPriceAsyncWithHttpInfo (int? contractId);
        /// <summary>
        /// Get the price averaged across ticks for a contract at a given stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>Task of MultiTickPrice1</returns>
        System.Threading.Tasks.Task<MultiTickPrice1> GetMultiTickSinglePriceAsync (int? contractId, decimal? stake = null);

        /// <summary>
        /// Get the price averaged across ticks for a contract at a given stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>Task of ApiResponse (MultiTickPrice1)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiTickPrice1>> GetMultiTickSinglePriceAsyncWithHttpInfo (int? contractId, decimal? stake = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="uId"></param>
        /// <returns>Task of MultiplesStatusSchema</returns>
        System.Threading.Tasks.Task<MultiplesStatusSchema> GetMultipleOrderStatusAsync (List<int?> contractIds, string uId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="uId"></param>
        /// <returns>Task of ApiResponse (MultiplesStatusSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiplesStatusSchema>> GetMultipleOrderStatusAsyncWithHttpInfo (List<int?> contractIds, string uId);
        /// <summary>
        /// Get the price used for a cashout on a multiple.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Task of Pricing</returns>
        System.Threading.Tasks.Task<Pricing> GetMultiplesCashoutPriceAsync (List<int?> contractIds, string side = null);

        /// <summary>
        /// Get the price used for a cashout on a multiple.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Pricing)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pricing>> GetMultiplesCashoutPriceAsyncWithHttpInfo (List<int?> contractIds, string side = null);
        /// <summary>
        /// Create an entry for and get the price of a multiple based on the given contract ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Task of Pricing</returns>
        System.Threading.Tasks.Task<Pricing> GetMultiplesPricingAsync (List<int?> contractIds, string side = null);

        /// <summary>
        /// Create an entry for and get the price of a multiple based on the given contract ids.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Pricing)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pricing>> GetMultiplesPricingAsyncWithHttpInfo (List<int?> contractIds, string side = null);
        /// <summary>
        /// Get a randomly generated multiple with the specified number of legs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numLegs"></param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>Task of Random</returns>
        System.Threading.Tasks.Task<Random> GetRandomMultipleAsync (int? numLegs, List<string> contractId = null);

        /// <summary>
        /// Get a randomly generated multiple with the specified number of legs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numLegs"></param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>Task of ApiResponse (Random)</returns>
        System.Threading.Tasks.Task<ApiResponse<Random>> GetRandomMultipleAsyncWithHttpInfo (int? numLegs, List<string> contractId = null);
        /// <summary>
        /// Get the status for a given single order contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds"></param>
        /// <param name="uIds"></param>
        /// <returns>Task of MultiTickStatusSchema</returns>
        System.Threading.Tasks.Task<MultiTickStatusSchema> GetSingleOrderStatusAsync (List<int?> contractIds, string uIds);

        /// <summary>
        /// Get the status for a given single order contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds"></param>
        /// <param name="uIds"></param>
        /// <returns>Task of ApiResponse (MultiTickStatusSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiTickStatusSchema>> GetSingleOrderStatusAsyncWithHttpInfo (List<int?> contractIds, string uIds);
        /// <summary>
        /// Place an atomic each way bet at the given prices and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of EachWayPlace</returns>
        System.Threading.Tasks.Task<EachWayPlace> PlaceEachWaySingleAsync (EachWayRequestSchema body = null);

        /// <summary>
        /// Place an atomic each way bet at the given prices and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (EachWayPlace)</returns>
        System.Threading.Tasks.Task<ApiResponse<EachWayPlace>> PlaceEachWaySingleAsyncWithHttpInfo (EachWayRequestSchema body = null);
        /// <summary>
        /// Place a bet averaged across multiple ticks at the given price and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MultiTickPlace</returns>
        System.Threading.Tasks.Task<MultiTickPlace> PlaceMultiTickSingleAsync (MultiTickRequestSchema body = null);

        /// <summary>
        /// Place a bet averaged across multiple ticks at the given price and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MultiTickPlace)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiTickPlace>> PlaceMultiTickSingleAsyncWithHttpInfo (MultiTickRequestSchema body = null);
        /// <summary>
        /// Place a cashout bet at the given price and quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MultiTickPlace</returns>
        System.Threading.Tasks.Task<MultiTickPlace> PlaceMultiTickSingleCashoutAsync (MultiTickRequestSchema1 body = null);

        /// <summary>
        /// Place a cashout bet at the given price and quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MultiTickPlace)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiTickPlace>> PlaceMultiTickSingleCashoutAsyncWithHttpInfo (MultiTickRequestSchema1 body = null);
        /// <summary>
        /// Place a multiple cashout for the given contract ids at the given price and quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MultiplesResponseSchema</returns>
        System.Threading.Tasks.Task<MultiplesResponseSchema> PlaceMultipleCashoutOrderAsync (MultiplesCashoutRequestSchema body = null);

        /// <summary>
        /// Place a multiple cashout for the given contract ids at the given price and quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MultiplesResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiplesResponseSchema>> PlaceMultipleCashoutOrderAsyncWithHttpInfo (MultiplesCashoutRequestSchema body = null);
        /// <summary>
        /// Place a multiple order for the given contract ids at the given price and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MultiplesResponseSchema</returns>
        System.Threading.Tasks.Task<MultiplesResponseSchema> PlaceMultipleOrderAsync (MultiplesRequestSchema body = null);

        /// <summary>
        /// Place a multiple order for the given contract ids at the given price and stake.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MultiplesResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiplesResponseSchema>> PlaceMultipleOrderAsyncWithHttpInfo (MultiplesRequestSchema body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MultiplesApi : IMultiplesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiplesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MultiplesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiplesApi"/> class
        /// </summary>
        /// <returns></returns>
        public MultiplesApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiplesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MultiplesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the status of the each way order with the given contract ids and u_id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="uId"></param>
        /// <returns>EachWayStatusSchema</returns>
        public EachWayStatusSchema GetEachWayOrderStatus (int? winContractId, int? placeContractId, string uId)
        {
             ApiResponse<EachWayStatusSchema> localVarResponse = GetEachWayOrderStatusWithHttpInfo(winContractId, placeContractId, uId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of the each way order with the given contract ids and u_id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="uId"></param>
        /// <returns>ApiResponse of EachWayStatusSchema</returns>
        public ApiResponse< EachWayStatusSchema > GetEachWayOrderStatusWithHttpInfo (int? winContractId, int? placeContractId, string uId)
        {
            // verify the required parameter 'winContractId' is set
            if (winContractId == null)
                throw new ApiException(400, "Missing required parameter 'winContractId' when calling MultiplesApi->GetEachWayOrderStatus");
            // verify the required parameter 'placeContractId' is set
            if (placeContractId == null)
                throw new ApiException(400, "Missing required parameter 'placeContractId' when calling MultiplesApi->GetEachWayOrderStatus");
            // verify the required parameter 'uId' is set
            if (uId == null)
                throw new ApiException(400, "Missing required parameter 'uId' when calling MultiplesApi->GetEachWayOrderStatus");

            var localVarPath = "/v3/each_way/{win_contract_id}/{place_contract_id}/{u_id}/status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (winContractId != null) localVarPathParams.Add("win_contract_id", this.Configuration.ApiClient.ParameterToString(winContractId)); // path parameter
            if (placeContractId != null) localVarPathParams.Add("place_contract_id", this.Configuration.ApiClient.ParameterToString(placeContractId)); // path parameter
            if (uId != null) localVarPathParams.Add("u_id", this.Configuration.ApiClient.ParameterToString(uId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEachWayOrderStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EachWayStatusSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EachWayStatusSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EachWayStatusSchema)));
        }

        /// <summary>
        /// Get the status of the each way order with the given contract ids and u_id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="uId"></param>
        /// <returns>Task of EachWayStatusSchema</returns>
        public async System.Threading.Tasks.Task<EachWayStatusSchema> GetEachWayOrderStatusAsync (int? winContractId, int? placeContractId, string uId)
        {
             ApiResponse<EachWayStatusSchema> localVarResponse = await GetEachWayOrderStatusAsyncWithHttpInfo(winContractId, placeContractId, uId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of the each way order with the given contract ids and u_id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="uId"></param>
        /// <returns>Task of ApiResponse (EachWayStatusSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EachWayStatusSchema>> GetEachWayOrderStatusAsyncWithHttpInfo (int? winContractId, int? placeContractId, string uId)
        {
            // verify the required parameter 'winContractId' is set
            if (winContractId == null)
                throw new ApiException(400, "Missing required parameter 'winContractId' when calling MultiplesApi->GetEachWayOrderStatus");
            // verify the required parameter 'placeContractId' is set
            if (placeContractId == null)
                throw new ApiException(400, "Missing required parameter 'placeContractId' when calling MultiplesApi->GetEachWayOrderStatus");
            // verify the required parameter 'uId' is set
            if (uId == null)
                throw new ApiException(400, "Missing required parameter 'uId' when calling MultiplesApi->GetEachWayOrderStatus");

            var localVarPath = "/v3/each_way/{win_contract_id}/{place_contract_id}/{u_id}/status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (winContractId != null) localVarPathParams.Add("win_contract_id", this.Configuration.ApiClient.ParameterToString(winContractId)); // path parameter
            if (placeContractId != null) localVarPathParams.Add("place_contract_id", this.Configuration.ApiClient.ParameterToString(placeContractId)); // path parameter
            if (uId != null) localVarPathParams.Add("u_id", this.Configuration.ApiClient.ParameterToString(uId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEachWayOrderStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EachWayStatusSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EachWayStatusSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EachWayStatusSchema)));
        }

        /// <summary>
        /// Get the prices for the two contracts of an each way at a given stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>EachWaySinglePrice</returns>
        public EachWaySinglePrice GetEachWaySinglePrice (int? winContractId, int? placeContractId, decimal? stake = null)
        {
             ApiResponse<EachWaySinglePrice> localVarResponse = GetEachWaySinglePriceWithHttpInfo(winContractId, placeContractId, stake);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the prices for the two contracts of an each way at a given stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>ApiResponse of EachWaySinglePrice</returns>
        public ApiResponse< EachWaySinglePrice > GetEachWaySinglePriceWithHttpInfo (int? winContractId, int? placeContractId, decimal? stake = null)
        {
            // verify the required parameter 'winContractId' is set
            if (winContractId == null)
                throw new ApiException(400, "Missing required parameter 'winContractId' when calling MultiplesApi->GetEachWaySinglePrice");
            // verify the required parameter 'placeContractId' is set
            if (placeContractId == null)
                throw new ApiException(400, "Missing required parameter 'placeContractId' when calling MultiplesApi->GetEachWaySinglePrice");

            var localVarPath = "/v3/each_way/{win_contract_id}/{place_contract_id}/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (winContractId != null) localVarPathParams.Add("win_contract_id", this.Configuration.ApiClient.ParameterToString(winContractId)); // path parameter
            if (placeContractId != null) localVarPathParams.Add("place_contract_id", this.Configuration.ApiClient.ParameterToString(placeContractId)); // path parameter
            if (stake != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stake", stake)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEachWaySinglePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EachWaySinglePrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EachWaySinglePrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EachWaySinglePrice)));
        }

        /// <summary>
        /// Get the prices for the two contracts of an each way at a given stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>Task of EachWaySinglePrice</returns>
        public async System.Threading.Tasks.Task<EachWaySinglePrice> GetEachWaySinglePriceAsync (int? winContractId, int? placeContractId, decimal? stake = null)
        {
             ApiResponse<EachWaySinglePrice> localVarResponse = await GetEachWaySinglePriceAsyncWithHttpInfo(winContractId, placeContractId, stake);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the prices for the two contracts of an each way at a given stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="winContractId"></param>
        /// <param name="placeContractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>Task of ApiResponse (EachWaySinglePrice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EachWaySinglePrice>> GetEachWaySinglePriceAsyncWithHttpInfo (int? winContractId, int? placeContractId, decimal? stake = null)
        {
            // verify the required parameter 'winContractId' is set
            if (winContractId == null)
                throw new ApiException(400, "Missing required parameter 'winContractId' when calling MultiplesApi->GetEachWaySinglePrice");
            // verify the required parameter 'placeContractId' is set
            if (placeContractId == null)
                throw new ApiException(400, "Missing required parameter 'placeContractId' when calling MultiplesApi->GetEachWaySinglePrice");

            var localVarPath = "/v3/each_way/{win_contract_id}/{place_contract_id}/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (winContractId != null) localVarPathParams.Add("win_contract_id", this.Configuration.ApiClient.ParameterToString(winContractId)); // path parameter
            if (placeContractId != null) localVarPathParams.Add("place_contract_id", this.Configuration.ApiClient.ParameterToString(placeContractId)); // path parameter
            if (stake != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stake", stake)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEachWaySinglePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EachWaySinglePrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EachWaySinglePrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EachWaySinglePrice)));
        }

        /// <summary>
        /// Get the price used for a cashout on a single. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <returns>MultiTickPrice</returns>
        public MultiTickPrice GetMultiTickSingleCashoutPrice (int? contractId)
        {
             ApiResponse<MultiTickPrice> localVarResponse = GetMultiTickSingleCashoutPriceWithHttpInfo(contractId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the price used for a cashout on a single. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <returns>ApiResponse of MultiTickPrice</returns>
        public ApiResponse< MultiTickPrice > GetMultiTickSingleCashoutPriceWithHttpInfo (int? contractId)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling MultiplesApi->GetMultiTickSingleCashoutPrice");

            var localVarPath = "/v3/multi_tick_orders/cashout/{contract_id}/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiTickSingleCashoutPrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiTickPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiTickPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiTickPrice)));
        }

        /// <summary>
        /// Get the price used for a cashout on a single. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <returns>Task of MultiTickPrice</returns>
        public async System.Threading.Tasks.Task<MultiTickPrice> GetMultiTickSingleCashoutPriceAsync (int? contractId)
        {
             ApiResponse<MultiTickPrice> localVarResponse = await GetMultiTickSingleCashoutPriceAsyncWithHttpInfo(contractId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the price used for a cashout on a single. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <returns>Task of ApiResponse (MultiTickPrice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiTickPrice>> GetMultiTickSingleCashoutPriceAsyncWithHttpInfo (int? contractId)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling MultiplesApi->GetMultiTickSingleCashoutPrice");

            var localVarPath = "/v3/multi_tick_orders/cashout/{contract_id}/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiTickSingleCashoutPrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiTickPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiTickPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiTickPrice)));
        }

        /// <summary>
        /// Get the price averaged across ticks for a contract at a given stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>MultiTickPrice1</returns>
        public MultiTickPrice1 GetMultiTickSinglePrice (int? contractId, decimal? stake = null)
        {
             ApiResponse<MultiTickPrice1> localVarResponse = GetMultiTickSinglePriceWithHttpInfo(contractId, stake);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the price averaged across ticks for a contract at a given stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>ApiResponse of MultiTickPrice1</returns>
        public ApiResponse< MultiTickPrice1 > GetMultiTickSinglePriceWithHttpInfo (int? contractId, decimal? stake = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling MultiplesApi->GetMultiTickSinglePrice");

            var localVarPath = "/v3/multi_tick_orders/{contract_id}/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (stake != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stake", stake)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiTickSinglePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiTickPrice1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiTickPrice1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiTickPrice1)));
        }

        /// <summary>
        /// Get the price averaged across ticks for a contract at a given stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>Task of MultiTickPrice1</returns>
        public async System.Threading.Tasks.Task<MultiTickPrice1> GetMultiTickSinglePriceAsync (int? contractId, decimal? stake = null)
        {
             ApiResponse<MultiTickPrice1> localVarResponse = await GetMultiTickSinglePriceAsyncWithHttpInfo(contractId, stake);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the price averaged across ticks for a contract at a given stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId"></param>
        /// <param name="stake"> (optional)</param>
        /// <returns>Task of ApiResponse (MultiTickPrice1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiTickPrice1>> GetMultiTickSinglePriceAsyncWithHttpInfo (int? contractId, decimal? stake = null)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling MultiplesApi->GetMultiTickSinglePrice");

            var localVarPath = "/v3/multi_tick_orders/{contract_id}/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contract_id", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (stake != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stake", stake)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiTickSinglePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiTickPrice1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiTickPrice1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiTickPrice1)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="uId"></param>
        /// <returns>MultiplesStatusSchema</returns>
        public MultiplesStatusSchema GetMultipleOrderStatus (List<int?> contractIds, string uId)
        {
             ApiResponse<MultiplesStatusSchema> localVarResponse = GetMultipleOrderStatusWithHttpInfo(contractIds, uId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="uId"></param>
        /// <returns>ApiResponse of MultiplesStatusSchema</returns>
        public ApiResponse< MultiplesStatusSchema > GetMultipleOrderStatusWithHttpInfo (List<int?> contractIds, string uId)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling MultiplesApi->GetMultipleOrderStatus");
            // verify the required parameter 'uId' is set
            if (uId == null)
                throw new ApiException(400, "Missing required parameter 'uId' when calling MultiplesApi->GetMultipleOrderStatus");

            var localVarPath = "/v3/multiples/{contract_ids}/{u_id}/status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (uId != null) localVarPathParams.Add("u_id", this.Configuration.ApiClient.ParameterToString(uId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultipleOrderStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiplesStatusSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiplesStatusSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiplesStatusSchema)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="uId"></param>
        /// <returns>Task of MultiplesStatusSchema</returns>
        public async System.Threading.Tasks.Task<MultiplesStatusSchema> GetMultipleOrderStatusAsync (List<int?> contractIds, string uId)
        {
             ApiResponse<MultiplesStatusSchema> localVarResponse = await GetMultipleOrderStatusAsyncWithHttpInfo(contractIds, uId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="uId"></param>
        /// <returns>Task of ApiResponse (MultiplesStatusSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiplesStatusSchema>> GetMultipleOrderStatusAsyncWithHttpInfo (List<int?> contractIds, string uId)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling MultiplesApi->GetMultipleOrderStatus");
            // verify the required parameter 'uId' is set
            if (uId == null)
                throw new ApiException(400, "Missing required parameter 'uId' when calling MultiplesApi->GetMultipleOrderStatus");

            var localVarPath = "/v3/multiples/{contract_ids}/{u_id}/status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (uId != null) localVarPathParams.Add("u_id", this.Configuration.ApiClient.ParameterToString(uId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultipleOrderStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiplesStatusSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiplesStatusSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiplesStatusSchema)));
        }

        /// <summary>
        /// Get the price used for a cashout on a multiple. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Pricing</returns>
        public Pricing GetMultiplesCashoutPrice (List<int?> contractIds, string side = null)
        {
             ApiResponse<Pricing> localVarResponse = GetMultiplesCashoutPriceWithHttpInfo(contractIds, side);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the price used for a cashout on a multiple. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>ApiResponse of Pricing</returns>
        public ApiResponse< Pricing > GetMultiplesCashoutPriceWithHttpInfo (List<int?> contractIds, string side = null)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling MultiplesApi->GetMultiplesCashoutPrice");

            var localVarPath = "/v3/multiples/cashout/{contract_ids}/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (side != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "side", side)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiplesCashoutPrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pricing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Pricing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pricing)));
        }

        /// <summary>
        /// Get the price used for a cashout on a multiple. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Task of Pricing</returns>
        public async System.Threading.Tasks.Task<Pricing> GetMultiplesCashoutPriceAsync (List<int?> contractIds, string side = null)
        {
             ApiResponse<Pricing> localVarResponse = await GetMultiplesCashoutPriceAsyncWithHttpInfo(contractIds, side);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the price used for a cashout on a multiple. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Pricing)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Pricing>> GetMultiplesCashoutPriceAsyncWithHttpInfo (List<int?> contractIds, string side = null)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling MultiplesApi->GetMultiplesCashoutPrice");

            var localVarPath = "/v3/multiples/cashout/{contract_ids}/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (side != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "side", side)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiplesCashoutPrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pricing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Pricing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pricing)));
        }

        /// <summary>
        /// Create an entry for and get the price of a multiple based on the given contract ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Pricing</returns>
        public Pricing GetMultiplesPricing (List<int?> contractIds, string side = null)
        {
             ApiResponse<Pricing> localVarResponse = GetMultiplesPricingWithHttpInfo(contractIds, side);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an entry for and get the price of a multiple based on the given contract ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>ApiResponse of Pricing</returns>
        public ApiResponse< Pricing > GetMultiplesPricingWithHttpInfo (List<int?> contractIds, string side = null)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling MultiplesApi->GetMultiplesPricing");

            var localVarPath = "/v3/multiples/{contract_ids}/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (side != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "side", side)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiplesPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pricing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Pricing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pricing)));
        }

        /// <summary>
        /// Create an entry for and get the price of a multiple based on the given contract ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Task of Pricing</returns>
        public async System.Threading.Tasks.Task<Pricing> GetMultiplesPricingAsync (List<int?> contractIds, string side = null)
        {
             ApiResponse<Pricing> localVarResponse = await GetMultiplesPricingAsyncWithHttpInfo(contractIds, side);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an entry for and get the price of a multiple based on the given contract ids. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds">maxItems:10&lt;br&gt;minItems:10</param>
        /// <param name="side"> side can either be:&lt;ul&gt; &lt;li&gt;buy: backing a contract &lt;li&gt;sell: laying a contract &lt;/ul&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Pricing)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Pricing>> GetMultiplesPricingAsyncWithHttpInfo (List<int?> contractIds, string side = null)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling MultiplesApi->GetMultiplesPricing");

            var localVarPath = "/v3/multiples/{contract_ids}/prices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (side != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "side", side)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiplesPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pricing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Pricing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pricing)));
        }

        /// <summary>
        /// Get a randomly generated multiple with the specified number of legs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numLegs"></param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>Random</returns>
        public Random GetRandomMultiple (int? numLegs, List<string> contractId = null)
        {
             ApiResponse<Random> localVarResponse = GetRandomMultipleWithHttpInfo(numLegs, contractId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a randomly generated multiple with the specified number of legs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numLegs"></param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>ApiResponse of Random</returns>
        public ApiResponse< Random > GetRandomMultipleWithHttpInfo (int? numLegs, List<string> contractId = null)
        {
            // verify the required parameter 'numLegs' is set
            if (numLegs == null)
                throw new ApiException(400, "Missing required parameter 'numLegs' when calling MultiplesApi->GetRandomMultiple");

            var localVarPath = "/v3/multiples/random/{num_legs}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numLegs != null) localVarPathParams.Add("num_legs", this.Configuration.ApiClient.ParameterToString(numLegs)); // path parameter
            if (contractId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "contract_id", contractId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRandomMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Random>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Random) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Random)));
        }

        /// <summary>
        /// Get a randomly generated multiple with the specified number of legs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numLegs"></param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>Task of Random</returns>
        public async System.Threading.Tasks.Task<Random> GetRandomMultipleAsync (int? numLegs, List<string> contractId = null)
        {
             ApiResponse<Random> localVarResponse = await GetRandomMultipleAsyncWithHttpInfo(numLegs, contractId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a randomly generated multiple with the specified number of legs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numLegs"></param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>Task of ApiResponse (Random)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Random>> GetRandomMultipleAsyncWithHttpInfo (int? numLegs, List<string> contractId = null)
        {
            // verify the required parameter 'numLegs' is set
            if (numLegs == null)
                throw new ApiException(400, "Missing required parameter 'numLegs' when calling MultiplesApi->GetRandomMultiple");

            var localVarPath = "/v3/multiples/random/{num_legs}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numLegs != null) localVarPathParams.Add("num_legs", this.Configuration.ApiClient.ParameterToString(numLegs)); // path parameter
            if (contractId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "contract_id", contractId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRandomMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Random>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Random) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Random)));
        }

        /// <summary>
        /// Get the status for a given single order contract. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds"></param>
        /// <param name="uIds"></param>
        /// <returns>MultiTickStatusSchema</returns>
        public MultiTickStatusSchema GetSingleOrderStatus (List<int?> contractIds, string uIds)
        {
             ApiResponse<MultiTickStatusSchema> localVarResponse = GetSingleOrderStatusWithHttpInfo(contractIds, uIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status for a given single order contract. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds"></param>
        /// <param name="uIds"></param>
        /// <returns>ApiResponse of MultiTickStatusSchema</returns>
        public ApiResponse< MultiTickStatusSchema > GetSingleOrderStatusWithHttpInfo (List<int?> contractIds, string uIds)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling MultiplesApi->GetSingleOrderStatus");
            // verify the required parameter 'uIds' is set
            if (uIds == null)
                throw new ApiException(400, "Missing required parameter 'uIds' when calling MultiplesApi->GetSingleOrderStatus");

            var localVarPath = "/v3/multi_tick/{contract_ids}/{u_ids}/status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (uIds != null) localVarPathParams.Add("u_ids", this.Configuration.ApiClient.ParameterToString(uIds)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSingleOrderStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiTickStatusSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiTickStatusSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiTickStatusSchema)));
        }

        /// <summary>
        /// Get the status for a given single order contract. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds"></param>
        /// <param name="uIds"></param>
        /// <returns>Task of MultiTickStatusSchema</returns>
        public async System.Threading.Tasks.Task<MultiTickStatusSchema> GetSingleOrderStatusAsync (List<int?> contractIds, string uIds)
        {
             ApiResponse<MultiTickStatusSchema> localVarResponse = await GetSingleOrderStatusAsyncWithHttpInfo(contractIds, uIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status for a given single order contract. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractIds"></param>
        /// <param name="uIds"></param>
        /// <returns>Task of ApiResponse (MultiTickStatusSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiTickStatusSchema>> GetSingleOrderStatusAsyncWithHttpInfo (List<int?> contractIds, string uIds)
        {
            // verify the required parameter 'contractIds' is set
            if (contractIds == null)
                throw new ApiException(400, "Missing required parameter 'contractIds' when calling MultiplesApi->GetSingleOrderStatus");
            // verify the required parameter 'uIds' is set
            if (uIds == null)
                throw new ApiException(400, "Missing required parameter 'uIds' when calling MultiplesApi->GetSingleOrderStatus");

            var localVarPath = "/v3/multi_tick/{contract_ids}/{u_ids}/status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractIds != null) localVarPathParams.Add("contract_ids", this.Configuration.ApiClient.ParameterToString(contractIds)); // path parameter
            if (uIds != null) localVarPathParams.Add("u_ids", this.Configuration.ApiClient.ParameterToString(uIds)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSingleOrderStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiTickStatusSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiTickStatusSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiTickStatusSchema)));
        }

        /// <summary>
        /// Place an atomic each way bet at the given prices and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>EachWayPlace</returns>
        public EachWayPlace PlaceEachWaySingle (EachWayRequestSchema body = null)
        {
             ApiResponse<EachWayPlace> localVarResponse = PlaceEachWaySingleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place an atomic each way bet at the given prices and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of EachWayPlace</returns>
        public ApiResponse< EachWayPlace > PlaceEachWaySingleWithHttpInfo (EachWayRequestSchema body = null)
        {

            var localVarPath = "/v3/each_way/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceEachWaySingle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EachWayPlace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EachWayPlace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EachWayPlace)));
        }

        /// <summary>
        /// Place an atomic each way bet at the given prices and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of EachWayPlace</returns>
        public async System.Threading.Tasks.Task<EachWayPlace> PlaceEachWaySingleAsync (EachWayRequestSchema body = null)
        {
             ApiResponse<EachWayPlace> localVarResponse = await PlaceEachWaySingleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place an atomic each way bet at the given prices and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (EachWayPlace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EachWayPlace>> PlaceEachWaySingleAsyncWithHttpInfo (EachWayRequestSchema body = null)
        {

            var localVarPath = "/v3/each_way/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceEachWaySingle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EachWayPlace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EachWayPlace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EachWayPlace)));
        }

        /// <summary>
        /// Place a bet averaged across multiple ticks at the given price and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MultiTickPlace</returns>
        public MultiTickPlace PlaceMultiTickSingle (MultiTickRequestSchema body = null)
        {
             ApiResponse<MultiTickPlace> localVarResponse = PlaceMultiTickSingleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place a bet averaged across multiple ticks at the given price and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MultiTickPlace</returns>
        public ApiResponse< MultiTickPlace > PlaceMultiTickSingleWithHttpInfo (MultiTickRequestSchema body = null)
        {

            var localVarPath = "/v3/multi_tick_orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMultiTickSingle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiTickPlace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiTickPlace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiTickPlace)));
        }

        /// <summary>
        /// Place a bet averaged across multiple ticks at the given price and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MultiTickPlace</returns>
        public async System.Threading.Tasks.Task<MultiTickPlace> PlaceMultiTickSingleAsync (MultiTickRequestSchema body = null)
        {
             ApiResponse<MultiTickPlace> localVarResponse = await PlaceMultiTickSingleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place a bet averaged across multiple ticks at the given price and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MultiTickPlace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiTickPlace>> PlaceMultiTickSingleAsyncWithHttpInfo (MultiTickRequestSchema body = null)
        {

            var localVarPath = "/v3/multi_tick_orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMultiTickSingle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiTickPlace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiTickPlace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiTickPlace)));
        }

        /// <summary>
        /// Place a cashout bet at the given price and quantity. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MultiTickPlace</returns>
        public MultiTickPlace PlaceMultiTickSingleCashout (MultiTickRequestSchema1 body = null)
        {
             ApiResponse<MultiTickPlace> localVarResponse = PlaceMultiTickSingleCashoutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place a cashout bet at the given price and quantity. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MultiTickPlace</returns>
        public ApiResponse< MultiTickPlace > PlaceMultiTickSingleCashoutWithHttpInfo (MultiTickRequestSchema1 body = null)
        {

            var localVarPath = "/v3/multi_tick_orders/cashout/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMultiTickSingleCashout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiTickPlace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiTickPlace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiTickPlace)));
        }

        /// <summary>
        /// Place a cashout bet at the given price and quantity. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MultiTickPlace</returns>
        public async System.Threading.Tasks.Task<MultiTickPlace> PlaceMultiTickSingleCashoutAsync (MultiTickRequestSchema1 body = null)
        {
             ApiResponse<MultiTickPlace> localVarResponse = await PlaceMultiTickSingleCashoutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place a cashout bet at the given price and quantity. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MultiTickPlace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiTickPlace>> PlaceMultiTickSingleCashoutAsyncWithHttpInfo (MultiTickRequestSchema1 body = null)
        {

            var localVarPath = "/v3/multi_tick_orders/cashout/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMultiTickSingleCashout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiTickPlace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiTickPlace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiTickPlace)));
        }

        /// <summary>
        /// Place a multiple cashout for the given contract ids at the given price and quantity. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MultiplesResponseSchema</returns>
        public MultiplesResponseSchema PlaceMultipleCashoutOrder (MultiplesCashoutRequestSchema body = null)
        {
             ApiResponse<MultiplesResponseSchema> localVarResponse = PlaceMultipleCashoutOrderWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place a multiple cashout for the given contract ids at the given price and quantity. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MultiplesResponseSchema</returns>
        public ApiResponse< MultiplesResponseSchema > PlaceMultipleCashoutOrderWithHttpInfo (MultiplesCashoutRequestSchema body = null)
        {

            var localVarPath = "/v3/multiples_orders/cashout/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMultipleCashoutOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiplesResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiplesResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiplesResponseSchema)));
        }

        /// <summary>
        /// Place a multiple cashout for the given contract ids at the given price and quantity. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MultiplesResponseSchema</returns>
        public async System.Threading.Tasks.Task<MultiplesResponseSchema> PlaceMultipleCashoutOrderAsync (MultiplesCashoutRequestSchema body = null)
        {
             ApiResponse<MultiplesResponseSchema> localVarResponse = await PlaceMultipleCashoutOrderAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place a multiple cashout for the given contract ids at the given price and quantity. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MultiplesResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiplesResponseSchema>> PlaceMultipleCashoutOrderAsyncWithHttpInfo (MultiplesCashoutRequestSchema body = null)
        {

            var localVarPath = "/v3/multiples_orders/cashout/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMultipleCashoutOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiplesResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiplesResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiplesResponseSchema)));
        }

        /// <summary>
        /// Place a multiple order for the given contract ids at the given price and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MultiplesResponseSchema</returns>
        public MultiplesResponseSchema PlaceMultipleOrder (MultiplesRequestSchema body = null)
        {
             ApiResponse<MultiplesResponseSchema> localVarResponse = PlaceMultipleOrderWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place a multiple order for the given contract ids at the given price and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MultiplesResponseSchema</returns>
        public ApiResponse< MultiplesResponseSchema > PlaceMultipleOrderWithHttpInfo (MultiplesRequestSchema body = null)
        {

            var localVarPath = "/v3/multiples_orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMultipleOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiplesResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiplesResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiplesResponseSchema)));
        }

        /// <summary>
        /// Place a multiple order for the given contract ids at the given price and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MultiplesResponseSchema</returns>
        public async System.Threading.Tasks.Task<MultiplesResponseSchema> PlaceMultipleOrderAsync (MultiplesRequestSchema body = null)
        {
             ApiResponse<MultiplesResponseSchema> localVarResponse = await PlaceMultipleOrderAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place a multiple order for the given contract ids at the given price and stake. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MultiplesResponseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiplesResponseSchema>> PlaceMultipleOrderAsyncWithHttpInfo (MultiplesRequestSchema body = null)
        {

            var localVarPath = "/v3/multiples_orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceMultipleOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiplesResponseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiplesResponseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiplesResponseSchema)));
        }

    }
}
