/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISessionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Confirm new login from a different country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20067</returns>
        InlineResponse20067 ConfirmNewLogin (Body59 body = null);

        /// <summary>
        /// Confirm new login from a different country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20067</returns>
        ApiResponse<InlineResponse20067> ConfirmNewLoginWithHttpInfo (Body59 body = null);
        /// <summary>
        /// Login using this route.
        /// </summary>
        /// <remarks>
        /// ## Description This will return a token that can be used in the Authentication header in the form \&quot;Session Token &lt;your_token&gt;\&quot; on authenticated requests.&lt;br&gt; The token is valid for 30min, but if you make an authenticated request with it, it will be renewed for the next 30min.  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        TokenResponse CreateSession (SessionCreate body = null);

        /// <summary>
        /// Login using this route.
        /// </summary>
        /// <remarks>
        /// ## Description This will return a token that can be used in the Authentication header in the form \&quot;Session Token &lt;your_token&gt;\&quot; on authenticated requests.&lt;br&gt; The token is valid for 30min, but if you make an authenticated request with it, it will be renewed for the next 30min.  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        ApiResponse<TokenResponse> CreateSessionWithHttpInfo (SessionCreate body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        TokenResponse CreateSessionV0 (Body2 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        ApiResponse<TokenResponse> CreateSessionV0WithHttpInfo (Body2 body = null);
        /// <summary>
        /// Logout from the current session.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SessionDeleteStatus</returns>
        SessionDeleteStatus DeleteCurrentSession ();

        /// <summary>
        /// Logout from the current session.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SessionDeleteStatus</returns>
        ApiResponse<SessionDeleteStatus> DeleteCurrentSessionWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 DeleteSession ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> DeleteSessionWithHttpInfo ();
        /// <summary>
        /// Login route for Danish customers using NemID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        TokenResponse LoginNemid (NemidLogin body = null);

        /// <summary>
        /// Login route for Danish customers using NemID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        ApiResponse<TokenResponse> LoginNemidWithHttpInfo (NemidLogin body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        TokenResponse LoginNemidV0 (Body3 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        ApiResponse<TokenResponse> LoginNemidV0WithHttpInfo (Body3 body = null);
        /// <summary>
        /// Renew the token presented.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>SessionRenewStatus</returns>
        SessionRenewStatus RenewSession (SessionRenew body = null);

        /// <summary>
        /// Renew the token presented.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of SessionRenewStatus</returns>
        ApiResponse<SessionRenewStatus> RenewSessionWithHttpInfo (SessionRenew body = null);
        /// <summary>
        /// Re-authenticate an expired session.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SessionUpdateStatus</returns>
        SessionUpdateStatus UpdateExpiredSession ();

        /// <summary>
        /// Re-authenticate an expired session.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SessionUpdateStatus</returns>
        ApiResponse<SessionUpdateStatus> UpdateExpiredSessionWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 UpdateExpiredSessionV0 ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> UpdateExpiredSessionV0WithHttpInfo ();
        /// <summary>
        /// Verify that the session token is valid.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SessionUpdateStatusUpdated</returns>
        SessionUpdateStatusUpdated UpdateSession ();

        /// <summary>
        /// Verify that the session token is valid.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SessionUpdateStatusUpdated</returns>
        ApiResponse<SessionUpdateStatusUpdated> UpdateSessionWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 UpdateSessionV0 ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> UpdateSessionV0WithHttpInfo ();
        /// <summary>
        /// Verify login step for multi factor authentication (MFA).
        /// </summary>
        /// <remarks>
        /// ## Description To enable MFA on a Smarkets account:&lt;br&gt;  - Go to &lt;a href&#x3D;\&quot;https://smarkets.com/account/settings/login\&quot;&gt;login settings&lt;/a&gt; and click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  - Copy the secret into your TOTP library&lt;br&gt;  - Generate one code using it and paste it in the dialog&lt;br&gt;  - Click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  Every time you login: &lt;br&gt;  - Make a POST request to /v3/sessions/ to get a token&lt;br&gt;  - Make a POST request to this route with the token and the code generated by you to complete the login&lt;br&gt;   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        TokenResponse Verify (TotpLogin body = null);

        /// <summary>
        /// Verify login step for multi factor authentication (MFA).
        /// </summary>
        /// <remarks>
        /// ## Description To enable MFA on a Smarkets account:&lt;br&gt;  - Go to &lt;a href&#x3D;\&quot;https://smarkets.com/account/settings/login\&quot;&gt;login settings&lt;/a&gt; and click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  - Copy the secret into your TOTP library&lt;br&gt;  - Generate one code using it and paste it in the dialog&lt;br&gt;  - Click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  Every time you login: &lt;br&gt;  - Make a POST request to /v3/sessions/ to get a token&lt;br&gt;  - Make a POST request to this route with the token and the code generated by you to complete the login&lt;br&gt;   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        ApiResponse<TokenResponse> VerifyWithHttpInfo (TotpLogin body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        TokenResponse VerifyV0 (Body4 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        ApiResponse<TokenResponse> VerifyV0WithHttpInfo (Body4 body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Confirm new login from a different country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20067</returns>
        System.Threading.Tasks.Task<InlineResponse20067> ConfirmNewLoginAsync (Body59 body = null);

        /// <summary>
        /// Confirm new login from a different country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20067)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20067>> ConfirmNewLoginAsyncWithHttpInfo (Body59 body = null);
        /// <summary>
        /// Login using this route.
        /// </summary>
        /// <remarks>
        /// ## Description This will return a token that can be used in the Authentication header in the form \&quot;Session Token &lt;your_token&gt;\&quot; on authenticated requests.&lt;br&gt; The token is valid for 30min, but if you make an authenticated request with it, it will be renewed for the next 30min.  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        System.Threading.Tasks.Task<TokenResponse> CreateSessionAsync (SessionCreate body = null);

        /// <summary>
        /// Login using this route.
        /// </summary>
        /// <remarks>
        /// ## Description This will return a token that can be used in the Authentication header in the form \&quot;Session Token &lt;your_token&gt;\&quot; on authenticated requests.&lt;br&gt; The token is valid for 30min, but if you make an authenticated request with it, it will be renewed for the next 30min.  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponse>> CreateSessionAsyncWithHttpInfo (SessionCreate body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        System.Threading.Tasks.Task<TokenResponse> CreateSessionV0Async (Body2 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponse>> CreateSessionV0AsyncWithHttpInfo (Body2 body = null);
        /// <summary>
        /// Logout from the current session.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SessionDeleteStatus</returns>
        System.Threading.Tasks.Task<SessionDeleteStatus> DeleteCurrentSessionAsync ();

        /// <summary>
        /// Logout from the current session.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SessionDeleteStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionDeleteStatus>> DeleteCurrentSessionAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> DeleteSessionAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> DeleteSessionAsyncWithHttpInfo ();
        /// <summary>
        /// Login route for Danish customers using NemID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        System.Threading.Tasks.Task<TokenResponse> LoginNemidAsync (NemidLogin body = null);

        /// <summary>
        /// Login route for Danish customers using NemID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponse>> LoginNemidAsyncWithHttpInfo (NemidLogin body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        System.Threading.Tasks.Task<TokenResponse> LoginNemidV0Async (Body3 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponse>> LoginNemidV0AsyncWithHttpInfo (Body3 body = null);
        /// <summary>
        /// Renew the token presented.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of SessionRenewStatus</returns>
        System.Threading.Tasks.Task<SessionRenewStatus> RenewSessionAsync (SessionRenew body = null);

        /// <summary>
        /// Renew the token presented.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (SessionRenewStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionRenewStatus>> RenewSessionAsyncWithHttpInfo (SessionRenew body = null);
        /// <summary>
        /// Re-authenticate an expired session.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SessionUpdateStatus</returns>
        System.Threading.Tasks.Task<SessionUpdateStatus> UpdateExpiredSessionAsync ();

        /// <summary>
        /// Re-authenticate an expired session.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SessionUpdateStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionUpdateStatus>> UpdateExpiredSessionAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> UpdateExpiredSessionV0Async ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> UpdateExpiredSessionV0AsyncWithHttpInfo ();
        /// <summary>
        /// Verify that the session token is valid.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SessionUpdateStatusUpdated</returns>
        System.Threading.Tasks.Task<SessionUpdateStatusUpdated> UpdateSessionAsync ();

        /// <summary>
        /// Verify that the session token is valid.
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SessionUpdateStatusUpdated)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionUpdateStatusUpdated>> UpdateSessionAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> UpdateSessionV0Async ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> UpdateSessionV0AsyncWithHttpInfo ();
        /// <summary>
        /// Verify login step for multi factor authentication (MFA).
        /// </summary>
        /// <remarks>
        /// ## Description To enable MFA on a Smarkets account:&lt;br&gt;  - Go to &lt;a href&#x3D;\&quot;https://smarkets.com/account/settings/login\&quot;&gt;login settings&lt;/a&gt; and click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  - Copy the secret into your TOTP library&lt;br&gt;  - Generate one code using it and paste it in the dialog&lt;br&gt;  - Click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  Every time you login: &lt;br&gt;  - Make a POST request to /v3/sessions/ to get a token&lt;br&gt;  - Make a POST request to this route with the token and the code generated by you to complete the login&lt;br&gt;   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        System.Threading.Tasks.Task<TokenResponse> VerifyAsync (TotpLogin body = null);

        /// <summary>
        /// Verify login step for multi factor authentication (MFA).
        /// </summary>
        /// <remarks>
        /// ## Description To enable MFA on a Smarkets account:&lt;br&gt;  - Go to &lt;a href&#x3D;\&quot;https://smarkets.com/account/settings/login\&quot;&gt;login settings&lt;/a&gt; and click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  - Copy the secret into your TOTP library&lt;br&gt;  - Generate one code using it and paste it in the dialog&lt;br&gt;  - Click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  Every time you login: &lt;br&gt;  - Make a POST request to /v3/sessions/ to get a token&lt;br&gt;  - Make a POST request to this route with the token and the code generated by you to complete the login&lt;br&gt;   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponse>> VerifyAsyncWithHttpInfo (TotpLogin body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        System.Threading.Tasks.Task<TokenResponse> VerifyV0Async (Body4 body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponse>> VerifyV0AsyncWithHttpInfo (Body4 body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SessionsApi : ISessionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SessionsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Confirm new login from a different country. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>InlineResponse20067</returns>
        public InlineResponse20067 ConfirmNewLogin (Body59 body = null)
        {
             ApiResponse<InlineResponse20067> localVarResponse = ConfirmNewLoginWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm new login from a different country. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of InlineResponse20067</returns>
        public ApiResponse< InlineResponse20067 > ConfirmNewLoginWithHttpInfo (Body59 body = null)
        {

            var localVarPath = "/v3/verified_logins/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmNewLogin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20067>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20067) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20067)));
        }

        /// <summary>
        /// Confirm new login from a different country. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of InlineResponse20067</returns>
        public async System.Threading.Tasks.Task<InlineResponse20067> ConfirmNewLoginAsync (Body59 body = null)
        {
             ApiResponse<InlineResponse20067> localVarResponse = await ConfirmNewLoginAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm new login from a different country. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20067)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20067>> ConfirmNewLoginAsyncWithHttpInfo (Body59 body = null)
        {

            var localVarPath = "/v3/verified_logins/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmNewLogin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20067>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20067) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20067)));
        }

        /// <summary>
        /// Login using this route. ## Description This will return a token that can be used in the Authentication header in the form \&quot;Session Token &lt;your_token&gt;\&quot; on authenticated requests.&lt;br&gt; The token is valid for 30min, but if you make an authenticated request with it, it will be renewed for the next 30min.  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        public TokenResponse CreateSession (SessionCreate body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = CreateSessionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login using this route. ## Description This will return a token that can be used in the Authentication header in the form \&quot;Session Token &lt;your_token&gt;\&quot; on authenticated requests.&lt;br&gt; The token is valid for 30min, but if you make an authenticated request with it, it will be renewed for the next 30min.  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        public ApiResponse< TokenResponse > CreateSessionWithHttpInfo (SessionCreate body = null)
        {

            var localVarPath = "/v3/sessions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        /// Login using this route. ## Description This will return a token that can be used in the Authentication header in the form \&quot;Session Token &lt;your_token&gt;\&quot; on authenticated requests.&lt;br&gt; The token is valid for 30min, but if you make an authenticated request with it, it will be renewed for the next 30min.  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        public async System.Threading.Tasks.Task<TokenResponse> CreateSessionAsync (SessionCreate body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = await CreateSessionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login using this route. ## Description This will return a token that can be used in the Authentication header in the form \&quot;Session Token &lt;your_token&gt;\&quot; on authenticated requests.&lt;br&gt; The token is valid for 30min, but if you make an authenticated request with it, it will be renewed for the next 30min.  ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenResponse>> CreateSessionAsyncWithHttpInfo (SessionCreate body = null)
        {

            var localVarPath = "/v3/sessions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        ///   ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        public TokenResponse CreateSessionV0 (Body2 body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = CreateSessionV0WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///   ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        public ApiResponse< TokenResponse > CreateSessionV0WithHttpInfo (Body2 body = null)
        {

            var localVarPath = "/v0/sessions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSessionV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        ///   ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        public async System.Threading.Tasks.Task<TokenResponse> CreateSessionV0Async (Body2 body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = await CreateSessionV0AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///   ##  Rate limits Maximum 10 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenResponse>> CreateSessionV0AsyncWithHttpInfo (Body2 body = null)
        {

            var localVarPath = "/v0/sessions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSessionV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        /// Logout from the current session.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SessionDeleteStatus</returns>
        public SessionDeleteStatus DeleteCurrentSession ()
        {
             ApiResponse<SessionDeleteStatus> localVarResponse = DeleteCurrentSessionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout from the current session.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SessionDeleteStatus</returns>
        public ApiResponse< SessionDeleteStatus > DeleteCurrentSessionWithHttpInfo ()
        {

            var localVarPath = "/v3/sessions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCurrentSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionDeleteStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionDeleteStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionDeleteStatus)));
        }

        /// <summary>
        /// Logout from the current session.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SessionDeleteStatus</returns>
        public async System.Threading.Tasks.Task<SessionDeleteStatus> DeleteCurrentSessionAsync ()
        {
             ApiResponse<SessionDeleteStatus> localVarResponse = await DeleteCurrentSessionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout from the current session.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SessionDeleteStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionDeleteStatus>> DeleteCurrentSessionAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/sessions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCurrentSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionDeleteStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionDeleteStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionDeleteStatus)));
        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 DeleteSession ()
        {
             ApiResponse<InlineResponse20014> localVarResponse = DeleteSessionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > DeleteSessionWithHttpInfo ()
        {

            var localVarPath = "/v0/sessions/current/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> DeleteSessionAsync ()
        {
             ApiResponse<InlineResponse20014> localVarResponse = await DeleteSessionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> DeleteSessionAsyncWithHttpInfo ()
        {

            var localVarPath = "/v0/sessions/current/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Login route for Danish customers using NemID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        public TokenResponse LoginNemid (NemidLogin body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = LoginNemidWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login route for Danish customers using NemID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        public ApiResponse< TokenResponse > LoginNemidWithHttpInfo (NemidLogin body = null)
        {

            var localVarPath = "/v3/sessions/nemid/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginNemid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        /// Login route for Danish customers using NemID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        public async System.Threading.Tasks.Task<TokenResponse> LoginNemidAsync (NemidLogin body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = await LoginNemidAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login route for Danish customers using NemID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenResponse>> LoginNemidAsyncWithHttpInfo (NemidLogin body = null)
        {

            var localVarPath = "/v3/sessions/nemid/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginNemid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        public TokenResponse LoginNemidV0 (Body3 body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = LoginNemidV0WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        public ApiResponse< TokenResponse > LoginNemidV0WithHttpInfo (Body3 body = null)
        {

            var localVarPath = "/v0/sessions/nemid/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginNemidV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        public async System.Threading.Tasks.Task<TokenResponse> LoginNemidV0Async (Body3 body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = await LoginNemidV0AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenResponse>> LoginNemidV0AsyncWithHttpInfo (Body3 body = null)
        {

            var localVarPath = "/v0/sessions/nemid/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginNemidV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        /// Renew the token presented.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>SessionRenewStatus</returns>
        public SessionRenewStatus RenewSession (SessionRenew body = null)
        {
             ApiResponse<SessionRenewStatus> localVarResponse = RenewSessionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renew the token presented.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of SessionRenewStatus</returns>
        public ApiResponse< SessionRenewStatus > RenewSessionWithHttpInfo (SessionRenew body = null)
        {

            var localVarPath = "/v3/sessions/renew/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenewSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionRenewStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionRenewStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionRenewStatus)));
        }

        /// <summary>
        /// Renew the token presented.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of SessionRenewStatus</returns>
        public async System.Threading.Tasks.Task<SessionRenewStatus> RenewSessionAsync (SessionRenew body = null)
        {
             ApiResponse<SessionRenewStatus> localVarResponse = await RenewSessionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Renew the token presented.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (SessionRenewStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionRenewStatus>> RenewSessionAsyncWithHttpInfo (SessionRenew body = null)
        {

            var localVarPath = "/v3/sessions/renew/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenewSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionRenewStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionRenewStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionRenewStatus)));
        }

        /// <summary>
        /// Re-authenticate an expired session.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SessionUpdateStatus</returns>
        public SessionUpdateStatus UpdateExpiredSession ()
        {
             ApiResponse<SessionUpdateStatus> localVarResponse = UpdateExpiredSessionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Re-authenticate an expired session.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SessionUpdateStatus</returns>
        public ApiResponse< SessionUpdateStatus > UpdateExpiredSessionWithHttpInfo ()
        {

            var localVarPath = "/v3/sessions/reauth/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExpiredSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionUpdateStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionUpdateStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionUpdateStatus)));
        }

        /// <summary>
        /// Re-authenticate an expired session.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SessionUpdateStatus</returns>
        public async System.Threading.Tasks.Task<SessionUpdateStatus> UpdateExpiredSessionAsync ()
        {
             ApiResponse<SessionUpdateStatus> localVarResponse = await UpdateExpiredSessionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Re-authenticate an expired session.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SessionUpdateStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionUpdateStatus>> UpdateExpiredSessionAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/sessions/reauth/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExpiredSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionUpdateStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionUpdateStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionUpdateStatus)));
        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 UpdateExpiredSessionV0 ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = UpdateExpiredSessionV0WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > UpdateExpiredSessionV0WithHttpInfo ()
        {

            var localVarPath = "/v0/sessions/current/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExpiredSessionV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> UpdateExpiredSessionV0Async ()
        {
             ApiResponse<InlineResponse20015> localVarResponse = await UpdateExpiredSessionV0AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> UpdateExpiredSessionV0AsyncWithHttpInfo ()
        {

            var localVarPath = "/v0/sessions/current/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExpiredSessionV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Verify that the session token is valid.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SessionUpdateStatusUpdated</returns>
        public SessionUpdateStatusUpdated UpdateSession ()
        {
             ApiResponse<SessionUpdateStatusUpdated> localVarResponse = UpdateSessionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify that the session token is valid.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SessionUpdateStatusUpdated</returns>
        public ApiResponse< SessionUpdateStatusUpdated > UpdateSessionWithHttpInfo ()
        {

            var localVarPath = "/v3/sessions/current/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionUpdateStatusUpdated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionUpdateStatusUpdated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionUpdateStatusUpdated)));
        }

        /// <summary>
        /// Verify that the session token is valid.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SessionUpdateStatusUpdated</returns>
        public async System.Threading.Tasks.Task<SessionUpdateStatusUpdated> UpdateSessionAsync ()
        {
             ApiResponse<SessionUpdateStatusUpdated> localVarResponse = await UpdateSessionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify that the session token is valid.  ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SessionUpdateStatusUpdated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionUpdateStatusUpdated>> UpdateSessionAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/sessions/current/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionUpdateStatusUpdated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionUpdateStatusUpdated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionUpdateStatusUpdated)));
        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 UpdateSessionV0 ()
        {
             ApiResponse<InlineResponse20014> localVarResponse = UpdateSessionV0WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > UpdateSessionV0WithHttpInfo ()
        {

            var localVarPath = "/v0/sessions/current/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSessionV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> UpdateSessionV0Async ()
        {
             ApiResponse<InlineResponse20014> localVarResponse = await UpdateSessionV0AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///   ##  Rate limits Maximum 30 requests per 60 seconds&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> UpdateSessionV0AsyncWithHttpInfo ()
        {

            var localVarPath = "/v0/sessions/current/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSessionV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Verify login step for multi factor authentication (MFA). ## Description To enable MFA on a Smarkets account:&lt;br&gt;  - Go to &lt;a href&#x3D;\&quot;https://smarkets.com/account/settings/login\&quot;&gt;login settings&lt;/a&gt; and click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  - Copy the secret into your TOTP library&lt;br&gt;  - Generate one code using it and paste it in the dialog&lt;br&gt;  - Click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  Every time you login: &lt;br&gt;  - Make a POST request to /v3/sessions/ to get a token&lt;br&gt;  - Make a POST request to this route with the token and the code generated by you to complete the login&lt;br&gt;   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        public TokenResponse Verify (TotpLogin body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = VerifyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify login step for multi factor authentication (MFA). ## Description To enable MFA on a Smarkets account:&lt;br&gt;  - Go to &lt;a href&#x3D;\&quot;https://smarkets.com/account/settings/login\&quot;&gt;login settings&lt;/a&gt; and click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  - Copy the secret into your TOTP library&lt;br&gt;  - Generate one code using it and paste it in the dialog&lt;br&gt;  - Click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  Every time you login: &lt;br&gt;  - Make a POST request to /v3/sessions/ to get a token&lt;br&gt;  - Make a POST request to this route with the token and the code generated by you to complete the login&lt;br&gt;   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        public ApiResponse< TokenResponse > VerifyWithHttpInfo (TotpLogin body = null)
        {

            var localVarPath = "/v3/sessions/verify/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Verify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        /// Verify login step for multi factor authentication (MFA). ## Description To enable MFA on a Smarkets account:&lt;br&gt;  - Go to &lt;a href&#x3D;\&quot;https://smarkets.com/account/settings/login\&quot;&gt;login settings&lt;/a&gt; and click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  - Copy the secret into your TOTP library&lt;br&gt;  - Generate one code using it and paste it in the dialog&lt;br&gt;  - Click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  Every time you login: &lt;br&gt;  - Make a POST request to /v3/sessions/ to get a token&lt;br&gt;  - Make a POST request to this route with the token and the code generated by you to complete the login&lt;br&gt;   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        public async System.Threading.Tasks.Task<TokenResponse> VerifyAsync (TotpLogin body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = await VerifyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify login step for multi factor authentication (MFA). ## Description To enable MFA on a Smarkets account:&lt;br&gt;  - Go to &lt;a href&#x3D;\&quot;https://smarkets.com/account/settings/login\&quot;&gt;login settings&lt;/a&gt; and click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  - Copy the secret into your TOTP library&lt;br&gt;  - Generate one code using it and paste it in the dialog&lt;br&gt;  - Click \&quot;Enable Two-Factor Authentication\&quot;&lt;br&gt;  Every time you login: &lt;br&gt;  - Make a POST request to /v3/sessions/ to get a token&lt;br&gt;  - Make a POST request to this route with the token and the code generated by you to complete the login&lt;br&gt;   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenResponse>> VerifyAsyncWithHttpInfo (TotpLogin body = null)
        {

            var localVarPath = "/v3/sessions/verify/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Verify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>TokenResponse</returns>
        public TokenResponse VerifyV0 (Body4 body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = VerifyV0WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of TokenResponse</returns>
        public ApiResponse< TokenResponse > VerifyV0WithHttpInfo (Body4 body = null)
        {

            var localVarPath = "/v0/sessions/verify/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of TokenResponse</returns>
        public async System.Threading.Tasks.Task<TokenResponse> VerifyV0Async (Body4 body = null)
        {
             ApiResponse<TokenResponse> localVarResponse = await VerifyV0AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenResponse>> VerifyV0AsyncWithHttpInfo (Body4 body = null)
        {

            var localVarPath = "/v0/sessions/verify/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyV0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

    }
}
