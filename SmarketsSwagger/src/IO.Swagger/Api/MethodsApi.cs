/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMethodsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        ///      Add a new bank transfer payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the bank account details using this route, the user will be able to withdraw using his/her bank account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MethodIdResponse</returns>
        MethodIdResponse CreateBankTransferMethod (Body18 body = null);

        /// <summary>
        ///      Add a new bank transfer payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the bank account details using this route, the user will be able to withdraw using his/her bank account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MethodIdResponse</returns>
        ApiResponse<MethodIdResponse> CreateBankTransferMethodWithHttpInfo (Body18 body = null);
        /// <summary>
        ///      Add a new neteller payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the neteller account details using this route, the user will be able to deposit and withdraw using his/her neteller account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MethodIdResponse</returns>
        MethodIdResponse CreateNetellerMethod (Body34 body = null);

        /// <summary>
        ///      Add a new neteller payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the neteller account details using this route, the user will be able to deposit and withdraw using his/her neteller account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MethodIdResponse</returns>
        ApiResponse<MethodIdResponse> CreateNetellerMethodWithHttpInfo (Body34 body = null);
        /// <summary>
        ///      Add a new open bank transfer payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the bank account details using this route, the user will be able to deposit and withdraw using his/her bank account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MethodIdResponse</returns>
        MethodIdResponse CreateOpenBankTransferMethod (Body42 body = null);

        /// <summary>
        ///      Add a new open bank transfer payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the bank account details using this route, the user will be able to deposit and withdraw using his/her bank account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MethodIdResponse</returns>
        ApiResponse<MethodIdResponse> CreateOpenBankTransferMethodWithHttpInfo (Body42 body = null);
        /// <summary>
        ///      Add a new skrill payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the skrill account details using this route, the user will be able to deposit and withdraw using his/her skrill account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MethodIdResponse</returns>
        MethodIdResponse CreateSkrillMethod (Body53 body = null);

        /// <summary>
        ///      Add a new skrill payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the skrill account details using this route, the user will be able to deposit and withdraw using his/her skrill account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MethodIdResponse</returns>
        ApiResponse<MethodIdResponse> CreateSkrillMethodWithHttpInfo (Body53 body = null);
        /// <summary>
        ///      Disable a user&#x27;s card.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Object</returns>
        Object DeleteCardMethod (int? methodId);

        /// <summary>
        ///      Disable a user&#x27;s card.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteCardMethodWithHttpInfo (int? methodId);
        /// <summary>
        ///      Disable a user&#x27;s bank account.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the bank account.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Object</returns>
        Object DeleteOpenBankTransferMethod (int? methodId);

        /// <summary>
        ///      Disable a user&#x27;s bank account.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the bank account.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteOpenBankTransferMethodWithHttpInfo (int? methodId);
        /// <summary>
        ///      Disable a user&#x27;s card.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Object</returns>
        Object DeleteWorldpayMethod (int? methodId);

        /// <summary>
        ///      Disable a user&#x27;s card.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteWorldpayMethodWithHttpInfo (int? methodId);
        /// <summary>
        /// Get all payment methods available for depositing funds from the user&#x27;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DepositMethodsResponse</returns>
        DepositMethodsResponse GetDepositMethods ();

        /// <summary>
        /// Get all payment methods available for depositing funds from the user&#x27;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DepositMethodsResponse</returns>
        ApiResponse<DepositMethodsResponse> GetDepositMethodsWithHttpInfo ();
        /// <summary>
        ///      Get the open bank transfer providers.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns all the available open bank transfer payment providers in Smarkets, even if the user has no active methods for them. This can be used to display a bank selection dialog and to fetch provider_id before adding the method.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20052</returns>
        InlineResponse20052 GetOpenBankTransferProviders ();

        /// <summary>
        ///      Get the open bank transfer providers.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns all the available open bank transfer payment providers in Smarkets, even if the user has no active methods for them. This can be used to display a bank selection dialog and to fetch provider_id before adding the method.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        ApiResponse<InlineResponse20052> GetOpenBankTransferProvidersWithHttpInfo ();
        /// <summary>
        ///      Get payment provider features.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns the different deposit and withdrawal options available together with the minimum and maximum transaction amount, daily limit, processing time and customer fee.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProviderFeaturesResponse</returns>
        ProviderFeaturesResponse GetPaymentProviderFeatures ();

        /// <summary>
        ///      Get payment provider features.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns the different deposit and withdrawal options available together with the minimum and maximum transaction amount, daily limit, processing time and customer fee.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProviderFeaturesResponse</returns>
        ApiResponse<ProviderFeaturesResponse> GetPaymentProviderFeaturesWithHttpInfo ();
        /// <summary>
        ///      Get the payment providers.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns all the available payment providers in Smarkets, even if the user has no active methods for them. This can be used to display maximum and minimum amounts for deposits/withdrawals  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodType"></param>
        /// <returns>ProvidersResponse</returns>
        ProvidersResponse GetProviders (string methodType);

        /// <summary>
        ///      Get the payment providers.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns all the available payment providers in Smarkets, even if the user has no active methods for them. This can be used to display maximum and minimum amounts for deposits/withdrawals  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodType"></param>
        /// <returns>ApiResponse of ProvidersResponse</returns>
        ApiResponse<ProvidersResponse> GetProvidersWithHttpInfo (string methodType);
        /// <summary>
        /// Get all payment methods available for withdrawing funds from the user&#x27;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20068</returns>
        InlineResponse20068 GetWithdrawalMethods ();

        /// <summary>
        /// Get all payment methods available for withdrawing funds from the user&#x27;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20068</returns>
        ApiResponse<InlineResponse20068> GetWithdrawalMethodsWithHttpInfo ();
        /// <summary>
        ///      Update the billing address for this method.
        /// </summary>
        /// <remarks>
        /// ## Description This can be called if a user moves house or has mis-typed their address and wants to change it.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MethodAddress</returns>
        MethodAddress PutCardMethodBillingAddress (int? methodId, MethodAddress body = null);

        /// <summary>
        ///      Update the billing address for this method.
        /// </summary>
        /// <remarks>
        /// ## Description This can be called if a user moves house or has mis-typed their address and wants to change it.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MethodAddress</returns>
        ApiResponse<MethodAddress> PutCardMethodBillingAddressWithHttpInfo (int? methodId, MethodAddress body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        ///      Add a new bank transfer payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the bank account details using this route, the user will be able to withdraw using his/her bank account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MethodIdResponse</returns>
        System.Threading.Tasks.Task<MethodIdResponse> CreateBankTransferMethodAsync (Body18 body = null);

        /// <summary>
        ///      Add a new bank transfer payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the bank account details using this route, the user will be able to withdraw using his/her bank account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MethodIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MethodIdResponse>> CreateBankTransferMethodAsyncWithHttpInfo (Body18 body = null);
        /// <summary>
        ///      Add a new neteller payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the neteller account details using this route, the user will be able to deposit and withdraw using his/her neteller account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MethodIdResponse</returns>
        System.Threading.Tasks.Task<MethodIdResponse> CreateNetellerMethodAsync (Body34 body = null);

        /// <summary>
        ///      Add a new neteller payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the neteller account details using this route, the user will be able to deposit and withdraw using his/her neteller account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MethodIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MethodIdResponse>> CreateNetellerMethodAsyncWithHttpInfo (Body34 body = null);
        /// <summary>
        ///      Add a new open bank transfer payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the bank account details using this route, the user will be able to deposit and withdraw using his/her bank account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MethodIdResponse</returns>
        System.Threading.Tasks.Task<MethodIdResponse> CreateOpenBankTransferMethodAsync (Body42 body = null);

        /// <summary>
        ///      Add a new open bank transfer payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the bank account details using this route, the user will be able to deposit and withdraw using his/her bank account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MethodIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MethodIdResponse>> CreateOpenBankTransferMethodAsyncWithHttpInfo (Body42 body = null);
        /// <summary>
        ///      Add a new skrill payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the skrill account details using this route, the user will be able to deposit and withdraw using his/her skrill account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MethodIdResponse</returns>
        System.Threading.Tasks.Task<MethodIdResponse> CreateSkrillMethodAsync (Body53 body = null);

        /// <summary>
        ///      Add a new skrill payment method.
        /// </summary>
        /// <remarks>
        /// ## Description By adding the skrill account details using this route, the user will be able to deposit and withdraw using his/her skrill account  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MethodIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MethodIdResponse>> CreateSkrillMethodAsyncWithHttpInfo (Body53 body = null);
        /// <summary>
        ///      Disable a user&#x27;s card.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteCardMethodAsync (int? methodId);

        /// <summary>
        ///      Disable a user&#x27;s card.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCardMethodAsyncWithHttpInfo (int? methodId);
        /// <summary>
        ///      Disable a user&#x27;s bank account.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the bank account.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteOpenBankTransferMethodAsync (int? methodId);

        /// <summary>
        ///      Disable a user&#x27;s bank account.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the bank account.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOpenBankTransferMethodAsyncWithHttpInfo (int? methodId);
        /// <summary>
        ///      Disable a user&#x27;s card.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteWorldpayMethodAsync (int? methodId);

        /// <summary>
        ///      Disable a user&#x27;s card.
        /// </summary>
        /// <remarks>
        /// ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorldpayMethodAsyncWithHttpInfo (int? methodId);
        /// <summary>
        /// Get all payment methods available for depositing funds from the user&#x27;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DepositMethodsResponse</returns>
        System.Threading.Tasks.Task<DepositMethodsResponse> GetDepositMethodsAsync ();

        /// <summary>
        /// Get all payment methods available for depositing funds from the user&#x27;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DepositMethodsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositMethodsResponse>> GetDepositMethodsAsyncWithHttpInfo ();
        /// <summary>
        ///      Get the open bank transfer providers.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns all the available open bank transfer payment providers in Smarkets, even if the user has no active methods for them. This can be used to display a bank selection dialog and to fetch provider_id before adding the method.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20052</returns>
        System.Threading.Tasks.Task<InlineResponse20052> GetOpenBankTransferProvidersAsync ();

        /// <summary>
        ///      Get the open bank transfer providers.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns all the available open bank transfer payment providers in Smarkets, even if the user has no active methods for them. This can be used to display a bank selection dialog and to fetch provider_id before adding the method.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> GetOpenBankTransferProvidersAsyncWithHttpInfo ();
        /// <summary>
        ///      Get payment provider features.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns the different deposit and withdrawal options available together with the minimum and maximum transaction amount, daily limit, processing time and customer fee.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProviderFeaturesResponse</returns>
        System.Threading.Tasks.Task<ProviderFeaturesResponse> GetPaymentProviderFeaturesAsync ();

        /// <summary>
        ///      Get payment provider features.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns the different deposit and withdrawal options available together with the minimum and maximum transaction amount, daily limit, processing time and customer fee.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProviderFeaturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProviderFeaturesResponse>> GetPaymentProviderFeaturesAsyncWithHttpInfo ();
        /// <summary>
        ///      Get the payment providers.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns all the available payment providers in Smarkets, even if the user has no active methods for them. This can be used to display maximum and minimum amounts for deposits/withdrawals  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodType"></param>
        /// <returns>Task of ProvidersResponse</returns>
        System.Threading.Tasks.Task<ProvidersResponse> GetProvidersAsync (string methodType);

        /// <summary>
        ///      Get the payment providers.
        /// </summary>
        /// <remarks>
        /// ## Description This route returns all the available payment providers in Smarkets, even if the user has no active methods for them. This can be used to display maximum and minimum amounts for deposits/withdrawals  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodType"></param>
        /// <returns>Task of ApiResponse (ProvidersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvidersResponse>> GetProvidersAsyncWithHttpInfo (string methodType);
        /// <summary>
        /// Get all payment methods available for withdrawing funds from the user&#x27;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20068</returns>
        System.Threading.Tasks.Task<InlineResponse20068> GetWithdrawalMethodsAsync ();

        /// <summary>
        /// Get all payment methods available for withdrawing funds from the user&#x27;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20068)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20068>> GetWithdrawalMethodsAsyncWithHttpInfo ();
        /// <summary>
        ///      Update the billing address for this method.
        /// </summary>
        /// <remarks>
        /// ## Description This can be called if a user moves house or has mis-typed their address and wants to change it.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MethodAddress</returns>
        System.Threading.Tasks.Task<MethodAddress> PutCardMethodBillingAddressAsync (int? methodId, MethodAddress body = null);

        /// <summary>
        ///      Update the billing address for this method.
        /// </summary>
        /// <remarks>
        /// ## Description This can be called if a user moves house or has mis-typed their address and wants to change it.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MethodAddress)</returns>
        System.Threading.Tasks.Task<ApiResponse<MethodAddress>> PutCardMethodBillingAddressAsyncWithHttpInfo (int? methodId, MethodAddress body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MethodsApi : IMethodsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MethodsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MethodsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MethodsApi"/> class
        /// </summary>
        /// <returns></returns>
        public MethodsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MethodsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MethodsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///      Add a new bank transfer payment method. ## Description By adding the bank account details using this route, the user will be able to withdraw using his/her bank account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MethodIdResponse</returns>
        public MethodIdResponse CreateBankTransferMethod (Body18 body = null)
        {
             ApiResponse<MethodIdResponse> localVarResponse = CreateBankTransferMethodWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Add a new bank transfer payment method. ## Description By adding the bank account details using this route, the user will be able to withdraw using his/her bank account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MethodIdResponse</returns>
        public ApiResponse< MethodIdResponse > CreateBankTransferMethodWithHttpInfo (Body18 body = null)
        {

            var localVarPath = "/v3/bank_transfer_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBankTransferMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MethodIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MethodIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MethodIdResponse)));
        }

        /// <summary>
        ///      Add a new bank transfer payment method. ## Description By adding the bank account details using this route, the user will be able to withdraw using his/her bank account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MethodIdResponse</returns>
        public async System.Threading.Tasks.Task<MethodIdResponse> CreateBankTransferMethodAsync (Body18 body = null)
        {
             ApiResponse<MethodIdResponse> localVarResponse = await CreateBankTransferMethodAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Add a new bank transfer payment method. ## Description By adding the bank account details using this route, the user will be able to withdraw using his/her bank account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MethodIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MethodIdResponse>> CreateBankTransferMethodAsyncWithHttpInfo (Body18 body = null)
        {

            var localVarPath = "/v3/bank_transfer_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBankTransferMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MethodIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MethodIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MethodIdResponse)));
        }

        /// <summary>
        ///      Add a new neteller payment method. ## Description By adding the neteller account details using this route, the user will be able to deposit and withdraw using his/her neteller account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MethodIdResponse</returns>
        public MethodIdResponse CreateNetellerMethod (Body34 body = null)
        {
             ApiResponse<MethodIdResponse> localVarResponse = CreateNetellerMethodWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Add a new neteller payment method. ## Description By adding the neteller account details using this route, the user will be able to deposit and withdraw using his/her neteller account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MethodIdResponse</returns>
        public ApiResponse< MethodIdResponse > CreateNetellerMethodWithHttpInfo (Body34 body = null)
        {

            var localVarPath = "/v3/neteller_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNetellerMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MethodIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MethodIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MethodIdResponse)));
        }

        /// <summary>
        ///      Add a new neteller payment method. ## Description By adding the neteller account details using this route, the user will be able to deposit and withdraw using his/her neteller account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MethodIdResponse</returns>
        public async System.Threading.Tasks.Task<MethodIdResponse> CreateNetellerMethodAsync (Body34 body = null)
        {
             ApiResponse<MethodIdResponse> localVarResponse = await CreateNetellerMethodAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Add a new neteller payment method. ## Description By adding the neteller account details using this route, the user will be able to deposit and withdraw using his/her neteller account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MethodIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MethodIdResponse>> CreateNetellerMethodAsyncWithHttpInfo (Body34 body = null)
        {

            var localVarPath = "/v3/neteller_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNetellerMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MethodIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MethodIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MethodIdResponse)));
        }

        /// <summary>
        ///      Add a new open bank transfer payment method. ## Description By adding the bank account details using this route, the user will be able to deposit and withdraw using his/her bank account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MethodIdResponse</returns>
        public MethodIdResponse CreateOpenBankTransferMethod (Body42 body = null)
        {
             ApiResponse<MethodIdResponse> localVarResponse = CreateOpenBankTransferMethodWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Add a new open bank transfer payment method. ## Description By adding the bank account details using this route, the user will be able to deposit and withdraw using his/her bank account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MethodIdResponse</returns>
        public ApiResponse< MethodIdResponse > CreateOpenBankTransferMethodWithHttpInfo (Body42 body = null)
        {

            var localVarPath = "/v3/open_bank_transfer_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOpenBankTransferMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MethodIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MethodIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MethodIdResponse)));
        }

        /// <summary>
        ///      Add a new open bank transfer payment method. ## Description By adding the bank account details using this route, the user will be able to deposit and withdraw using his/her bank account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MethodIdResponse</returns>
        public async System.Threading.Tasks.Task<MethodIdResponse> CreateOpenBankTransferMethodAsync (Body42 body = null)
        {
             ApiResponse<MethodIdResponse> localVarResponse = await CreateOpenBankTransferMethodAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Add a new open bank transfer payment method. ## Description By adding the bank account details using this route, the user will be able to deposit and withdraw using his/her bank account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MethodIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MethodIdResponse>> CreateOpenBankTransferMethodAsyncWithHttpInfo (Body42 body = null)
        {

            var localVarPath = "/v3/open_bank_transfer_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOpenBankTransferMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MethodIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MethodIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MethodIdResponse)));
        }

        /// <summary>
        ///      Add a new skrill payment method. ## Description By adding the skrill account details using this route, the user will be able to deposit and withdraw using his/her skrill account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MethodIdResponse</returns>
        public MethodIdResponse CreateSkrillMethod (Body53 body = null)
        {
             ApiResponse<MethodIdResponse> localVarResponse = CreateSkrillMethodWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Add a new skrill payment method. ## Description By adding the skrill account details using this route, the user will be able to deposit and withdraw using his/her skrill account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MethodIdResponse</returns>
        public ApiResponse< MethodIdResponse > CreateSkrillMethodWithHttpInfo (Body53 body = null)
        {

            var localVarPath = "/v3/skrill_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSkrillMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MethodIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MethodIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MethodIdResponse)));
        }

        /// <summary>
        ///      Add a new skrill payment method. ## Description By adding the skrill account details using this route, the user will be able to deposit and withdraw using his/her skrill account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MethodIdResponse</returns>
        public async System.Threading.Tasks.Task<MethodIdResponse> CreateSkrillMethodAsync (Body53 body = null)
        {
             ApiResponse<MethodIdResponse> localVarResponse = await CreateSkrillMethodAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Add a new skrill payment method. ## Description By adding the skrill account details using this route, the user will be able to deposit and withdraw using his/her skrill account  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MethodIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MethodIdResponse>> CreateSkrillMethodAsyncWithHttpInfo (Body53 body = null)
        {

            var localVarPath = "/v3/skrill_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSkrillMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MethodIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MethodIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MethodIdResponse)));
        }

        /// <summary>
        ///      Disable a user&#x27;s card. ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Object</returns>
        public Object DeleteCardMethod (int? methodId)
        {
             ApiResponse<Object> localVarResponse = DeleteCardMethodWithHttpInfo(methodId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Disable a user&#x27;s card. ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteCardMethodWithHttpInfo (int? methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling MethodsApi->DeleteCardMethod");

            var localVarPath = "/v3/card_methods/{method_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (methodId != null) localVarPathParams.Add("method_id", this.Configuration.ApiClient.ParameterToString(methodId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCardMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///      Disable a user&#x27;s card. ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteCardMethodAsync (int? methodId)
        {
             ApiResponse<Object> localVarResponse = await DeleteCardMethodAsyncWithHttpInfo(methodId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Disable a user&#x27;s card. ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCardMethodAsyncWithHttpInfo (int? methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling MethodsApi->DeleteCardMethod");

            var localVarPath = "/v3/card_methods/{method_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (methodId != null) localVarPathParams.Add("method_id", this.Configuration.ApiClient.ParameterToString(methodId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCardMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///      Disable a user&#x27;s bank account. ## Description The user will no longer be able to deposit/withdraw with the bank account.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Object</returns>
        public Object DeleteOpenBankTransferMethod (int? methodId)
        {
             ApiResponse<Object> localVarResponse = DeleteOpenBankTransferMethodWithHttpInfo(methodId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Disable a user&#x27;s bank account. ## Description The user will no longer be able to deposit/withdraw with the bank account.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteOpenBankTransferMethodWithHttpInfo (int? methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling MethodsApi->DeleteOpenBankTransferMethod");

            var localVarPath = "/v3/open_bank_transfer_methods/{method_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (methodId != null) localVarPathParams.Add("method_id", this.Configuration.ApiClient.ParameterToString(methodId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOpenBankTransferMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///      Disable a user&#x27;s bank account. ## Description The user will no longer be able to deposit/withdraw with the bank account.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteOpenBankTransferMethodAsync (int? methodId)
        {
             ApiResponse<Object> localVarResponse = await DeleteOpenBankTransferMethodAsyncWithHttpInfo(methodId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Disable a user&#x27;s bank account. ## Description The user will no longer be able to deposit/withdraw with the bank account.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOpenBankTransferMethodAsyncWithHttpInfo (int? methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling MethodsApi->DeleteOpenBankTransferMethod");

            var localVarPath = "/v3/open_bank_transfer_methods/{method_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (methodId != null) localVarPathParams.Add("method_id", this.Configuration.ApiClient.ParameterToString(methodId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOpenBankTransferMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///      Disable a user&#x27;s card. ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Object</returns>
        public Object DeleteWorldpayMethod (int? methodId)
        {
             ApiResponse<Object> localVarResponse = DeleteWorldpayMethodWithHttpInfo(methodId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Disable a user&#x27;s card. ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteWorldpayMethodWithHttpInfo (int? methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling MethodsApi->DeleteWorldpayMethod");

            var localVarPath = "/v3/worldpay_methods/{method_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (methodId != null) localVarPathParams.Add("method_id", this.Configuration.ApiClient.ParameterToString(methodId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorldpayMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///      Disable a user&#x27;s card. ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteWorldpayMethodAsync (int? methodId)
        {
             ApiResponse<Object> localVarResponse = await DeleteWorldpayMethodAsyncWithHttpInfo(methodId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Disable a user&#x27;s card. ## Description The user will no longer be able to deposit/withdraw with the card.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorldpayMethodAsyncWithHttpInfo (int? methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling MethodsApi->DeleteWorldpayMethod");

            var localVarPath = "/v3/worldpay_methods/{method_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (methodId != null) localVarPathParams.Add("method_id", this.Configuration.ApiClient.ParameterToString(methodId)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorldpayMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get all payment methods available for depositing funds from the user&#x27;s account. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DepositMethodsResponse</returns>
        public DepositMethodsResponse GetDepositMethods ()
        {
             ApiResponse<DepositMethodsResponse> localVarResponse = GetDepositMethodsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all payment methods available for depositing funds from the user&#x27;s account. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DepositMethodsResponse</returns>
        public ApiResponse< DepositMethodsResponse > GetDepositMethodsWithHttpInfo ()
        {

            var localVarPath = "/v3/deposit_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepositMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositMethodsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositMethodsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositMethodsResponse)));
        }

        /// <summary>
        /// Get all payment methods available for depositing funds from the user&#x27;s account. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DepositMethodsResponse</returns>
        public async System.Threading.Tasks.Task<DepositMethodsResponse> GetDepositMethodsAsync ()
        {
             ApiResponse<DepositMethodsResponse> localVarResponse = await GetDepositMethodsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all payment methods available for depositing funds from the user&#x27;s account. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DepositMethodsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepositMethodsResponse>> GetDepositMethodsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/deposit_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepositMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositMethodsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositMethodsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositMethodsResponse)));
        }

        /// <summary>
        ///      Get the open bank transfer providers. ## Description This route returns all the available open bank transfer payment providers in Smarkets, even if the user has no active methods for them. This can be used to display a bank selection dialog and to fetch provider_id before adding the method.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20052</returns>
        public InlineResponse20052 GetOpenBankTransferProviders ()
        {
             ApiResponse<InlineResponse20052> localVarResponse = GetOpenBankTransferProvidersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Get the open bank transfer providers. ## Description This route returns all the available open bank transfer payment providers in Smarkets, even if the user has no active methods for them. This can be used to display a bank selection dialog and to fetch provider_id before adding the method.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        public ApiResponse< InlineResponse20052 > GetOpenBankTransferProvidersWithHttpInfo ()
        {

            var localVarPath = "/v3/open_bank_transfer_methods/providers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenBankTransferProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20052>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20052) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20052)));
        }

        /// <summary>
        ///      Get the open bank transfer providers. ## Description This route returns all the available open bank transfer payment providers in Smarkets, even if the user has no active methods for them. This can be used to display a bank selection dialog and to fetch provider_id before adding the method.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20052</returns>
        public async System.Threading.Tasks.Task<InlineResponse20052> GetOpenBankTransferProvidersAsync ()
        {
             ApiResponse<InlineResponse20052> localVarResponse = await GetOpenBankTransferProvidersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Get the open bank transfer providers. ## Description This route returns all the available open bank transfer payment providers in Smarkets, even if the user has no active methods for them. This can be used to display a bank selection dialog and to fetch provider_id before adding the method.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> GetOpenBankTransferProvidersAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/open_bank_transfer_methods/providers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenBankTransferProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20052>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20052) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20052)));
        }

        /// <summary>
        ///      Get payment provider features. ## Description This route returns the different deposit and withdrawal options available together with the minimum and maximum transaction amount, daily limit, processing time and customer fee.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProviderFeaturesResponse</returns>
        public ProviderFeaturesResponse GetPaymentProviderFeatures ()
        {
             ApiResponse<ProviderFeaturesResponse> localVarResponse = GetPaymentProviderFeaturesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Get payment provider features. ## Description This route returns the different deposit and withdrawal options available together with the minimum and maximum transaction amount, daily limit, processing time and customer fee.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProviderFeaturesResponse</returns>
        public ApiResponse< ProviderFeaturesResponse > GetPaymentProviderFeaturesWithHttpInfo ()
        {

            var localVarPath = "/v3/providers/features/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentProviderFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderFeaturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderFeaturesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderFeaturesResponse)));
        }

        /// <summary>
        ///      Get payment provider features. ## Description This route returns the different deposit and withdrawal options available together with the minimum and maximum transaction amount, daily limit, processing time and customer fee.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProviderFeaturesResponse</returns>
        public async System.Threading.Tasks.Task<ProviderFeaturesResponse> GetPaymentProviderFeaturesAsync ()
        {
             ApiResponse<ProviderFeaturesResponse> localVarResponse = await GetPaymentProviderFeaturesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Get payment provider features. ## Description This route returns the different deposit and withdrawal options available together with the minimum and maximum transaction amount, daily limit, processing time and customer fee.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProviderFeaturesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProviderFeaturesResponse>> GetPaymentProviderFeaturesAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/providers/features/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPaymentProviderFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderFeaturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderFeaturesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderFeaturesResponse)));
        }

        /// <summary>
        ///      Get the payment providers. ## Description This route returns all the available payment providers in Smarkets, even if the user has no active methods for them. This can be used to display maximum and minimum amounts for deposits/withdrawals  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodType"></param>
        /// <returns>ProvidersResponse</returns>
        public ProvidersResponse GetProviders (string methodType)
        {
             ApiResponse<ProvidersResponse> localVarResponse = GetProvidersWithHttpInfo(methodType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Get the payment providers. ## Description This route returns all the available payment providers in Smarkets, even if the user has no active methods for them. This can be used to display maximum and minimum amounts for deposits/withdrawals  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodType"></param>
        /// <returns>ApiResponse of ProvidersResponse</returns>
        public ApiResponse< ProvidersResponse > GetProvidersWithHttpInfo (string methodType)
        {
            // verify the required parameter 'methodType' is set
            if (methodType == null)
                throw new ApiException(400, "Missing required parameter 'methodType' when calling MethodsApi->GetProviders");

            var localVarPath = "/v3/{method_type}_methods/providers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (methodType != null) localVarPathParams.Add("method_type", this.Configuration.ApiClient.ParameterToString(methodType)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvidersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProvidersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvidersResponse)));
        }

        /// <summary>
        ///      Get the payment providers. ## Description This route returns all the available payment providers in Smarkets, even if the user has no active methods for them. This can be used to display maximum and minimum amounts for deposits/withdrawals  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodType"></param>
        /// <returns>Task of ProvidersResponse</returns>
        public async System.Threading.Tasks.Task<ProvidersResponse> GetProvidersAsync (string methodType)
        {
             ApiResponse<ProvidersResponse> localVarResponse = await GetProvidersAsyncWithHttpInfo(methodType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Get the payment providers. ## Description This route returns all the available payment providers in Smarkets, even if the user has no active methods for them. This can be used to display maximum and minimum amounts for deposits/withdrawals  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodType"></param>
        /// <returns>Task of ApiResponse (ProvidersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProvidersResponse>> GetProvidersAsyncWithHttpInfo (string methodType)
        {
            // verify the required parameter 'methodType' is set
            if (methodType == null)
                throw new ApiException(400, "Missing required parameter 'methodType' when calling MethodsApi->GetProviders");

            var localVarPath = "/v3/{method_type}_methods/providers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (methodType != null) localVarPathParams.Add("method_type", this.Configuration.ApiClient.ParameterToString(methodType)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvidersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProvidersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvidersResponse)));
        }

        /// <summary>
        /// Get all payment methods available for withdrawing funds from the user&#x27;s account. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20068</returns>
        public InlineResponse20068 GetWithdrawalMethods ()
        {
             ApiResponse<InlineResponse20068> localVarResponse = GetWithdrawalMethodsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all payment methods available for withdrawing funds from the user&#x27;s account. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20068</returns>
        public ApiResponse< InlineResponse20068 > GetWithdrawalMethodsWithHttpInfo ()
        {

            var localVarPath = "/v3/withdrawal_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWithdrawalMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20068>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20068) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20068)));
        }

        /// <summary>
        /// Get all payment methods available for withdrawing funds from the user&#x27;s account. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20068</returns>
        public async System.Threading.Tasks.Task<InlineResponse20068> GetWithdrawalMethodsAsync ()
        {
             ApiResponse<InlineResponse20068> localVarResponse = await GetWithdrawalMethodsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all payment methods available for withdrawing funds from the user&#x27;s account. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20068)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20068>> GetWithdrawalMethodsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/withdrawal_methods/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWithdrawalMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20068>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20068) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20068)));
        }

        /// <summary>
        ///      Update the billing address for this method. ## Description This can be called if a user moves house or has mis-typed their address and wants to change it.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>MethodAddress</returns>
        public MethodAddress PutCardMethodBillingAddress (int? methodId, MethodAddress body = null)
        {
             ApiResponse<MethodAddress> localVarResponse = PutCardMethodBillingAddressWithHttpInfo(methodId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///      Update the billing address for this method. ## Description This can be called if a user moves house or has mis-typed their address and wants to change it.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>ApiResponse of MethodAddress</returns>
        public ApiResponse< MethodAddress > PutCardMethodBillingAddressWithHttpInfo (int? methodId, MethodAddress body = null)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling MethodsApi->PutCardMethodBillingAddress");

            var localVarPath = "/v3/card_methods/{method_id}/billing_address/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (methodId != null) localVarPathParams.Add("method_id", this.Configuration.ApiClient.ParameterToString(methodId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCardMethodBillingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MethodAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MethodAddress) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MethodAddress)));
        }

        /// <summary>
        ///      Update the billing address for this method. ## Description This can be called if a user moves house or has mis-typed their address and wants to change it.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of MethodAddress</returns>
        public async System.Threading.Tasks.Task<MethodAddress> PutCardMethodBillingAddressAsync (int? methodId, MethodAddress body = null)
        {
             ApiResponse<MethodAddress> localVarResponse = await PutCardMethodBillingAddressAsyncWithHttpInfo(methodId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///      Update the billing address for this method. ## Description This can be called if a user moves house or has mis-typed their address and wants to change it.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId"></param>
        /// <param name="body">JSON Request object (optional)</param>
        /// <returns>Task of ApiResponse (MethodAddress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MethodAddress>> PutCardMethodBillingAddressAsyncWithHttpInfo (int? methodId, MethodAddress body = null)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling MethodsApi->PutCardMethodBillingAddress");

            var localVarPath = "/v3/card_methods/{method_id}/billing_address/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (methodId != null) localVarPathParams.Add("method_id", this.Configuration.ApiClient.ParameterToString(methodId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCardMethodBillingAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MethodAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MethodAddress) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MethodAddress)));
        }

    }
}
