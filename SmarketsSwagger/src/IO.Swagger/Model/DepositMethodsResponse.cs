/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DepositMethodsResponse
    /// </summary>
    [DataContract]
        public partial class DepositMethodsResponse :  IEquatable<DepositMethodsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepositMethodsResponse" /> class.
        /// </summary>
        /// <param name="bankTransfer">bankTransfer (required).</param>
        /// <param name="card">card (required).</param>
        /// <param name="neteller">neteller (required).</param>
        /// <param name="openBankTransfer">openBankTransfer (required).</param>
        /// <param name="paypal">paypal (required).</param>
        /// <param name="skrill">skrill (required).</param>
        /// <param name="trustly">trustly (required).</param>
        /// <param name="worldpay">worldpay (required).</param>
        public DepositMethodsResponse(List<OneOfdepositMethodsResponseBankTransferItems> bankTransfer = default(List<OneOfdepositMethodsResponseBankTransferItems>), List<DepositMethodsResponseCard> card = default(List<DepositMethodsResponseCard>), List<DepositMethodsResponseNeteller> neteller = default(List<DepositMethodsResponseNeteller>), List<DepositMethodsResponseOpenBankTransfer> openBankTransfer = default(List<DepositMethodsResponseOpenBankTransfer>), List<DepositMethodsResponsePaypal> paypal = default(List<DepositMethodsResponsePaypal>), List<DepositMethodsResponseSkrill> skrill = default(List<DepositMethodsResponseSkrill>), List<DepositMethodsResponseTrustly> trustly = default(List<DepositMethodsResponseTrustly>), List<DepositMethodsResponseWorldpay> worldpay = default(List<DepositMethodsResponseWorldpay>))
        {
            // to ensure "bankTransfer" is required (not null)
            if (bankTransfer == null)
            {
                throw new InvalidDataException("bankTransfer is a required property for DepositMethodsResponse and cannot be null");
            }
            else
            {
                this.BankTransfer = bankTransfer;
            }
            // to ensure "card" is required (not null)
            if (card == null)
            {
                throw new InvalidDataException("card is a required property for DepositMethodsResponse and cannot be null");
            }
            else
            {
                this.Card = card;
            }
            // to ensure "neteller" is required (not null)
            if (neteller == null)
            {
                throw new InvalidDataException("neteller is a required property for DepositMethodsResponse and cannot be null");
            }
            else
            {
                this.Neteller = neteller;
            }
            // to ensure "openBankTransfer" is required (not null)
            if (openBankTransfer == null)
            {
                throw new InvalidDataException("openBankTransfer is a required property for DepositMethodsResponse and cannot be null");
            }
            else
            {
                this.OpenBankTransfer = openBankTransfer;
            }
            // to ensure "paypal" is required (not null)
            if (paypal == null)
            {
                throw new InvalidDataException("paypal is a required property for DepositMethodsResponse and cannot be null");
            }
            else
            {
                this.Paypal = paypal;
            }
            // to ensure "skrill" is required (not null)
            if (skrill == null)
            {
                throw new InvalidDataException("skrill is a required property for DepositMethodsResponse and cannot be null");
            }
            else
            {
                this.Skrill = skrill;
            }
            // to ensure "trustly" is required (not null)
            if (trustly == null)
            {
                throw new InvalidDataException("trustly is a required property for DepositMethodsResponse and cannot be null");
            }
            else
            {
                this.Trustly = trustly;
            }
            // to ensure "worldpay" is required (not null)
            if (worldpay == null)
            {
                throw new InvalidDataException("worldpay is a required property for DepositMethodsResponse and cannot be null");
            }
            else
            {
                this.Worldpay = worldpay;
            }
        }
        
        /// <summary>
        /// Gets or Sets BankTransfer
        /// </summary>
        [DataMember(Name="bank_transfer", EmitDefaultValue=false)]
        public List<OneOfdepositMethodsResponseBankTransferItems> BankTransfer { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public List<DepositMethodsResponseCard> Card { get; set; }

        /// <summary>
        /// Gets or Sets Neteller
        /// </summary>
        [DataMember(Name="neteller", EmitDefaultValue=false)]
        public List<DepositMethodsResponseNeteller> Neteller { get; set; }

        /// <summary>
        /// Gets or Sets OpenBankTransfer
        /// </summary>
        [DataMember(Name="open_bank_transfer", EmitDefaultValue=false)]
        public List<DepositMethodsResponseOpenBankTransfer> OpenBankTransfer { get; set; }

        /// <summary>
        /// Gets or Sets Paypal
        /// </summary>
        [DataMember(Name="paypal", EmitDefaultValue=false)]
        public List<DepositMethodsResponsePaypal> Paypal { get; set; }

        /// <summary>
        /// Gets or Sets Skrill
        /// </summary>
        [DataMember(Name="skrill", EmitDefaultValue=false)]
        public List<DepositMethodsResponseSkrill> Skrill { get; set; }

        /// <summary>
        /// Gets or Sets Trustly
        /// </summary>
        [DataMember(Name="trustly", EmitDefaultValue=false)]
        public List<DepositMethodsResponseTrustly> Trustly { get; set; }

        /// <summary>
        /// Gets or Sets Worldpay
        /// </summary>
        [DataMember(Name="worldpay", EmitDefaultValue=false)]
        public List<DepositMethodsResponseWorldpay> Worldpay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepositMethodsResponse {\n");
            sb.Append("  BankTransfer: ").Append(BankTransfer).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  Neteller: ").Append(Neteller).Append("\n");
            sb.Append("  OpenBankTransfer: ").Append(OpenBankTransfer).Append("\n");
            sb.Append("  Paypal: ").Append(Paypal).Append("\n");
            sb.Append("  Skrill: ").Append(Skrill).Append("\n");
            sb.Append("  Trustly: ").Append(Trustly).Append("\n");
            sb.Append("  Worldpay: ").Append(Worldpay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepositMethodsResponse);
        }

        /// <summary>
        /// Returns true if DepositMethodsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DepositMethodsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepositMethodsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankTransfer == input.BankTransfer ||
                    this.BankTransfer != null &&
                    input.BankTransfer != null &&
                    this.BankTransfer.SequenceEqual(input.BankTransfer)
                ) && 
                (
                    this.Card == input.Card ||
                    this.Card != null &&
                    input.Card != null &&
                    this.Card.SequenceEqual(input.Card)
                ) && 
                (
                    this.Neteller == input.Neteller ||
                    this.Neteller != null &&
                    input.Neteller != null &&
                    this.Neteller.SequenceEqual(input.Neteller)
                ) && 
                (
                    this.OpenBankTransfer == input.OpenBankTransfer ||
                    this.OpenBankTransfer != null &&
                    input.OpenBankTransfer != null &&
                    this.OpenBankTransfer.SequenceEqual(input.OpenBankTransfer)
                ) && 
                (
                    this.Paypal == input.Paypal ||
                    this.Paypal != null &&
                    input.Paypal != null &&
                    this.Paypal.SequenceEqual(input.Paypal)
                ) && 
                (
                    this.Skrill == input.Skrill ||
                    this.Skrill != null &&
                    input.Skrill != null &&
                    this.Skrill.SequenceEqual(input.Skrill)
                ) && 
                (
                    this.Trustly == input.Trustly ||
                    this.Trustly != null &&
                    input.Trustly != null &&
                    this.Trustly.SequenceEqual(input.Trustly)
                ) && 
                (
                    this.Worldpay == input.Worldpay ||
                    this.Worldpay != null &&
                    input.Worldpay != null &&
                    this.Worldpay.SequenceEqual(input.Worldpay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankTransfer != null)
                    hashCode = hashCode * 59 + this.BankTransfer.GetHashCode();
                if (this.Card != null)
                    hashCode = hashCode * 59 + this.Card.GetHashCode();
                if (this.Neteller != null)
                    hashCode = hashCode * 59 + this.Neteller.GetHashCode();
                if (this.OpenBankTransfer != null)
                    hashCode = hashCode * 59 + this.OpenBankTransfer.GetHashCode();
                if (this.Paypal != null)
                    hashCode = hashCode * 59 + this.Paypal.GetHashCode();
                if (this.Skrill != null)
                    hashCode = hashCode * 59 + this.Skrill.GetHashCode();
                if (this.Trustly != null)
                    hashCode = hashCode * 59 + this.Trustly.GetHashCode();
                if (this.Worldpay != null)
                    hashCode = hashCode * 59 + this.Worldpay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
