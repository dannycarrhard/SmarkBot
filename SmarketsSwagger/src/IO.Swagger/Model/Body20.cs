/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body20
    /// </summary>
    [DataContract]
        public partial class Body20 :  IEquatable<Body20>, IValidatableObject
    {
        /// <summary>
        /// Defines ExpiryMonth
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExpiryMonthEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,
            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 2,
            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 3,
            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            [EnumMember(Value = "04")]
            _04 = 4,
            /// <summary>
            /// Enum _05 for value: 05
            /// </summary>
            [EnumMember(Value = "05")]
            _05 = 5,
            /// <summary>
            /// Enum _06 for value: 06
            /// </summary>
            [EnumMember(Value = "06")]
            _06 = 6,
            /// <summary>
            /// Enum _07 for value: 07
            /// </summary>
            [EnumMember(Value = "07")]
            _07 = 7,
            /// <summary>
            /// Enum _08 for value: 08
            /// </summary>
            [EnumMember(Value = "08")]
            _08 = 8,
            /// <summary>
            /// Enum _09 for value: 09
            /// </summary>
            [EnumMember(Value = "09")]
            _09 = 9,
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 10,
            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 11,
            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 12        }
        /// <summary>
        /// Gets or Sets ExpiryMonth
        /// </summary>
        [DataMember(Name="expiry_month", EmitDefaultValue=false)]
        public ExpiryMonthEnum ExpiryMonth { get; set; }
        /// <summary>
        /// Defines ExpiryYear
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExpiryYearEnum
        {
            /// <summary>
            /// Enum _2020 for value: 2020
            /// </summary>
            [EnumMember(Value = "2020")]
            _2020 = 1,
            /// <summary>
            /// Enum _2021 for value: 2021
            /// </summary>
            [EnumMember(Value = "2021")]
            _2021 = 2,
            /// <summary>
            /// Enum _2022 for value: 2022
            /// </summary>
            [EnumMember(Value = "2022")]
            _2022 = 3,
            /// <summary>
            /// Enum _2023 for value: 2023
            /// </summary>
            [EnumMember(Value = "2023")]
            _2023 = 4,
            /// <summary>
            /// Enum _2024 for value: 2024
            /// </summary>
            [EnumMember(Value = "2024")]
            _2024 = 5,
            /// <summary>
            /// Enum _2025 for value: 2025
            /// </summary>
            [EnumMember(Value = "2025")]
            _2025 = 6,
            /// <summary>
            /// Enum _2026 for value: 2026
            /// </summary>
            [EnumMember(Value = "2026")]
            _2026 = 7,
            /// <summary>
            /// Enum _2027 for value: 2027
            /// </summary>
            [EnumMember(Value = "2027")]
            _2027 = 8,
            /// <summary>
            /// Enum _2028 for value: 2028
            /// </summary>
            [EnumMember(Value = "2028")]
            _2028 = 9,
            /// <summary>
            /// Enum _2029 for value: 2029
            /// </summary>
            [EnumMember(Value = "2029")]
            _2029 = 10,
            /// <summary>
            /// Enum _2030 for value: 2030
            /// </summary>
            [EnumMember(Value = "2030")]
            _2030 = 11,
            /// <summary>
            /// Enum _2031 for value: 2031
            /// </summary>
            [EnumMember(Value = "2031")]
            _2031 = 12,
            /// <summary>
            /// Enum _2032 for value: 2032
            /// </summary>
            [EnumMember(Value = "2032")]
            _2032 = 13,
            /// <summary>
            /// Enum _2033 for value: 2033
            /// </summary>
            [EnumMember(Value = "2033")]
            _2033 = 14,
            /// <summary>
            /// Enum _2034 for value: 2034
            /// </summary>
            [EnumMember(Value = "2034")]
            _2034 = 15,
            /// <summary>
            /// Enum _2035 for value: 2035
            /// </summary>
            [EnumMember(Value = "2035")]
            _2035 = 16,
            /// <summary>
            /// Enum _2036 for value: 2036
            /// </summary>
            [EnumMember(Value = "2036")]
            _2036 = 17,
            /// <summary>
            /// Enum _2037 for value: 2037
            /// </summary>
            [EnumMember(Value = "2037")]
            _2037 = 18,
            /// <summary>
            /// Enum _2038 for value: 2038
            /// </summary>
            [EnumMember(Value = "2038")]
            _2038 = 19,
            /// <summary>
            /// Enum _2039 for value: 2039
            /// </summary>
            [EnumMember(Value = "2039")]
            _2039 = 20,
            /// <summary>
            /// Enum _2040 for value: 2040
            /// </summary>
            [EnumMember(Value = "2040")]
            _2040 = 21,
            /// <summary>
            /// Enum _2041 for value: 2041
            /// </summary>
            [EnumMember(Value = "2041")]
            _2041 = 22,
            /// <summary>
            /// Enum _2042 for value: 2042
            /// </summary>
            [EnumMember(Value = "2042")]
            _2042 = 23,
            /// <summary>
            /// Enum _2043 for value: 2043
            /// </summary>
            [EnumMember(Value = "2043")]
            _2043 = 24,
            /// <summary>
            /// Enum _2044 for value: 2044
            /// </summary>
            [EnumMember(Value = "2044")]
            _2044 = 25,
            /// <summary>
            /// Enum _2045 for value: 2045
            /// </summary>
            [EnumMember(Value = "2045")]
            _2045 = 26,
            /// <summary>
            /// Enum _2046 for value: 2046
            /// </summary>
            [EnumMember(Value = "2046")]
            _2046 = 27,
            /// <summary>
            /// Enum _2047 for value: 2047
            /// </summary>
            [EnumMember(Value = "2047")]
            _2047 = 28,
            /// <summary>
            /// Enum _2048 for value: 2048
            /// </summary>
            [EnumMember(Value = "2048")]
            _2048 = 29,
            /// <summary>
            /// Enum _2049 for value: 2049
            /// </summary>
            [EnumMember(Value = "2049")]
            _2049 = 30,
            /// <summary>
            /// Enum _2050 for value: 2050
            /// </summary>
            [EnumMember(Value = "2050")]
            _2050 = 31,
            /// <summary>
            /// Enum _2051 for value: 2051
            /// </summary>
            [EnumMember(Value = "2051")]
            _2051 = 32,
            /// <summary>
            /// Enum _2052 for value: 2052
            /// </summary>
            [EnumMember(Value = "2052")]
            _2052 = 33,
            /// <summary>
            /// Enum _2053 for value: 2053
            /// </summary>
            [EnumMember(Value = "2053")]
            _2053 = 34,
            /// <summary>
            /// Enum _2054 for value: 2054
            /// </summary>
            [EnumMember(Value = "2054")]
            _2054 = 35,
            /// <summary>
            /// Enum _2055 for value: 2055
            /// </summary>
            [EnumMember(Value = "2055")]
            _2055 = 36,
            /// <summary>
            /// Enum _2056 for value: 2056
            /// </summary>
            [EnumMember(Value = "2056")]
            _2056 = 37,
            /// <summary>
            /// Enum _2057 for value: 2057
            /// </summary>
            [EnumMember(Value = "2057")]
            _2057 = 38,
            /// <summary>
            /// Enum _2058 for value: 2058
            /// </summary>
            [EnumMember(Value = "2058")]
            _2058 = 39,
            /// <summary>
            /// Enum _2059 for value: 2059
            /// </summary>
            [EnumMember(Value = "2059")]
            _2059 = 40,
            /// <summary>
            /// Enum _2060 for value: 2060
            /// </summary>
            [EnumMember(Value = "2060")]
            _2060 = 41,
            /// <summary>
            /// Enum _2061 for value: 2061
            /// </summary>
            [EnumMember(Value = "2061")]
            _2061 = 42,
            /// <summary>
            /// Enum _2062 for value: 2062
            /// </summary>
            [EnumMember(Value = "2062")]
            _2062 = 43,
            /// <summary>
            /// Enum _2063 for value: 2063
            /// </summary>
            [EnumMember(Value = "2063")]
            _2063 = 44,
            /// <summary>
            /// Enum _2064 for value: 2064
            /// </summary>
            [EnumMember(Value = "2064")]
            _2064 = 45,
            /// <summary>
            /// Enum _2065 for value: 2065
            /// </summary>
            [EnumMember(Value = "2065")]
            _2065 = 46,
            /// <summary>
            /// Enum _2066 for value: 2066
            /// </summary>
            [EnumMember(Value = "2066")]
            _2066 = 47,
            /// <summary>
            /// Enum _2067 for value: 2067
            /// </summary>
            [EnumMember(Value = "2067")]
            _2067 = 48,
            /// <summary>
            /// Enum _2068 for value: 2068
            /// </summary>
            [EnumMember(Value = "2068")]
            _2068 = 49,
            /// <summary>
            /// Enum _2069 for value: 2069
            /// </summary>
            [EnumMember(Value = "2069")]
            _2069 = 50        }
        /// <summary>
        /// Gets or Sets ExpiryYear
        /// </summary>
        [DataMember(Name="expiry_year", EmitDefaultValue=false)]
        public ExpiryYearEnum ExpiryYear { get; set; }
        /// <summary>
        /// Defines Issuer
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum IssuerEnum
        {
            /// <summary>
            /// Enum Visa for value: visa
            /// </summary>
            [EnumMember(Value = "visa")]
            Visa = 1,
            /// <summary>
            /// Enum Maestro for value: maestro
            /// </summary>
            [EnumMember(Value = "maestro")]
            Maestro = 2,
            /// <summary>
            /// Enum Mastercard for value: mastercard
            /// </summary>
            [EnumMember(Value = "mastercard")]
            Mastercard = 3        }
        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public IssuerEnum Issuer { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body20" /> class.
        /// </summary>
        /// <param name="billingAddress">billingAddress (required).</param>
        /// <param name="bin">bin (required).</param>
        /// <param name="cardholderName">cardholderName (required).</param>
        /// <param name="expiryMonth">expiryMonth (required).</param>
        /// <param name="expiryYear">expiryYear (required).</param>
        /// <param name="issuer">issuer (required).</param>
        /// <param name="lastFour">lastFour (required).</param>
        /// <param name="threeDSecure">threeDSecure (required).</param>
        /// <param name="token">token (required).</param>
        public Body20(MethodAddress1 billingAddress = default(MethodAddress1), string bin = default(string), string cardholderName = default(string), ExpiryMonthEnum expiryMonth = default(ExpiryMonthEnum), ExpiryYearEnum expiryYear = default(ExpiryYearEnum), IssuerEnum issuer = default(IssuerEnum), string lastFour = default(string), bool? threeDSecure = default(bool?), string token = default(string))
        {
            // to ensure "billingAddress" is required (not null)
            if (billingAddress == null)
            {
                throw new InvalidDataException("billingAddress is a required property for Body20 and cannot be null");
            }
            else
            {
                this.BillingAddress = billingAddress;
            }
            // to ensure "bin" is required (not null)
            if (bin == null)
            {
                throw new InvalidDataException("bin is a required property for Body20 and cannot be null");
            }
            else
            {
                this.Bin = bin;
            }
            // to ensure "cardholderName" is required (not null)
            if (cardholderName == null)
            {
                throw new InvalidDataException("cardholderName is a required property for Body20 and cannot be null");
            }
            else
            {
                this.CardholderName = cardholderName;
            }
            // to ensure "expiryMonth" is required (not null)
            if (expiryMonth == null)
            {
                throw new InvalidDataException("expiryMonth is a required property for Body20 and cannot be null");
            }
            else
            {
                this.ExpiryMonth = expiryMonth;
            }
            // to ensure "expiryYear" is required (not null)
            if (expiryYear == null)
            {
                throw new InvalidDataException("expiryYear is a required property for Body20 and cannot be null");
            }
            else
            {
                this.ExpiryYear = expiryYear;
            }
            // to ensure "issuer" is required (not null)
            if (issuer == null)
            {
                throw new InvalidDataException("issuer is a required property for Body20 and cannot be null");
            }
            else
            {
                this.Issuer = issuer;
            }
            // to ensure "lastFour" is required (not null)
            if (lastFour == null)
            {
                throw new InvalidDataException("lastFour is a required property for Body20 and cannot be null");
            }
            else
            {
                this.LastFour = lastFour;
            }
            // to ensure "threeDSecure" is required (not null)
            if (threeDSecure == null)
            {
                throw new InvalidDataException("threeDSecure is a required property for Body20 and cannot be null");
            }
            else
            {
                this.ThreeDSecure = threeDSecure;
            }
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for Body20 and cannot be null");
            }
            else
            {
                this.Token = token;
            }
        }
        
        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="billing_address", EmitDefaultValue=false)]
        public MethodAddress1 BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets Bin
        /// </summary>
        [DataMember(Name="bin", EmitDefaultValue=false)]
        public string Bin { get; set; }

        /// <summary>
        /// Gets or Sets CardholderName
        /// </summary>
        [DataMember(Name="cardholder_name", EmitDefaultValue=false)]
        public string CardholderName { get; set; }




        /// <summary>
        /// Gets or Sets LastFour
        /// </summary>
        [DataMember(Name="last_four", EmitDefaultValue=false)]
        public string LastFour { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSecure
        /// </summary>
        [DataMember(Name="three_d_secure", EmitDefaultValue=false)]
        public bool? ThreeDSecure { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body20 {\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  CardholderName: ").Append(CardholderName).Append("\n");
            sb.Append("  ExpiryMonth: ").Append(ExpiryMonth).Append("\n");
            sb.Append("  ExpiryYear: ").Append(ExpiryYear).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  LastFour: ").Append(LastFour).Append("\n");
            sb.Append("  ThreeDSecure: ").Append(ThreeDSecure).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body20);
        }

        /// <summary>
        /// Returns true if Body20 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body20 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body20 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.Bin == input.Bin ||
                    (this.Bin != null &&
                    this.Bin.Equals(input.Bin))
                ) && 
                (
                    this.CardholderName == input.CardholderName ||
                    (this.CardholderName != null &&
                    this.CardholderName.Equals(input.CardholderName))
                ) && 
                (
                    this.ExpiryMonth == input.ExpiryMonth ||
                    (this.ExpiryMonth != null &&
                    this.ExpiryMonth.Equals(input.ExpiryMonth))
                ) && 
                (
                    this.ExpiryYear == input.ExpiryYear ||
                    (this.ExpiryYear != null &&
                    this.ExpiryYear.Equals(input.ExpiryYear))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.LastFour == input.LastFour ||
                    (this.LastFour != null &&
                    this.LastFour.Equals(input.LastFour))
                ) && 
                (
                    this.ThreeDSecure == input.ThreeDSecure ||
                    (this.ThreeDSecure != null &&
                    this.ThreeDSecure.Equals(input.ThreeDSecure))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.Bin != null)
                    hashCode = hashCode * 59 + this.Bin.GetHashCode();
                if (this.CardholderName != null)
                    hashCode = hashCode * 59 + this.CardholderName.GetHashCode();
                if (this.ExpiryMonth != null)
                    hashCode = hashCode * 59 + this.ExpiryMonth.GetHashCode();
                if (this.ExpiryYear != null)
                    hashCode = hashCode * 59 + this.ExpiryYear.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.LastFour != null)
                    hashCode = hashCode * 59 + this.LastFour.GetHashCode();
                if (this.ThreeDSecure != null)
                    hashCode = hashCode * 59 + this.ThreeDSecure.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
