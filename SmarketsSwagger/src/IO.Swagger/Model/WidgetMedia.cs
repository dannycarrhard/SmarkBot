/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WidgetMedia
    /// </summary>
    [DataContract]
        public partial class WidgetMedia :  IEquatable<WidgetMedia>, IValidatableObject
    {
        /// <summary>
        /// Defines Media
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MediaEnum
        {
            /// <summary>
            /// Enum Phone for value: phone
            /// </summary>
            [EnumMember(Value = "phone")]
            Phone = 1,
            /// <summary>
            /// Enum Tablet for value: tablet
            /// </summary>
            [EnumMember(Value = "tablet")]
            Tablet = 2,
            /// <summary>
            /// Enum Desktop for value: desktop
            /// </summary>
            [EnumMember(Value = "desktop")]
            Desktop = 3,
            /// <summary>
            /// Enum HugeDesktop for value: hugeDesktop
            /// </summary>
            [EnumMember(Value = "hugeDesktop")]
            HugeDesktop = 4,
            /// <summary>
            /// Enum App for value: app
            /// </summary>
            [EnumMember(Value = "app")]
            App = 5,
            /// <summary>
            /// Enum Sbk for value: sbk
            /// </summary>
            [EnumMember(Value = "sbk")]
            Sbk = 6        }
        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public MediaEnum Media { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WidgetMedia" /> class.
        /// </summary>
        /// <param name="isInherited">isInherited (required).</param>
        /// <param name="media">media (required).</param>
        /// <param name="slides">slides (required).</param>
        public WidgetMedia(bool? isInherited = default(bool?), MediaEnum media = default(MediaEnum), List<string> slides = default(List<string>))
        {
            // to ensure "isInherited" is required (not null)
            if (isInherited == null)
            {
                throw new InvalidDataException("isInherited is a required property for WidgetMedia and cannot be null");
            }
            else
            {
                this.IsInherited = isInherited;
            }
            // to ensure "media" is required (not null)
            if (media == null)
            {
                throw new InvalidDataException("media is a required property for WidgetMedia and cannot be null");
            }
            else
            {
                this.Media = media;
            }
            // to ensure "slides" is required (not null)
            if (slides == null)
            {
                throw new InvalidDataException("slides is a required property for WidgetMedia and cannot be null");
            }
            else
            {
                this.Slides = slides;
            }
        }
        
        /// <summary>
        /// Gets or Sets IsInherited
        /// </summary>
        [DataMember(Name="is_inherited", EmitDefaultValue=false)]
        public bool? IsInherited { get; set; }


        /// <summary>
        /// Gets or Sets Slides
        /// </summary>
        [DataMember(Name="slides", EmitDefaultValue=false)]
        public List<string> Slides { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WidgetMedia {\n");
            sb.Append("  IsInherited: ").Append(IsInherited).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Slides: ").Append(Slides).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WidgetMedia);
        }

        /// <summary>
        /// Returns true if WidgetMedia instances are equal
        /// </summary>
        /// <param name="input">Instance of WidgetMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WidgetMedia input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsInherited == input.IsInherited ||
                    (this.IsInherited != null &&
                    this.IsInherited.Equals(input.IsInherited))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.Slides == input.Slides ||
                    this.Slides != null &&
                    input.Slides != null &&
                    this.Slides.SequenceEqual(input.Slides)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsInherited != null)
                    hashCode = hashCode * 59 + this.IsInherited.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.Slides != null)
                    hashCode = hashCode * 59 + this.Slides.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
