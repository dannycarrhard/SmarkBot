/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EventState
    /// </summary>
    [DataContract]
        public partial class EventState :  IEquatable<EventState>, IValidatableObject
    {
        /// <summary>
        /// The current period of the match
        /// </summary>
        /// <value>The current period of the match</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MatchPeriodEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum Firsthalf for value: first_half
            /// </summary>
            [EnumMember(Value = "first_half")]
            Firsthalf = 2,
            /// <summary>
            /// Enum Secondhalf for value: second_half
            /// </summary>
            [EnumMember(Value = "second_half")]
            Secondhalf = 3,
            /// <summary>
            /// Enum Extratimefirsthalf for value: extra_time_first_half
            /// </summary>
            [EnumMember(Value = "extra_time_first_half")]
            Extratimefirsthalf = 4,
            /// <summary>
            /// Enum Extratimesecondhalf for value: extra_time_second_half
            /// </summary>
            [EnumMember(Value = "extra_time_second_half")]
            Extratimesecondhalf = 5,
            /// <summary>
            /// Enum Penaltyshootout for value: penalty_shootout
            /// </summary>
            [EnumMember(Value = "penalty_shootout")]
            Penaltyshootout = 6,
            /// <summary>
            /// Enum Halftime for value: half_time
            /// </summary>
            [EnumMember(Value = "half_time")]
            Halftime = 7,
            /// <summary>
            /// Enum Endofsecondhalf for value: end_of_second_half
            /// </summary>
            [EnumMember(Value = "end_of_second_half")]
            Endofsecondhalf = 8,
            /// <summary>
            /// Enum Extratimehalftime for value: extra_time_half_time
            /// </summary>
            [EnumMember(Value = "extra_time_half_time")]
            Extratimehalftime = 9,
            /// <summary>
            /// Enum Endofextratime for value: end_of_extra_time
            /// </summary>
            [EnumMember(Value = "end_of_extra_time")]
            Endofextratime = 10,
            /// <summary>
            /// Enum Fulltime for value: full_time
            /// </summary>
            [EnumMember(Value = "full_time")]
            Fulltime = 11,
            /// <summary>
            /// Enum Prematch for value: pre_match
            /// </summary>
            [EnumMember(Value = "pre_match")]
            Prematch = 12,
            /// <summary>
            /// Enum Awaitingsuddendeath for value: awaiting_sudden_death
            /// </summary>
            [EnumMember(Value = "awaiting_sudden_death")]
            Awaitingsuddendeath = 13,
            /// <summary>
            /// Enum Suddendeath for value: sudden_death
            /// </summary>
            [EnumMember(Value = "sudden_death")]
            Suddendeath = 14,
            /// <summary>
            /// Enum Endofsuddendeath for value: end_of_sudden_death
            /// </summary>
            [EnumMember(Value = "end_of_sudden_death")]
            Endofsuddendeath = 15,
            /// <summary>
            /// Enum Awaitingextratime for value: awaiting_extra_time
            /// </summary>
            [EnumMember(Value = "awaiting_extra_time")]
            Awaitingextratime = 16,
            /// <summary>
            /// Enum Awaitingpenalties for value: awaiting_penalties
            /// </summary>
            [EnumMember(Value = "awaiting_penalties")]
            Awaitingpenalties = 17,
            /// <summary>
            /// Enum Endofpenaltyshootout for value: end_of_penalty_shootout
            /// </summary>
            [EnumMember(Value = "end_of_penalty_shootout")]
            Endofpenaltyshootout = 18,
            /// <summary>
            /// Enum Set1 for value: set_1
            /// </summary>
            [EnumMember(Value = "set_1")]
            Set1 = 19,
            /// <summary>
            /// Enum Map1 for value: map_1
            /// </summary>
            [EnumMember(Value = "map_1")]
            Map1 = 20,
            /// <summary>
            /// Enum Break1 for value: break_1
            /// </summary>
            [EnumMember(Value = "break_1")]
            Break1 = 21,
            /// <summary>
            /// Enum Set2 for value: set_2
            /// </summary>
            [EnumMember(Value = "set_2")]
            Set2 = 22,
            /// <summary>
            /// Enum Map2 for value: map_2
            /// </summary>
            [EnumMember(Value = "map_2")]
            Map2 = 23,
            /// <summary>
            /// Enum Break2 for value: break_2
            /// </summary>
            [EnumMember(Value = "break_2")]
            Break2 = 24,
            /// <summary>
            /// Enum Set3 for value: set_3
            /// </summary>
            [EnumMember(Value = "set_3")]
            Set3 = 25,
            /// <summary>
            /// Enum Map3 for value: map_3
            /// </summary>
            [EnumMember(Value = "map_3")]
            Map3 = 26,
            /// <summary>
            /// Enum Break3 for value: break_3
            /// </summary>
            [EnumMember(Value = "break_3")]
            Break3 = 27,
            /// <summary>
            /// Enum Set4 for value: set_4
            /// </summary>
            [EnumMember(Value = "set_4")]
            Set4 = 28,
            /// <summary>
            /// Enum Map4 for value: map_4
            /// </summary>
            [EnumMember(Value = "map_4")]
            Map4 = 29,
            /// <summary>
            /// Enum Break4 for value: break_4
            /// </summary>
            [EnumMember(Value = "break_4")]
            Break4 = 30,
            /// <summary>
            /// Enum Set5 for value: set_5
            /// </summary>
            [EnumMember(Value = "set_5")]
            Set5 = 31,
            /// <summary>
            /// Enum Map5 for value: map_5
            /// </summary>
            [EnumMember(Value = "map_5")]
            Map5 = 32,
            /// <summary>
            /// Enum Break5 for value: break_5
            /// </summary>
            [EnumMember(Value = "break_5")]
            Break5 = 33,
            /// <summary>
            /// Enum Set6 for value: set_6
            /// </summary>
            [EnumMember(Value = "set_6")]
            Set6 = 34,
            /// <summary>
            /// Enum Map6 for value: map_6
            /// </summary>
            [EnumMember(Value = "map_6")]
            Map6 = 35,
            /// <summary>
            /// Enum Break6 for value: break_6
            /// </summary>
            [EnumMember(Value = "break_6")]
            Break6 = 36,
            /// <summary>
            /// Enum Set7 for value: set_7
            /// </summary>
            [EnumMember(Value = "set_7")]
            Set7 = 37,
            /// <summary>
            /// Enum Map7 for value: map_7
            /// </summary>
            [EnumMember(Value = "map_7")]
            Map7 = 38,
            /// <summary>
            /// Enum Quarter1 for value: quarter_1
            /// </summary>
            [EnumMember(Value = "quarter_1")]
            Quarter1 = 39,
            /// <summary>
            /// Enum Quarter2 for value: quarter_2
            /// </summary>
            [EnumMember(Value = "quarter_2")]
            Quarter2 = 40,
            /// <summary>
            /// Enum Quarter3 for value: quarter_3
            /// </summary>
            [EnumMember(Value = "quarter_3")]
            Quarter3 = 41,
            /// <summary>
            /// Enum Quarter4 for value: quarter_4
            /// </summary>
            [EnumMember(Value = "quarter_4")]
            Quarter4 = 42,
            /// <summary>
            /// Enum Overtime for value: overtime
            /// </summary>
            [EnumMember(Value = "overtime")]
            Overtime = 43,
            /// <summary>
            /// Enum Inning1 for value: inning_1
            /// </summary>
            [EnumMember(Value = "inning_1")]
            Inning1 = 44,
            /// <summary>
            /// Enum Inning2 for value: inning_2
            /// </summary>
            [EnumMember(Value = "inning_2")]
            Inning2 = 45,
            /// <summary>
            /// Enum Inning3 for value: inning_3
            /// </summary>
            [EnumMember(Value = "inning_3")]
            Inning3 = 46,
            /// <summary>
            /// Enum Inning4 for value: inning_4
            /// </summary>
            [EnumMember(Value = "inning_4")]
            Inning4 = 47,
            /// <summary>
            /// Enum Inning5 for value: inning_5
            /// </summary>
            [EnumMember(Value = "inning_5")]
            Inning5 = 48,
            /// <summary>
            /// Enum Inning6 for value: inning_6
            /// </summary>
            [EnumMember(Value = "inning_6")]
            Inning6 = 49,
            /// <summary>
            /// Enum Inning7 for value: inning_7
            /// </summary>
            [EnumMember(Value = "inning_7")]
            Inning7 = 50,
            /// <summary>
            /// Enum Inning8 for value: inning_8
            /// </summary>
            [EnumMember(Value = "inning_8")]
            Inning8 = 51,
            /// <summary>
            /// Enum Inning9 for value: inning_9
            /// </summary>
            [EnumMember(Value = "inning_9")]
            Inning9 = 52,
            /// <summary>
            /// Enum Extrainnings for value: extra_innings
            /// </summary>
            [EnumMember(Value = "extra_innings")]
            Extrainnings = 53,
            /// <summary>
            /// Enum Pretoss for value: pre_toss
            /// </summary>
            [EnumMember(Value = "pre_toss")]
            Pretoss = 54,
            /// <summary>
            /// Enum Posttoss for value: post_toss
            /// </summary>
            [EnumMember(Value = "post_toss")]
            Posttoss = 55,
            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            [EnumMember(Value = "suspended")]
            Suspended = 56,
            /// <summary>
            /// Enum Inprogress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            Inprogress = 57,
            /// <summary>
            /// Enum Break for value: break
            /// </summary>
            [EnumMember(Value = "break")]
            Break = 58,
            /// <summary>
            /// Enum Innings1 for value: innings_1
            /// </summary>
            [EnumMember(Value = "innings_1")]
            Innings1 = 59,
            /// <summary>
            /// Enum Innings2 for value: innings_2
            /// </summary>
            [EnumMember(Value = "innings_2")]
            Innings2 = 60,
            /// <summary>
            /// Enum Innings3 for value: innings_3
            /// </summary>
            [EnumMember(Value = "innings_3")]
            Innings3 = 61,
            /// <summary>
            /// Enum Innings4 for value: innings_4
            /// </summary>
            [EnumMember(Value = "innings_4")]
            Innings4 = 62,
            /// <summary>
            /// Enum Period1 for value: period_1
            /// </summary>
            [EnumMember(Value = "period_1")]
            Period1 = 63,
            /// <summary>
            /// Enum Firstbreak for value: first_break
            /// </summary>
            [EnumMember(Value = "first_break")]
            Firstbreak = 64,
            /// <summary>
            /// Enum Period2 for value: period_2
            /// </summary>
            [EnumMember(Value = "period_2")]
            Period2 = 65,
            /// <summary>
            /// Enum Secondbreak for value: second_break
            /// </summary>
            [EnumMember(Value = "second_break")]
            Secondbreak = 66,
            /// <summary>
            /// Enum Period3 for value: period_3
            /// </summary>
            [EnumMember(Value = "period_3")]
            Period3 = 67,
            /// <summary>
            /// Enum Superover1 for value: super_over_1
            /// </summary>
            [EnumMember(Value = "super_over_1")]
            Superover1 = 68,
            /// <summary>
            /// Enum Superover2 for value: super_over_2
            /// </summary>
            [EnumMember(Value = "super_over_2")]
            Superover2 = 69,
            /// <summary>
            /// Enum Awaitingsuperover for value: awaiting_super_over
            /// </summary>
            [EnumMember(Value = "awaiting_super_over")]
            Awaitingsuperover = 70,
            /// <summary>
            /// Enum Awaitingovertime for value: awaiting_overtime
            /// </summary>
            [EnumMember(Value = "awaiting_overtime")]
            Awaitingovertime = 71,
            /// <summary>
            /// Enum Awaitinggoldenset for value: awaiting_golden_set
            /// </summary>
            [EnumMember(Value = "awaiting_golden_set")]
            Awaitinggoldenset = 72,
            /// <summary>
            /// Enum Goldenset for value: golden_set
            /// </summary>
            [EnumMember(Value = "golden_set")]
            Goldenset = 73,
            /// <summary>
            /// Enum Aftergoldenset for value: after_golden_set
            /// </summary>
            [EnumMember(Value = "after_golden_set")]
            Aftergoldenset = 74,
            /// <summary>
            /// Enum Delayed for value: delayed
            /// </summary>
            [EnumMember(Value = "delayed")]
            Delayed = 75,
            /// <summary>
            /// Enum Abandoned for value: abandoned
            /// </summary>
            [EnumMember(Value = "abandoned")]
            Abandoned = 76,
            /// <summary>
            /// Enum Finished for value: finished
            /// </summary>
            [EnumMember(Value = "finished")]
            Finished = 77,
            /// <summary>
            /// Enum Atthepost for value: at_the_post
            /// </summary>
            [EnumMember(Value = "at_the_post")]
            Atthepost = 78,
            /// <summary>
            /// Enum Goingdown for value: going_down
            /// </summary>
            [EnumMember(Value = "going_down")]
            Goingdown = 79,
            /// <summary>
            /// Enum Off for value: off
            /// </summary>
            [EnumMember(Value = "off")]
            Off = 80,
            /// <summary>
            /// Enum Dormant for value: dormant
            /// </summary>
            [EnumMember(Value = "dormant")]
            Dormant = 81,
            /// <summary>
            /// Enum Photograph for value: photograph
            /// </summary>
            [EnumMember(Value = "photograph")]
            Photograph = 82,
            /// <summary>
            /// Enum Result for value: result
            /// </summary>
            [EnumMember(Value = "result")]
            Result = 83,
            /// <summary>
            /// Enum Weighedin for value: weighed_in
            /// </summary>
            [EnumMember(Value = "weighed_in")]
            Weighedin = 84,
            /// <summary>
            /// Enum Amendedresult for value: amended_result
            /// </summary>
            [EnumMember(Value = "amended_result")]
            Amendedresult = 85,
            /// <summary>
            /// Enum Racevoid for value: race_void
            /// </summary>
            [EnumMember(Value = "race_void")]
            Racevoid = 86,
            /// <summary>
            /// Enum Goingbehind for value: going_behind
            /// </summary>
            [EnumMember(Value = "going_behind")]
            Goingbehind = 87,
            /// <summary>
            /// Enum Falsestart for value: false_start
            /// </summary>
            [EnumMember(Value = "false_start")]
            Falsestart = 88,
            /// <summary>
            /// Enum Parading for value: parading
            /// </summary>
            [EnumMember(Value = "parading")]
            Parading = 89,
            /// <summary>
            /// Enum Rerun for value: rerun
            /// </summary>
            [EnumMember(Value = "rerun")]
            Rerun = 90,
            /// <summary>
            /// Enum Apptraps for value: app_traps
            /// </summary>
            [EnumMember(Value = "app_traps")]
            Apptraps = 91,
            /// <summary>
            /// Enum Startdelay for value: start_delay
            /// </summary>
            [EnumMember(Value = "start_delay")]
            Startdelay = 92,
            /// <summary>
            /// Enum Goingintraps for value: going_in_traps
            /// </summary>
            [EnumMember(Value = "going_in_traps")]
            Goingintraps = 93,
            /// <summary>
            /// Enum Harerunning for value: hare_running
            /// </summary>
            [EnumMember(Value = "hare_running")]
            Harerunning = 94,
            /// <summary>
            /// Enum Harestopped for value: hare_stopped
            /// </summary>
            [EnumMember(Value = "hare_stopped")]
            Harestopped = 95,
            /// <summary>
            /// Enum Stoppedforsafety for value: stopped_for_safety
            /// </summary>
            [EnumMember(Value = "stopped_for_safety")]
            Stoppedforsafety = 96,
            /// <summary>
            /// Enum Trapsfailed for value: traps_failed
            /// </summary>
            [EnumMember(Value = "traps_failed")]
            Trapsfailed = 97,
            /// <summary>
            /// Enum Norace for value: no_race
            /// </summary>
            [EnumMember(Value = "no_race")]
            Norace = 98        }
        /// <summary>
        /// The current period of the match
        /// </summary>
        /// <value>The current period of the match</value>
        [DataMember(Name="match_period", EmitDefaultValue=false)]
        public MatchPeriodEnum? MatchPeriod { get; set; }
        /// <summary>
        ///  Event state can have the following values: &lt;ul&gt; &lt;li&gt;upcoming: the event is now open for betting &lt;li&gt;live: the event is now live in-play &lt;li&gt;ended: the event has ended and its markets should be settled &lt;li&gt;settled: the event has ended and its markets should be settled &lt;li&gt;cancelled: the event was cancelled and didn&#x27;t take place &lt;li&gt;suspended: the event was suspended and during play time &lt;/ul&gt;     
        /// </summary>
        /// <value> Event state can have the following values: &lt;ul&gt; &lt;li&gt;upcoming: the event is now open for betting &lt;li&gt;live: the event is now live in-play &lt;li&gt;ended: the event has ended and its markets should be settled &lt;li&gt;settled: the event has ended and its markets should be settled &lt;li&gt;cancelled: the event was cancelled and didn&#x27;t take place &lt;li&gt;suspended: the event was suspended and during play time &lt;/ul&gt;     </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StateEnum
        {
            /// <summary>
            /// Enum New for value: new
            /// </summary>
            [EnumMember(Value = "new")]
            New = 1,
            /// <summary>
            /// Enum Upcoming for value: upcoming
            /// </summary>
            [EnumMember(Value = "upcoming")]
            Upcoming = 2,
            /// <summary>
            /// Enum Live for value: live
            /// </summary>
            [EnumMember(Value = "live")]
            Live = 3,
            /// <summary>
            /// Enum Ended for value: ended
            /// </summary>
            [EnumMember(Value = "ended")]
            Ended = 4,
            /// <summary>
            /// Enum Settled for value: settled
            /// </summary>
            [EnumMember(Value = "settled")]
            Settled = 5,
            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 6,
            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            [EnumMember(Value = "suspended")]
            Suspended = 7        }
        /// <summary>
        ///  Event state can have the following values: &lt;ul&gt; &lt;li&gt;upcoming: the event is now open for betting &lt;li&gt;live: the event is now live in-play &lt;li&gt;ended: the event has ended and its markets should be settled &lt;li&gt;settled: the event has ended and its markets should be settled &lt;li&gt;cancelled: the event was cancelled and didn&#x27;t take place &lt;li&gt;suspended: the event was suspended and during play time &lt;/ul&gt;     
        /// </summary>
        /// <value> Event state can have the following values: &lt;ul&gt; &lt;li&gt;upcoming: the event is now open for betting &lt;li&gt;live: the event is now live in-play &lt;li&gt;ended: the event has ended and its markets should be settled &lt;li&gt;settled: the event has ended and its markets should be settled &lt;li&gt;cancelled: the event was cancelled and didn&#x27;t take place &lt;li&gt;suspended: the event was suspended and during play time &lt;/ul&gt;     </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// In case of a tennis match, this indicates who is serving, otherwise it&#x27;s null
        /// </summary>
        /// <value>In case of a tennis match, this indicates who is serving, otherwise it&#x27;s null</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TennisServerEnum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2        }
        /// <summary>
        /// In case of a tennis match, this indicates who is serving, otherwise it&#x27;s null
        /// </summary>
        /// <value>In case of a tennis match, this indicates who is serving, otherwise it&#x27;s null</value>
        [DataMember(Name="tennis_server", EmitDefaultValue=false)]
        public TennisServerEnum TennisServer { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventState" /> class.
        /// </summary>
        /// <param name="actualEndDatetime">When the event actually ended.</param>
        /// <param name="actualStartDatetime">When the event actually went live.</param>
        /// <param name="aggregate"> The score of the first leg in an aggregate.&lt;br&gt; The first value corresponds to the score of the team playing&lt;br&gt; as the home team in the first leg and second value to the away team..</param>
        /// <param name="clock">clock.</param>
        /// <param name="hasLeagueTable">Shows whether there is league table information linked to this event.</param>
        /// <param name="hidden">True if the event is hidden from the Smarkets website (required).</param>
        /// <param name="id">This ID uniquely identifies an event (required).</param>
        /// <param name="info">Additional information about the state of this event.</param>
        /// <param name="instantMatch"> Will instant match be enabled for this event. &lt;br&gt; For more information about this feature read this &lt;a href&#x3D;\&quot;https://help.smarkets.com/hc/en-gb/articles/212106249-Instant-Match\&quot;&gt;help article&lt;/a&gt;      (required).</param>
        /// <param name="matchPeriod">The current period of the match.</param>
        /// <param name="probablePitcher">probablePitcher.</param>
        /// <param name="providerMetadata">Additional metadata from our events provider (required).</param>
        /// <param name="reversed">True if the event name is written in the form &lt;Away Team&gt; at &lt;Home Team&gt;.</param>
        /// <param name="scores">football, point based, set based, cricket, part based, golf, rugby (required).</param>
        /// <param name="showFlags">display the country flag for the both competitors using the country code.</param>
        /// <param name="state"> Event state can have the following values: &lt;ul&gt; &lt;li&gt;upcoming: the event is now open for betting &lt;li&gt;live: the event is now live in-play &lt;li&gt;ended: the event has ended and its markets should be settled &lt;li&gt;settled: the event has ended and its markets should be settled &lt;li&gt;cancelled: the event was cancelled and didn&#x27;t take place &lt;li&gt;suspended: the event was suspended and during play time &lt;/ul&gt;      (required).</param>
        /// <param name="tennisServer">In case of a tennis match, this indicates who is serving, otherwise it&#x27;s null (required).</param>
        /// <param name="visualization">Is visualization enabled for this event (required).</param>
        public EventState(DateTime? actualEndDatetime = default(DateTime?), DateTime? actualStartDatetime = default(DateTime?), List<int?> aggregate = default(List<int?>), EventStatesClock clock = default(EventStatesClock), bool? hasLeagueTable = default(bool?), bool? hidden = default(bool?), string id = default(string), Object info = default(Object), bool? instantMatch = default(bool?), MatchPeriodEnum? matchPeriod = default(MatchPeriodEnum?), EventStatesProbablePitcher probablePitcher = default(EventStatesProbablePitcher), Object providerMetadata = default(Object), bool? reversed = default(bool?), AnyOfeventStateScores scores = default(AnyOfeventStateScores), bool? showFlags = default(bool?), StateEnum state = default(StateEnum), TennisServerEnum tennisServer = default(TennisServerEnum), bool? visualization = default(bool?))
        {
            // to ensure "hidden" is required (not null)
            if (hidden == null)
            {
                throw new InvalidDataException("hidden is a required property for EventState and cannot be null");
            }
            else
            {
                this.Hidden = hidden;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for EventState and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "instantMatch" is required (not null)
            if (instantMatch == null)
            {
                throw new InvalidDataException("instantMatch is a required property for EventState and cannot be null");
            }
            else
            {
                this.InstantMatch = instantMatch;
            }
            // to ensure "providerMetadata" is required (not null)
            if (providerMetadata == null)
            {
                throw new InvalidDataException("providerMetadata is a required property for EventState and cannot be null");
            }
            else
            {
                this.ProviderMetadata = providerMetadata;
            }
            // to ensure "scores" is required (not null)
            if (scores == null)
            {
                throw new InvalidDataException("scores is a required property for EventState and cannot be null");
            }
            else
            {
                this.Scores = scores;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for EventState and cannot be null");
            }
            else
            {
                this.State = state;
            }
            // to ensure "tennisServer" is required (not null)
            if (tennisServer == null)
            {
                throw new InvalidDataException("tennisServer is a required property for EventState and cannot be null");
            }
            else
            {
                this.TennisServer = tennisServer;
            }
            // to ensure "visualization" is required (not null)
            if (visualization == null)
            {
                throw new InvalidDataException("visualization is a required property for EventState and cannot be null");
            }
            else
            {
                this.Visualization = visualization;
            }
            this.ActualEndDatetime = actualEndDatetime;
            this.ActualStartDatetime = actualStartDatetime;
            this.Aggregate = aggregate;
            this.Clock = clock;
            this.HasLeagueTable = hasLeagueTable;
            this.Info = info;
            this.MatchPeriod = matchPeriod;
            this.ProbablePitcher = probablePitcher;
            this.Reversed = reversed;
            this.ShowFlags = showFlags;
        }
        
        /// <summary>
        /// When the event actually ended
        /// </summary>
        /// <value>When the event actually ended</value>
        [DataMember(Name="actual_end_datetime", EmitDefaultValue=false)]
        public DateTime? ActualEndDatetime { get; set; }

        /// <summary>
        /// When the event actually went live
        /// </summary>
        /// <value>When the event actually went live</value>
        [DataMember(Name="actual_start_datetime", EmitDefaultValue=false)]
        public DateTime? ActualStartDatetime { get; set; }

        /// <summary>
        ///  The score of the first leg in an aggregate.&lt;br&gt; The first value corresponds to the score of the team playing&lt;br&gt; as the home team in the first leg and second value to the away team.
        /// </summary>
        /// <value> The score of the first leg in an aggregate.&lt;br&gt; The first value corresponds to the score of the team playing&lt;br&gt; as the home team in the first leg and second value to the away team.</value>
        [DataMember(Name="aggregate", EmitDefaultValue=false)]
        public List<int?> Aggregate { get; set; }

        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [DataMember(Name="clock", EmitDefaultValue=false)]
        public EventStatesClock Clock { get; set; }

        /// <summary>
        /// Shows whether there is league table information linked to this event
        /// </summary>
        /// <value>Shows whether there is league table information linked to this event</value>
        [DataMember(Name="has_league_table", EmitDefaultValue=false)]
        public bool? HasLeagueTable { get; set; }

        /// <summary>
        /// True if the event is hidden from the Smarkets website
        /// </summary>
        /// <value>True if the event is hidden from the Smarkets website</value>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool? Hidden { get; set; }

        /// <summary>
        /// This ID uniquely identifies an event
        /// </summary>
        /// <value>This ID uniquely identifies an event</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Additional information about the state of this event
        /// </summary>
        /// <value>Additional information about the state of this event</value>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public Object Info { get; set; }

        /// <summary>
        ///  Will instant match be enabled for this event. &lt;br&gt; For more information about this feature read this &lt;a href&#x3D;\&quot;https://help.smarkets.com/hc/en-gb/articles/212106249-Instant-Match\&quot;&gt;help article&lt;/a&gt;     
        /// </summary>
        /// <value> Will instant match be enabled for this event. &lt;br&gt; For more information about this feature read this &lt;a href&#x3D;\&quot;https://help.smarkets.com/hc/en-gb/articles/212106249-Instant-Match\&quot;&gt;help article&lt;/a&gt;     </value>
        [DataMember(Name="instant_match", EmitDefaultValue=false)]
        public bool? InstantMatch { get; set; }


        /// <summary>
        /// Gets or Sets ProbablePitcher
        /// </summary>
        [DataMember(Name="probable_pitcher", EmitDefaultValue=false)]
        public EventStatesProbablePitcher ProbablePitcher { get; set; }

        /// <summary>
        /// Additional metadata from our events provider
        /// </summary>
        /// <value>Additional metadata from our events provider</value>
        [DataMember(Name="provider_metadata", EmitDefaultValue=false)]
        public Object ProviderMetadata { get; set; }

        /// <summary>
        /// True if the event name is written in the form &lt;Away Team&gt; at &lt;Home Team&gt;
        /// </summary>
        /// <value>True if the event name is written in the form &lt;Away Team&gt; at &lt;Home Team&gt;</value>
        [DataMember(Name="reversed", EmitDefaultValue=false)]
        public bool? Reversed { get; set; }

        /// <summary>
        /// football, point based, set based, cricket, part based, golf, rugby
        /// </summary>
        /// <value>football, point based, set based, cricket, part based, golf, rugby</value>
        [DataMember(Name="scores", EmitDefaultValue=false)]
        public AnyOfeventStateScores Scores { get; set; }

        /// <summary>
        /// display the country flag for the both competitors using the country code
        /// </summary>
        /// <value>display the country flag for the both competitors using the country code</value>
        [DataMember(Name="show_flags", EmitDefaultValue=false)]
        public bool? ShowFlags { get; set; }



        /// <summary>
        /// Is visualization enabled for this event
        /// </summary>
        /// <value>Is visualization enabled for this event</value>
        [DataMember(Name="visualization", EmitDefaultValue=false)]
        public bool? Visualization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventState {\n");
            sb.Append("  ActualEndDatetime: ").Append(ActualEndDatetime).Append("\n");
            sb.Append("  ActualStartDatetime: ").Append(ActualStartDatetime).Append("\n");
            sb.Append("  Aggregate: ").Append(Aggregate).Append("\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  HasLeagueTable: ").Append(HasLeagueTable).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  InstantMatch: ").Append(InstantMatch).Append("\n");
            sb.Append("  MatchPeriod: ").Append(MatchPeriod).Append("\n");
            sb.Append("  ProbablePitcher: ").Append(ProbablePitcher).Append("\n");
            sb.Append("  ProviderMetadata: ").Append(ProviderMetadata).Append("\n");
            sb.Append("  Reversed: ").Append(Reversed).Append("\n");
            sb.Append("  Scores: ").Append(Scores).Append("\n");
            sb.Append("  ShowFlags: ").Append(ShowFlags).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TennisServer: ").Append(TennisServer).Append("\n");
            sb.Append("  Visualization: ").Append(Visualization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventState);
        }

        /// <summary>
        /// Returns true if EventState instances are equal
        /// </summary>
        /// <param name="input">Instance of EventState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActualEndDatetime == input.ActualEndDatetime ||
                    (this.ActualEndDatetime != null &&
                    this.ActualEndDatetime.Equals(input.ActualEndDatetime))
                ) && 
                (
                    this.ActualStartDatetime == input.ActualStartDatetime ||
                    (this.ActualStartDatetime != null &&
                    this.ActualStartDatetime.Equals(input.ActualStartDatetime))
                ) && 
                (
                    this.Aggregate == input.Aggregate ||
                    this.Aggregate != null &&
                    input.Aggregate != null &&
                    this.Aggregate.SequenceEqual(input.Aggregate)
                ) && 
                (
                    this.Clock == input.Clock ||
                    (this.Clock != null &&
                    this.Clock.Equals(input.Clock))
                ) && 
                (
                    this.HasLeagueTable == input.HasLeagueTable ||
                    (this.HasLeagueTable != null &&
                    this.HasLeagueTable.Equals(input.HasLeagueTable))
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.InstantMatch == input.InstantMatch ||
                    (this.InstantMatch != null &&
                    this.InstantMatch.Equals(input.InstantMatch))
                ) && 
                (
                    this.MatchPeriod == input.MatchPeriod ||
                    (this.MatchPeriod != null &&
                    this.MatchPeriod.Equals(input.MatchPeriod))
                ) && 
                (
                    this.ProbablePitcher == input.ProbablePitcher ||
                    (this.ProbablePitcher != null &&
                    this.ProbablePitcher.Equals(input.ProbablePitcher))
                ) && 
                (
                    this.ProviderMetadata == input.ProviderMetadata ||
                    (this.ProviderMetadata != null &&
                    this.ProviderMetadata.Equals(input.ProviderMetadata))
                ) && 
                (
                    this.Reversed == input.Reversed ||
                    (this.Reversed != null &&
                    this.Reversed.Equals(input.Reversed))
                ) && 
                (
                    this.Scores == input.Scores ||
                    (this.Scores != null &&
                    this.Scores.Equals(input.Scores))
                ) && 
                (
                    this.ShowFlags == input.ShowFlags ||
                    (this.ShowFlags != null &&
                    this.ShowFlags.Equals(input.ShowFlags))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.TennisServer == input.TennisServer ||
                    (this.TennisServer != null &&
                    this.TennisServer.Equals(input.TennisServer))
                ) && 
                (
                    this.Visualization == input.Visualization ||
                    (this.Visualization != null &&
                    this.Visualization.Equals(input.Visualization))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualEndDatetime != null)
                    hashCode = hashCode * 59 + this.ActualEndDatetime.GetHashCode();
                if (this.ActualStartDatetime != null)
                    hashCode = hashCode * 59 + this.ActualStartDatetime.GetHashCode();
                if (this.Aggregate != null)
                    hashCode = hashCode * 59 + this.Aggregate.GetHashCode();
                if (this.Clock != null)
                    hashCode = hashCode * 59 + this.Clock.GetHashCode();
                if (this.HasLeagueTable != null)
                    hashCode = hashCode * 59 + this.HasLeagueTable.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                if (this.InstantMatch != null)
                    hashCode = hashCode * 59 + this.InstantMatch.GetHashCode();
                if (this.MatchPeriod != null)
                    hashCode = hashCode * 59 + this.MatchPeriod.GetHashCode();
                if (this.ProbablePitcher != null)
                    hashCode = hashCode * 59 + this.ProbablePitcher.GetHashCode();
                if (this.ProviderMetadata != null)
                    hashCode = hashCode * 59 + this.ProviderMetadata.GetHashCode();
                if (this.Reversed != null)
                    hashCode = hashCode * 59 + this.Reversed.GetHashCode();
                if (this.Scores != null)
                    hashCode = hashCode * 59 + this.Scores.GetHashCode();
                if (this.ShowFlags != null)
                    hashCode = hashCode * 59 + this.ShowFlags.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.TennisServer != null)
                    hashCode = hashCode * 59 + this.TennisServer.GetHashCode();
                if (this.Visualization != null)
                    hashCode = hashCode * 59 + this.Visualization.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
