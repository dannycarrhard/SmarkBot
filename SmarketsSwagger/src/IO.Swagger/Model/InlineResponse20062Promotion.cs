/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20062Promotion
    /// </summary>
    [DataContract]
        public partial class InlineResponse20062Promotion :  IEquatable<InlineResponse20062Promotion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20062Promotion" /> class.
        /// </summary>
        /// <param name="amountInGbp">amountInGbp (required).</param>
        /// <param name="campaignTag">campaignTag (required).</param>
        /// <param name="creditComment">creditComment (required).</param>
        /// <param name="expiry">expiry (required).</param>
        /// <param name="isSignup">isSignup (required).</param>
        /// <param name="liveFrom">liveFrom (required).</param>
        /// <param name="liveTo">liveTo (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="promoType">promoType (required).</param>
        /// <param name="promotionId">promotionId (required).</param>
        /// <param name="startDate">startDate (required).</param>
        public InlineResponse20062Promotion(string amountInGbp = default(string), string campaignTag = default(string), string creditComment = default(string), DateTime? expiry = default(DateTime?), bool? isSignup = default(bool?), DateTime? liveFrom = default(DateTime?), DateTime? liveTo = default(DateTime?), string name = default(string), string promoType = default(string), int? promotionId = default(int?), DateTime? startDate = default(DateTime?))
        {
            // to ensure "amountInGbp" is required (not null)
            if (amountInGbp == null)
            {
                throw new InvalidDataException("amountInGbp is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.AmountInGbp = amountInGbp;
            }
            // to ensure "campaignTag" is required (not null)
            if (campaignTag == null)
            {
                throw new InvalidDataException("campaignTag is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.CampaignTag = campaignTag;
            }
            // to ensure "creditComment" is required (not null)
            if (creditComment == null)
            {
                throw new InvalidDataException("creditComment is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.CreditComment = creditComment;
            }
            // to ensure "expiry" is required (not null)
            if (expiry == null)
            {
                throw new InvalidDataException("expiry is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.Expiry = expiry;
            }
            // to ensure "isSignup" is required (not null)
            if (isSignup == null)
            {
                throw new InvalidDataException("isSignup is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.IsSignup = isSignup;
            }
            // to ensure "liveFrom" is required (not null)
            if (liveFrom == null)
            {
                throw new InvalidDataException("liveFrom is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.LiveFrom = liveFrom;
            }
            // to ensure "liveTo" is required (not null)
            if (liveTo == null)
            {
                throw new InvalidDataException("liveTo is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.LiveTo = liveTo;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "promoType" is required (not null)
            if (promoType == null)
            {
                throw new InvalidDataException("promoType is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.PromoType = promoType;
            }
            // to ensure "promotionId" is required (not null)
            if (promotionId == null)
            {
                throw new InvalidDataException("promotionId is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.PromotionId = promotionId;
            }
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for InlineResponse20062Promotion and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }
        }
        
        /// <summary>
        /// Gets or Sets AmountInGbp
        /// </summary>
        [DataMember(Name="amount_in_gbp", EmitDefaultValue=false)]
        public string AmountInGbp { get; set; }

        /// <summary>
        /// Gets or Sets CampaignTag
        /// </summary>
        [DataMember(Name="campaign_tag", EmitDefaultValue=false)]
        public string CampaignTag { get; set; }

        /// <summary>
        /// Gets or Sets CreditComment
        /// </summary>
        [DataMember(Name="credit_comment", EmitDefaultValue=false)]
        public string CreditComment { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name="expiry", EmitDefaultValue=false)]
        public DateTime? Expiry { get; set; }

        /// <summary>
        /// Gets or Sets IsSignup
        /// </summary>
        [DataMember(Name="is_signup", EmitDefaultValue=false)]
        public bool? IsSignup { get; set; }

        /// <summary>
        /// Gets or Sets LiveFrom
        /// </summary>
        [DataMember(Name="live_from", EmitDefaultValue=false)]
        public DateTime? LiveFrom { get; set; }

        /// <summary>
        /// Gets or Sets LiveTo
        /// </summary>
        [DataMember(Name="live_to", EmitDefaultValue=false)]
        public DateTime? LiveTo { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PromoType
        /// </summary>
        [DataMember(Name="promo_type", EmitDefaultValue=false)]
        public string PromoType { get; set; }

        /// <summary>
        /// Gets or Sets PromotionId
        /// </summary>
        [DataMember(Name="promotion_id", EmitDefaultValue=false)]
        public int? PromotionId { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20062Promotion {\n");
            sb.Append("  AmountInGbp: ").Append(AmountInGbp).Append("\n");
            sb.Append("  CampaignTag: ").Append(CampaignTag).Append("\n");
            sb.Append("  CreditComment: ").Append(CreditComment).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  IsSignup: ").Append(IsSignup).Append("\n");
            sb.Append("  LiveFrom: ").Append(LiveFrom).Append("\n");
            sb.Append("  LiveTo: ").Append(LiveTo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PromoType: ").Append(PromoType).Append("\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20062Promotion);
        }

        /// <summary>
        /// Returns true if InlineResponse20062Promotion instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20062Promotion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20062Promotion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmountInGbp == input.AmountInGbp ||
                    (this.AmountInGbp != null &&
                    this.AmountInGbp.Equals(input.AmountInGbp))
                ) && 
                (
                    this.CampaignTag == input.CampaignTag ||
                    (this.CampaignTag != null &&
                    this.CampaignTag.Equals(input.CampaignTag))
                ) && 
                (
                    this.CreditComment == input.CreditComment ||
                    (this.CreditComment != null &&
                    this.CreditComment.Equals(input.CreditComment))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.IsSignup == input.IsSignup ||
                    (this.IsSignup != null &&
                    this.IsSignup.Equals(input.IsSignup))
                ) && 
                (
                    this.LiveFrom == input.LiveFrom ||
                    (this.LiveFrom != null &&
                    this.LiveFrom.Equals(input.LiveFrom))
                ) && 
                (
                    this.LiveTo == input.LiveTo ||
                    (this.LiveTo != null &&
                    this.LiveTo.Equals(input.LiveTo))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PromoType == input.PromoType ||
                    (this.PromoType != null &&
                    this.PromoType.Equals(input.PromoType))
                ) && 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountInGbp != null)
                    hashCode = hashCode * 59 + this.AmountInGbp.GetHashCode();
                if (this.CampaignTag != null)
                    hashCode = hashCode * 59 + this.CampaignTag.GetHashCode();
                if (this.CreditComment != null)
                    hashCode = hashCode * 59 + this.CreditComment.GetHashCode();
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.IsSignup != null)
                    hashCode = hashCode * 59 + this.IsSignup.GetHashCode();
                if (this.LiveFrom != null)
                    hashCode = hashCode * 59 + this.LiveFrom.GetHashCode();
                if (this.LiveTo != null)
                    hashCode = hashCode * 59 + this.LiveTo.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PromoType != null)
                    hashCode = hashCode * 59 + this.PromoType.GetHashCode();
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
