/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Bands
    /// </summary>
    [DataContract]
        public partial class Bands :  IEquatable<Bands>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bands" /> class.
        /// </summary>
        /// <param name="mmCommissionType">mmCommissionType (required).</param>
        /// <param name="proCommissionType">proCommissionType (required).</param>
        /// <param name="selectCommissionType">selectCommissionType (required).</param>
        /// <param name="selectPnl">selectPnl (required).</param>
        /// <param name="stdCommissionType">stdCommissionType (required).</param>
        /// <param name="stdPlacedOrders">stdPlacedOrders (required).</param>
        /// <param name="stdPlacedStake">stdPlacedStake (required).</param>
        public Bands(string mmCommissionType = default(string), string proCommissionType = default(string), string selectCommissionType = default(string), PnlByCurrency selectPnl = default(PnlByCurrency), string stdCommissionType = default(string), int? stdPlacedOrders = default(int?), PlacedStakeByCurrency stdPlacedStake = default(PlacedStakeByCurrency))
        {
            // to ensure "mmCommissionType" is required (not null)
            if (mmCommissionType == null)
            {
                throw new InvalidDataException("mmCommissionType is a required property for Bands and cannot be null");
            }
            else
            {
                this.MmCommissionType = mmCommissionType;
            }
            // to ensure "proCommissionType" is required (not null)
            if (proCommissionType == null)
            {
                throw new InvalidDataException("proCommissionType is a required property for Bands and cannot be null");
            }
            else
            {
                this.ProCommissionType = proCommissionType;
            }
            // to ensure "selectCommissionType" is required (not null)
            if (selectCommissionType == null)
            {
                throw new InvalidDataException("selectCommissionType is a required property for Bands and cannot be null");
            }
            else
            {
                this.SelectCommissionType = selectCommissionType;
            }
            // to ensure "selectPnl" is required (not null)
            if (selectPnl == null)
            {
                throw new InvalidDataException("selectPnl is a required property for Bands and cannot be null");
            }
            else
            {
                this.SelectPnl = selectPnl;
            }
            // to ensure "stdCommissionType" is required (not null)
            if (stdCommissionType == null)
            {
                throw new InvalidDataException("stdCommissionType is a required property for Bands and cannot be null");
            }
            else
            {
                this.StdCommissionType = stdCommissionType;
            }
            // to ensure "stdPlacedOrders" is required (not null)
            if (stdPlacedOrders == null)
            {
                throw new InvalidDataException("stdPlacedOrders is a required property for Bands and cannot be null");
            }
            else
            {
                this.StdPlacedOrders = stdPlacedOrders;
            }
            // to ensure "stdPlacedStake" is required (not null)
            if (stdPlacedStake == null)
            {
                throw new InvalidDataException("stdPlacedStake is a required property for Bands and cannot be null");
            }
            else
            {
                this.StdPlacedStake = stdPlacedStake;
            }
        }
        
        /// <summary>
        /// Gets or Sets MmCommissionType
        /// </summary>
        [DataMember(Name="mm_commission_type", EmitDefaultValue=false)]
        public string MmCommissionType { get; set; }

        /// <summary>
        /// Gets or Sets ProCommissionType
        /// </summary>
        [DataMember(Name="pro_commission_type", EmitDefaultValue=false)]
        public string ProCommissionType { get; set; }

        /// <summary>
        /// Gets or Sets SelectCommissionType
        /// </summary>
        [DataMember(Name="select_commission_type", EmitDefaultValue=false)]
        public string SelectCommissionType { get; set; }

        /// <summary>
        /// Gets or Sets SelectPnl
        /// </summary>
        [DataMember(Name="select_pnl", EmitDefaultValue=false)]
        public PnlByCurrency SelectPnl { get; set; }

        /// <summary>
        /// Gets or Sets StdCommissionType
        /// </summary>
        [DataMember(Name="std_commission_type", EmitDefaultValue=false)]
        public string StdCommissionType { get; set; }

        /// <summary>
        /// Gets or Sets StdPlacedOrders
        /// </summary>
        [DataMember(Name="std_placed_orders", EmitDefaultValue=false)]
        public int? StdPlacedOrders { get; set; }

        /// <summary>
        /// Gets or Sets StdPlacedStake
        /// </summary>
        [DataMember(Name="std_placed_stake", EmitDefaultValue=false)]
        public PlacedStakeByCurrency StdPlacedStake { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bands {\n");
            sb.Append("  MmCommissionType: ").Append(MmCommissionType).Append("\n");
            sb.Append("  ProCommissionType: ").Append(ProCommissionType).Append("\n");
            sb.Append("  SelectCommissionType: ").Append(SelectCommissionType).Append("\n");
            sb.Append("  SelectPnl: ").Append(SelectPnl).Append("\n");
            sb.Append("  StdCommissionType: ").Append(StdCommissionType).Append("\n");
            sb.Append("  StdPlacedOrders: ").Append(StdPlacedOrders).Append("\n");
            sb.Append("  StdPlacedStake: ").Append(StdPlacedStake).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bands);
        }

        /// <summary>
        /// Returns true if Bands instances are equal
        /// </summary>
        /// <param name="input">Instance of Bands to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bands input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MmCommissionType == input.MmCommissionType ||
                    (this.MmCommissionType != null &&
                    this.MmCommissionType.Equals(input.MmCommissionType))
                ) && 
                (
                    this.ProCommissionType == input.ProCommissionType ||
                    (this.ProCommissionType != null &&
                    this.ProCommissionType.Equals(input.ProCommissionType))
                ) && 
                (
                    this.SelectCommissionType == input.SelectCommissionType ||
                    (this.SelectCommissionType != null &&
                    this.SelectCommissionType.Equals(input.SelectCommissionType))
                ) && 
                (
                    this.SelectPnl == input.SelectPnl ||
                    (this.SelectPnl != null &&
                    this.SelectPnl.Equals(input.SelectPnl))
                ) && 
                (
                    this.StdCommissionType == input.StdCommissionType ||
                    (this.StdCommissionType != null &&
                    this.StdCommissionType.Equals(input.StdCommissionType))
                ) && 
                (
                    this.StdPlacedOrders == input.StdPlacedOrders ||
                    (this.StdPlacedOrders != null &&
                    this.StdPlacedOrders.Equals(input.StdPlacedOrders))
                ) && 
                (
                    this.StdPlacedStake == input.StdPlacedStake ||
                    (this.StdPlacedStake != null &&
                    this.StdPlacedStake.Equals(input.StdPlacedStake))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MmCommissionType != null)
                    hashCode = hashCode * 59 + this.MmCommissionType.GetHashCode();
                if (this.ProCommissionType != null)
                    hashCode = hashCode * 59 + this.ProCommissionType.GetHashCode();
                if (this.SelectCommissionType != null)
                    hashCode = hashCode * 59 + this.SelectCommissionType.GetHashCode();
                if (this.SelectPnl != null)
                    hashCode = hashCode * 59 + this.SelectPnl.GetHashCode();
                if (this.StdCommissionType != null)
                    hashCode = hashCode * 59 + this.StdCommissionType.GetHashCode();
                if (this.StdPlacedOrders != null)
                    hashCode = hashCode * 59 + this.StdPlacedOrders.GetHashCode();
                if (this.StdPlacedStake != null)
                    hashCode = hashCode * 59 + this.StdPlacedStake.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
