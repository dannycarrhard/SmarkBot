/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body10
    /// </summary>
    [DataContract]
        public partial class Body10 :  IEquatable<Body10>, IValidatableObject
    {
        /// <summary>
        /// Defines Day
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DayEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 6,
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 7,
            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 8,
            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 9,
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 10,
            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 11,
            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 12,
            /// <summary>
            /// Enum _13 for value: 13
            /// </summary>
            [EnumMember(Value = "13")]
            _13 = 13,
            /// <summary>
            /// Enum _14 for value: 14
            /// </summary>
            [EnumMember(Value = "14")]
            _14 = 14,
            /// <summary>
            /// Enum _15 for value: 15
            /// </summary>
            [EnumMember(Value = "15")]
            _15 = 15,
            /// <summary>
            /// Enum _16 for value: 16
            /// </summary>
            [EnumMember(Value = "16")]
            _16 = 16,
            /// <summary>
            /// Enum _17 for value: 17
            /// </summary>
            [EnumMember(Value = "17")]
            _17 = 17,
            /// <summary>
            /// Enum _18 for value: 18
            /// </summary>
            [EnumMember(Value = "18")]
            _18 = 18,
            /// <summary>
            /// Enum _19 for value: 19
            /// </summary>
            [EnumMember(Value = "19")]
            _19 = 19,
            /// <summary>
            /// Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")]
            _20 = 20,
            /// <summary>
            /// Enum _21 for value: 21
            /// </summary>
            [EnumMember(Value = "21")]
            _21 = 21,
            /// <summary>
            /// Enum _22 for value: 22
            /// </summary>
            [EnumMember(Value = "22")]
            _22 = 22,
            /// <summary>
            /// Enum _23 for value: 23
            /// </summary>
            [EnumMember(Value = "23")]
            _23 = 23,
            /// <summary>
            /// Enum _24 for value: 24
            /// </summary>
            [EnumMember(Value = "24")]
            _24 = 24,
            /// <summary>
            /// Enum _25 for value: 25
            /// </summary>
            [EnumMember(Value = "25")]
            _25 = 25,
            /// <summary>
            /// Enum _26 for value: 26
            /// </summary>
            [EnumMember(Value = "26")]
            _26 = 26,
            /// <summary>
            /// Enum _27 for value: 27
            /// </summary>
            [EnumMember(Value = "27")]
            _27 = 27,
            /// <summary>
            /// Enum _28 for value: 28
            /// </summary>
            [EnumMember(Value = "28")]
            _28 = 28,
            /// <summary>
            /// Enum _29 for value: 29
            /// </summary>
            [EnumMember(Value = "29")]
            _29 = 29,
            /// <summary>
            /// Enum _30 for value: 30
            /// </summary>
            [EnumMember(Value = "30")]
            _30 = 30,
            /// <summary>
            /// Enum _31 for value: 31
            /// </summary>
            [EnumMember(Value = "31")]
            _31 = 31        }
        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public DayEnum Day { get; set; }
        /// <summary>
        /// Defines Month
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MonthEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 6,
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 7,
            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 8,
            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 9,
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 10,
            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 11,
            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 12        }
        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public MonthEnum Month { get; set; }
        /// <summary>
        /// Defines Year
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum YearEnum
        {
            /// <summary>
            /// Enum _1900 for value: 1900
            /// </summary>
            [EnumMember(Value = "1900")]
            _1900 = 1,
            /// <summary>
            /// Enum _1901 for value: 1901
            /// </summary>
            [EnumMember(Value = "1901")]
            _1901 = 2,
            /// <summary>
            /// Enum _1902 for value: 1902
            /// </summary>
            [EnumMember(Value = "1902")]
            _1902 = 3,
            /// <summary>
            /// Enum _1903 for value: 1903
            /// </summary>
            [EnumMember(Value = "1903")]
            _1903 = 4,
            /// <summary>
            /// Enum _1904 for value: 1904
            /// </summary>
            [EnumMember(Value = "1904")]
            _1904 = 5,
            /// <summary>
            /// Enum _1905 for value: 1905
            /// </summary>
            [EnumMember(Value = "1905")]
            _1905 = 6,
            /// <summary>
            /// Enum _1906 for value: 1906
            /// </summary>
            [EnumMember(Value = "1906")]
            _1906 = 7,
            /// <summary>
            /// Enum _1907 for value: 1907
            /// </summary>
            [EnumMember(Value = "1907")]
            _1907 = 8,
            /// <summary>
            /// Enum _1908 for value: 1908
            /// </summary>
            [EnumMember(Value = "1908")]
            _1908 = 9,
            /// <summary>
            /// Enum _1909 for value: 1909
            /// </summary>
            [EnumMember(Value = "1909")]
            _1909 = 10,
            /// <summary>
            /// Enum _1910 for value: 1910
            /// </summary>
            [EnumMember(Value = "1910")]
            _1910 = 11,
            /// <summary>
            /// Enum _1911 for value: 1911
            /// </summary>
            [EnumMember(Value = "1911")]
            _1911 = 12,
            /// <summary>
            /// Enum _1912 for value: 1912
            /// </summary>
            [EnumMember(Value = "1912")]
            _1912 = 13,
            /// <summary>
            /// Enum _1913 for value: 1913
            /// </summary>
            [EnumMember(Value = "1913")]
            _1913 = 14,
            /// <summary>
            /// Enum _1914 for value: 1914
            /// </summary>
            [EnumMember(Value = "1914")]
            _1914 = 15,
            /// <summary>
            /// Enum _1915 for value: 1915
            /// </summary>
            [EnumMember(Value = "1915")]
            _1915 = 16,
            /// <summary>
            /// Enum _1916 for value: 1916
            /// </summary>
            [EnumMember(Value = "1916")]
            _1916 = 17,
            /// <summary>
            /// Enum _1917 for value: 1917
            /// </summary>
            [EnumMember(Value = "1917")]
            _1917 = 18,
            /// <summary>
            /// Enum _1918 for value: 1918
            /// </summary>
            [EnumMember(Value = "1918")]
            _1918 = 19,
            /// <summary>
            /// Enum _1919 for value: 1919
            /// </summary>
            [EnumMember(Value = "1919")]
            _1919 = 20,
            /// <summary>
            /// Enum _1920 for value: 1920
            /// </summary>
            [EnumMember(Value = "1920")]
            _1920 = 21,
            /// <summary>
            /// Enum _1921 for value: 1921
            /// </summary>
            [EnumMember(Value = "1921")]
            _1921 = 22,
            /// <summary>
            /// Enum _1922 for value: 1922
            /// </summary>
            [EnumMember(Value = "1922")]
            _1922 = 23,
            /// <summary>
            /// Enum _1923 for value: 1923
            /// </summary>
            [EnumMember(Value = "1923")]
            _1923 = 24,
            /// <summary>
            /// Enum _1924 for value: 1924
            /// </summary>
            [EnumMember(Value = "1924")]
            _1924 = 25,
            /// <summary>
            /// Enum _1925 for value: 1925
            /// </summary>
            [EnumMember(Value = "1925")]
            _1925 = 26,
            /// <summary>
            /// Enum _1926 for value: 1926
            /// </summary>
            [EnumMember(Value = "1926")]
            _1926 = 27,
            /// <summary>
            /// Enum _1927 for value: 1927
            /// </summary>
            [EnumMember(Value = "1927")]
            _1927 = 28,
            /// <summary>
            /// Enum _1928 for value: 1928
            /// </summary>
            [EnumMember(Value = "1928")]
            _1928 = 29,
            /// <summary>
            /// Enum _1929 for value: 1929
            /// </summary>
            [EnumMember(Value = "1929")]
            _1929 = 30,
            /// <summary>
            /// Enum _1930 for value: 1930
            /// </summary>
            [EnumMember(Value = "1930")]
            _1930 = 31,
            /// <summary>
            /// Enum _1931 for value: 1931
            /// </summary>
            [EnumMember(Value = "1931")]
            _1931 = 32,
            /// <summary>
            /// Enum _1932 for value: 1932
            /// </summary>
            [EnumMember(Value = "1932")]
            _1932 = 33,
            /// <summary>
            /// Enum _1933 for value: 1933
            /// </summary>
            [EnumMember(Value = "1933")]
            _1933 = 34,
            /// <summary>
            /// Enum _1934 for value: 1934
            /// </summary>
            [EnumMember(Value = "1934")]
            _1934 = 35,
            /// <summary>
            /// Enum _1935 for value: 1935
            /// </summary>
            [EnumMember(Value = "1935")]
            _1935 = 36,
            /// <summary>
            /// Enum _1936 for value: 1936
            /// </summary>
            [EnumMember(Value = "1936")]
            _1936 = 37,
            /// <summary>
            /// Enum _1937 for value: 1937
            /// </summary>
            [EnumMember(Value = "1937")]
            _1937 = 38,
            /// <summary>
            /// Enum _1938 for value: 1938
            /// </summary>
            [EnumMember(Value = "1938")]
            _1938 = 39,
            /// <summary>
            /// Enum _1939 for value: 1939
            /// </summary>
            [EnumMember(Value = "1939")]
            _1939 = 40,
            /// <summary>
            /// Enum _1940 for value: 1940
            /// </summary>
            [EnumMember(Value = "1940")]
            _1940 = 41,
            /// <summary>
            /// Enum _1941 for value: 1941
            /// </summary>
            [EnumMember(Value = "1941")]
            _1941 = 42,
            /// <summary>
            /// Enum _1942 for value: 1942
            /// </summary>
            [EnumMember(Value = "1942")]
            _1942 = 43,
            /// <summary>
            /// Enum _1943 for value: 1943
            /// </summary>
            [EnumMember(Value = "1943")]
            _1943 = 44,
            /// <summary>
            /// Enum _1944 for value: 1944
            /// </summary>
            [EnumMember(Value = "1944")]
            _1944 = 45,
            /// <summary>
            /// Enum _1945 for value: 1945
            /// </summary>
            [EnumMember(Value = "1945")]
            _1945 = 46,
            /// <summary>
            /// Enum _1946 for value: 1946
            /// </summary>
            [EnumMember(Value = "1946")]
            _1946 = 47,
            /// <summary>
            /// Enum _1947 for value: 1947
            /// </summary>
            [EnumMember(Value = "1947")]
            _1947 = 48,
            /// <summary>
            /// Enum _1948 for value: 1948
            /// </summary>
            [EnumMember(Value = "1948")]
            _1948 = 49,
            /// <summary>
            /// Enum _1949 for value: 1949
            /// </summary>
            [EnumMember(Value = "1949")]
            _1949 = 50,
            /// <summary>
            /// Enum _1950 for value: 1950
            /// </summary>
            [EnumMember(Value = "1950")]
            _1950 = 51,
            /// <summary>
            /// Enum _1951 for value: 1951
            /// </summary>
            [EnumMember(Value = "1951")]
            _1951 = 52,
            /// <summary>
            /// Enum _1952 for value: 1952
            /// </summary>
            [EnumMember(Value = "1952")]
            _1952 = 53,
            /// <summary>
            /// Enum _1953 for value: 1953
            /// </summary>
            [EnumMember(Value = "1953")]
            _1953 = 54,
            /// <summary>
            /// Enum _1954 for value: 1954
            /// </summary>
            [EnumMember(Value = "1954")]
            _1954 = 55,
            /// <summary>
            /// Enum _1955 for value: 1955
            /// </summary>
            [EnumMember(Value = "1955")]
            _1955 = 56,
            /// <summary>
            /// Enum _1956 for value: 1956
            /// </summary>
            [EnumMember(Value = "1956")]
            _1956 = 57,
            /// <summary>
            /// Enum _1957 for value: 1957
            /// </summary>
            [EnumMember(Value = "1957")]
            _1957 = 58,
            /// <summary>
            /// Enum _1958 for value: 1958
            /// </summary>
            [EnumMember(Value = "1958")]
            _1958 = 59,
            /// <summary>
            /// Enum _1959 for value: 1959
            /// </summary>
            [EnumMember(Value = "1959")]
            _1959 = 60,
            /// <summary>
            /// Enum _1960 for value: 1960
            /// </summary>
            [EnumMember(Value = "1960")]
            _1960 = 61,
            /// <summary>
            /// Enum _1961 for value: 1961
            /// </summary>
            [EnumMember(Value = "1961")]
            _1961 = 62,
            /// <summary>
            /// Enum _1962 for value: 1962
            /// </summary>
            [EnumMember(Value = "1962")]
            _1962 = 63,
            /// <summary>
            /// Enum _1963 for value: 1963
            /// </summary>
            [EnumMember(Value = "1963")]
            _1963 = 64,
            /// <summary>
            /// Enum _1964 for value: 1964
            /// </summary>
            [EnumMember(Value = "1964")]
            _1964 = 65,
            /// <summary>
            /// Enum _1965 for value: 1965
            /// </summary>
            [EnumMember(Value = "1965")]
            _1965 = 66,
            /// <summary>
            /// Enum _1966 for value: 1966
            /// </summary>
            [EnumMember(Value = "1966")]
            _1966 = 67,
            /// <summary>
            /// Enum _1967 for value: 1967
            /// </summary>
            [EnumMember(Value = "1967")]
            _1967 = 68,
            /// <summary>
            /// Enum _1968 for value: 1968
            /// </summary>
            [EnumMember(Value = "1968")]
            _1968 = 69,
            /// <summary>
            /// Enum _1969 for value: 1969
            /// </summary>
            [EnumMember(Value = "1969")]
            _1969 = 70,
            /// <summary>
            /// Enum _1970 for value: 1970
            /// </summary>
            [EnumMember(Value = "1970")]
            _1970 = 71,
            /// <summary>
            /// Enum _1971 for value: 1971
            /// </summary>
            [EnumMember(Value = "1971")]
            _1971 = 72,
            /// <summary>
            /// Enum _1972 for value: 1972
            /// </summary>
            [EnumMember(Value = "1972")]
            _1972 = 73,
            /// <summary>
            /// Enum _1973 for value: 1973
            /// </summary>
            [EnumMember(Value = "1973")]
            _1973 = 74,
            /// <summary>
            /// Enum _1974 for value: 1974
            /// </summary>
            [EnumMember(Value = "1974")]
            _1974 = 75,
            /// <summary>
            /// Enum _1975 for value: 1975
            /// </summary>
            [EnumMember(Value = "1975")]
            _1975 = 76,
            /// <summary>
            /// Enum _1976 for value: 1976
            /// </summary>
            [EnumMember(Value = "1976")]
            _1976 = 77,
            /// <summary>
            /// Enum _1977 for value: 1977
            /// </summary>
            [EnumMember(Value = "1977")]
            _1977 = 78,
            /// <summary>
            /// Enum _1978 for value: 1978
            /// </summary>
            [EnumMember(Value = "1978")]
            _1978 = 79,
            /// <summary>
            /// Enum _1979 for value: 1979
            /// </summary>
            [EnumMember(Value = "1979")]
            _1979 = 80,
            /// <summary>
            /// Enum _1980 for value: 1980
            /// </summary>
            [EnumMember(Value = "1980")]
            _1980 = 81,
            /// <summary>
            /// Enum _1981 for value: 1981
            /// </summary>
            [EnumMember(Value = "1981")]
            _1981 = 82,
            /// <summary>
            /// Enum _1982 for value: 1982
            /// </summary>
            [EnumMember(Value = "1982")]
            _1982 = 83,
            /// <summary>
            /// Enum _1983 for value: 1983
            /// </summary>
            [EnumMember(Value = "1983")]
            _1983 = 84,
            /// <summary>
            /// Enum _1984 for value: 1984
            /// </summary>
            [EnumMember(Value = "1984")]
            _1984 = 85,
            /// <summary>
            /// Enum _1985 for value: 1985
            /// </summary>
            [EnumMember(Value = "1985")]
            _1985 = 86,
            /// <summary>
            /// Enum _1986 for value: 1986
            /// </summary>
            [EnumMember(Value = "1986")]
            _1986 = 87,
            /// <summary>
            /// Enum _1987 for value: 1987
            /// </summary>
            [EnumMember(Value = "1987")]
            _1987 = 88,
            /// <summary>
            /// Enum _1988 for value: 1988
            /// </summary>
            [EnumMember(Value = "1988")]
            _1988 = 89,
            /// <summary>
            /// Enum _1989 for value: 1989
            /// </summary>
            [EnumMember(Value = "1989")]
            _1989 = 90,
            /// <summary>
            /// Enum _1990 for value: 1990
            /// </summary>
            [EnumMember(Value = "1990")]
            _1990 = 91,
            /// <summary>
            /// Enum _1991 for value: 1991
            /// </summary>
            [EnumMember(Value = "1991")]
            _1991 = 92,
            /// <summary>
            /// Enum _1992 for value: 1992
            /// </summary>
            [EnumMember(Value = "1992")]
            _1992 = 93,
            /// <summary>
            /// Enum _1993 for value: 1993
            /// </summary>
            [EnumMember(Value = "1993")]
            _1993 = 94,
            /// <summary>
            /// Enum _1994 for value: 1994
            /// </summary>
            [EnumMember(Value = "1994")]
            _1994 = 95,
            /// <summary>
            /// Enum _1995 for value: 1995
            /// </summary>
            [EnumMember(Value = "1995")]
            _1995 = 96,
            /// <summary>
            /// Enum _1996 for value: 1996
            /// </summary>
            [EnumMember(Value = "1996")]
            _1996 = 97,
            /// <summary>
            /// Enum _1997 for value: 1997
            /// </summary>
            [EnumMember(Value = "1997")]
            _1997 = 98,
            /// <summary>
            /// Enum _1998 for value: 1998
            /// </summary>
            [EnumMember(Value = "1998")]
            _1998 = 99,
            /// <summary>
            /// Enum _1999 for value: 1999
            /// </summary>
            [EnumMember(Value = "1999")]
            _1999 = 100,
            /// <summary>
            /// Enum _2000 for value: 2000
            /// </summary>
            [EnumMember(Value = "2000")]
            _2000 = 101,
            /// <summary>
            /// Enum _2001 for value: 2001
            /// </summary>
            [EnumMember(Value = "2001")]
            _2001 = 102,
            /// <summary>
            /// Enum _2002 for value: 2002
            /// </summary>
            [EnumMember(Value = "2002")]
            _2002 = 103,
            /// <summary>
            /// Enum _2003 for value: 2003
            /// </summary>
            [EnumMember(Value = "2003")]
            _2003 = 104,
            /// <summary>
            /// Enum _2004 for value: 2004
            /// </summary>
            [EnumMember(Value = "2004")]
            _2004 = 105,
            /// <summary>
            /// Enum _2005 for value: 2005
            /// </summary>
            [EnumMember(Value = "2005")]
            _2005 = 106,
            /// <summary>
            /// Enum _2006 for value: 2006
            /// </summary>
            [EnumMember(Value = "2006")]
            _2006 = 107,
            /// <summary>
            /// Enum _2007 for value: 2007
            /// </summary>
            [EnumMember(Value = "2007")]
            _2007 = 108,
            /// <summary>
            /// Enum _2008 for value: 2008
            /// </summary>
            [EnumMember(Value = "2008")]
            _2008 = 109,
            /// <summary>
            /// Enum _2009 for value: 2009
            /// </summary>
            [EnumMember(Value = "2009")]
            _2009 = 110,
            /// <summary>
            /// Enum _2010 for value: 2010
            /// </summary>
            [EnumMember(Value = "2010")]
            _2010 = 111,
            /// <summary>
            /// Enum _2011 for value: 2011
            /// </summary>
            [EnumMember(Value = "2011")]
            _2011 = 112,
            /// <summary>
            /// Enum _2012 for value: 2012
            /// </summary>
            [EnumMember(Value = "2012")]
            _2012 = 113,
            /// <summary>
            /// Enum _2013 for value: 2013
            /// </summary>
            [EnumMember(Value = "2013")]
            _2013 = 114,
            /// <summary>
            /// Enum _2014 for value: 2014
            /// </summary>
            [EnumMember(Value = "2014")]
            _2014 = 115,
            /// <summary>
            /// Enum _2015 for value: 2015
            /// </summary>
            [EnumMember(Value = "2015")]
            _2015 = 116,
            /// <summary>
            /// Enum _2016 for value: 2016
            /// </summary>
            [EnumMember(Value = "2016")]
            _2016 = 117,
            /// <summary>
            /// Enum _2017 for value: 2017
            /// </summary>
            [EnumMember(Value = "2017")]
            _2017 = 118,
            /// <summary>
            /// Enum _2018 for value: 2018
            /// </summary>
            [EnumMember(Value = "2018")]
            _2018 = 119,
            /// <summary>
            /// Enum _2019 for value: 2019
            /// </summary>
            [EnumMember(Value = "2019")]
            _2019 = 120        }
        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public YearEnum Year { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body10" /> class.
        /// </summary>
        /// <param name="day">day (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="month">month (required).</param>
        /// <param name="year">year (required).</param>
        public Body10(DayEnum day = default(DayEnum), string email = default(string), MonthEnum month = default(MonthEnum), YearEnum year = default(YearEnum))
        {
            // to ensure "day" is required (not null)
            if (day == null)
            {
                throw new InvalidDataException("day is a required property for Body10 and cannot be null");
            }
            else
            {
                this.Day = day;
            }
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for Body10 and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "month" is required (not null)
            if (month == null)
            {
                throw new InvalidDataException("month is a required property for Body10 and cannot be null");
            }
            else
            {
                this.Month = month;
            }
            // to ensure "year" is required (not null)
            if (year == null)
            {
                throw new InvalidDataException("year is a required property for Body10 and cannot be null");
            }
            else
            {
                this.Year = year;
            }
        }
        

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body10 {\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body10);
        }

        /// <summary>
        /// Returns true if Body10 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body10 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body10 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Month == input.Month ||
                    (this.Month != null &&
                    this.Month.Equals(input.Month))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Month != null)
                    hashCode = hashCode * 59 + this.Month.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
