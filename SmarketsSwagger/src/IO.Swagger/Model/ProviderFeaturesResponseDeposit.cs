/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProviderFeaturesResponseDeposit
    /// </summary>
    [DataContract]
        public partial class ProviderFeaturesResponseDeposit :  IEquatable<ProviderFeaturesResponseDeposit>, IValidatableObject
    {
        /// <summary>
        /// Defines Provider
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProviderEnum
        {
            /// <summary>
            /// Enum Banktransfer for value: bank_transfer
            /// </summary>
            [EnumMember(Value = "bank_transfer")]
            Banktransfer = 1,
            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            [EnumMember(Value = "card")]
            Card = 2,
            /// <summary>
            /// Enum Neteller for value: neteller
            /// </summary>
            [EnumMember(Value = "neteller")]
            Neteller = 3,
            /// <summary>
            /// Enum Skrill for value: skrill
            /// </summary>
            [EnumMember(Value = "skrill")]
            Skrill = 4,
            /// <summary>
            /// Enum Trustly for value: trustly
            /// </summary>
            [EnumMember(Value = "trustly")]
            Trustly = 5,
            /// <summary>
            /// Enum Paypal for value: paypal
            /// </summary>
            [EnumMember(Value = "paypal")]
            Paypal = 6,
            /// <summary>
            /// Enum Openbanktransfer for value: open_bank_transfer
            /// </summary>
            [EnumMember(Value = "open_bank_transfer")]
            Openbanktransfer = 7,
            /// <summary>
            /// Enum Worldpay for value: worldpay
            /// </summary>
            [EnumMember(Value = "worldpay")]
            Worldpay = 8        }
        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public ProviderEnum Provider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderFeaturesResponseDeposit" /> class.
        /// </summary>
        /// <param name="customerFee">customerFee (required).</param>
        /// <param name="dailyLimit">dailyLimit (required).</param>
        /// <param name="maxAmount">maxAmount (required).</param>
        /// <param name="minAmount">minAmount (required).</param>
        /// <param name="processingHours">processingHours (required).</param>
        /// <param name="provider">provider (required).</param>
        public ProviderFeaturesResponseDeposit(Money1 customerFee = default(Money1), Money1 dailyLimit = default(Money1), Money1 maxAmount = default(Money1), Money1 minAmount = default(Money1), int? processingHours = default(int?), ProviderEnum provider = default(ProviderEnum))
        {
            // to ensure "customerFee" is required (not null)
            if (customerFee == null)
            {
                throw new InvalidDataException("customerFee is a required property for ProviderFeaturesResponseDeposit and cannot be null");
            }
            else
            {
                this.CustomerFee = customerFee;
            }
            // to ensure "dailyLimit" is required (not null)
            if (dailyLimit == null)
            {
                throw new InvalidDataException("dailyLimit is a required property for ProviderFeaturesResponseDeposit and cannot be null");
            }
            else
            {
                this.DailyLimit = dailyLimit;
            }
            // to ensure "maxAmount" is required (not null)
            if (maxAmount == null)
            {
                throw new InvalidDataException("maxAmount is a required property for ProviderFeaturesResponseDeposit and cannot be null");
            }
            else
            {
                this.MaxAmount = maxAmount;
            }
            // to ensure "minAmount" is required (not null)
            if (minAmount == null)
            {
                throw new InvalidDataException("minAmount is a required property for ProviderFeaturesResponseDeposit and cannot be null");
            }
            else
            {
                this.MinAmount = minAmount;
            }
            // to ensure "processingHours" is required (not null)
            if (processingHours == null)
            {
                throw new InvalidDataException("processingHours is a required property for ProviderFeaturesResponseDeposit and cannot be null");
            }
            else
            {
                this.ProcessingHours = processingHours;
            }
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException("provider is a required property for ProviderFeaturesResponseDeposit and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }
        }
        
        /// <summary>
        /// Gets or Sets CustomerFee
        /// </summary>
        [DataMember(Name="customer_fee", EmitDefaultValue=false)]
        public Money1 CustomerFee { get; set; }

        /// <summary>
        /// Gets or Sets DailyLimit
        /// </summary>
        [DataMember(Name="daily_limit", EmitDefaultValue=false)]
        public Money1 DailyLimit { get; set; }

        /// <summary>
        /// Gets or Sets MaxAmount
        /// </summary>
        [DataMember(Name="max_amount", EmitDefaultValue=false)]
        public Money1 MaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets MinAmount
        /// </summary>
        [DataMember(Name="min_amount", EmitDefaultValue=false)]
        public Money1 MinAmount { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingHours
        /// </summary>
        [DataMember(Name="processing_hours", EmitDefaultValue=false)]
        public int? ProcessingHours { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProviderFeaturesResponseDeposit {\n");
            sb.Append("  CustomerFee: ").Append(CustomerFee).Append("\n");
            sb.Append("  DailyLimit: ").Append(DailyLimit).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  ProcessingHours: ").Append(ProcessingHours).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProviderFeaturesResponseDeposit);
        }

        /// <summary>
        /// Returns true if ProviderFeaturesResponseDeposit instances are equal
        /// </summary>
        /// <param name="input">Instance of ProviderFeaturesResponseDeposit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProviderFeaturesResponseDeposit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerFee == input.CustomerFee ||
                    (this.CustomerFee != null &&
                    this.CustomerFee.Equals(input.CustomerFee))
                ) && 
                (
                    this.DailyLimit == input.DailyLimit ||
                    (this.DailyLimit != null &&
                    this.DailyLimit.Equals(input.DailyLimit))
                ) && 
                (
                    this.MaxAmount == input.MaxAmount ||
                    (this.MaxAmount != null &&
                    this.MaxAmount.Equals(input.MaxAmount))
                ) && 
                (
                    this.MinAmount == input.MinAmount ||
                    (this.MinAmount != null &&
                    this.MinAmount.Equals(input.MinAmount))
                ) && 
                (
                    this.ProcessingHours == input.ProcessingHours ||
                    (this.ProcessingHours != null &&
                    this.ProcessingHours.Equals(input.ProcessingHours))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerFee != null)
                    hashCode = hashCode * 59 + this.CustomerFee.GetHashCode();
                if (this.DailyLimit != null)
                    hashCode = hashCode * 59 + this.DailyLimit.GetHashCode();
                if (this.MaxAmount != null)
                    hashCode = hashCode * 59 + this.MaxAmount.GetHashCode();
                if (this.MinAmount != null)
                    hashCode = hashCode * 59 + this.MinAmount.GetHashCode();
                if (this.ProcessingHours != null)
                    hashCode = hashCode * 59 + this.ProcessingHours.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
