/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WidgetSlideDetail
    /// </summary>
    [DataContract]
        public partial class WidgetSlideDetail :  IEquatable<WidgetSlideDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WidgetSlideDetail" /> class.
        /// </summary>
        /// <param name="bgDefault">bgDefault.</param>
        /// <param name="bgGrad">bgGrad.</param>
        /// <param name="bgGradEnd">bgGradEnd.</param>
        /// <param name="bgGradStart">bgGradStart.</param>
        /// <param name="description">description.</param>
        /// <param name="end">end.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="link">link (required).</param>
        /// <param name="linkText">linkText.</param>
        /// <param name="name">name (required).</param>
        /// <param name="start">start.</param>
        /// <param name="title">title.</param>
        /// <param name="tncUrl">tncUrl.</param>
        public WidgetSlideDetail(string bgDefault = default(string), string bgGrad = default(string), string bgGradEnd = default(string), string bgGradStart = default(string), string description = default(string), DateTime? end = default(DateTime?), string imageUrl = default(string), string link = default(string), string linkText = default(string), string name = default(string), DateTime? start = default(DateTime?), string title = default(string), string tncUrl = default(string))
        {
            // to ensure "link" is required (not null)
            if (link == null)
            {
                throw new InvalidDataException("link is a required property for WidgetSlideDetail and cannot be null");
            }
            else
            {
                this.Link = link;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for WidgetSlideDetail and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.BgDefault = bgDefault;
            this.BgGrad = bgGrad;
            this.BgGradEnd = bgGradEnd;
            this.BgGradStart = bgGradStart;
            this.Description = description;
            this.End = end;
            this.ImageUrl = imageUrl;
            this.LinkText = linkText;
            this.Start = start;
            this.Title = title;
            this.TncUrl = tncUrl;
        }
        
        /// <summary>
        /// Gets or Sets BgDefault
        /// </summary>
        [DataMember(Name="bg_default", EmitDefaultValue=false)]
        public string BgDefault { get; set; }

        /// <summary>
        /// Gets or Sets BgGrad
        /// </summary>
        [DataMember(Name="bg_grad", EmitDefaultValue=false)]
        public string BgGrad { get; set; }

        /// <summary>
        /// Gets or Sets BgGradEnd
        /// </summary>
        [DataMember(Name="bg_grad_end", EmitDefaultValue=false)]
        public string BgGradEnd { get; set; }

        /// <summary>
        /// Gets or Sets BgGradStart
        /// </summary>
        [DataMember(Name="bg_grad_start", EmitDefaultValue=false)]
        public string BgGradStart { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public DateTime? End { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="image_url", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets LinkText
        /// </summary>
        [DataMember(Name="link_text", EmitDefaultValue=false)]
        public string LinkText { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTime? Start { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets TncUrl
        /// </summary>
        [DataMember(Name="tnc_url", EmitDefaultValue=false)]
        public string TncUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WidgetSlideDetail {\n");
            sb.Append("  BgDefault: ").Append(BgDefault).Append("\n");
            sb.Append("  BgGrad: ").Append(BgGrad).Append("\n");
            sb.Append("  BgGradEnd: ").Append(BgGradEnd).Append("\n");
            sb.Append("  BgGradStart: ").Append(BgGradStart).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  LinkText: ").Append(LinkText).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TncUrl: ").Append(TncUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WidgetSlideDetail);
        }

        /// <summary>
        /// Returns true if WidgetSlideDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of WidgetSlideDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WidgetSlideDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BgDefault == input.BgDefault ||
                    (this.BgDefault != null &&
                    this.BgDefault.Equals(input.BgDefault))
                ) && 
                (
                    this.BgGrad == input.BgGrad ||
                    (this.BgGrad != null &&
                    this.BgGrad.Equals(input.BgGrad))
                ) && 
                (
                    this.BgGradEnd == input.BgGradEnd ||
                    (this.BgGradEnd != null &&
                    this.BgGradEnd.Equals(input.BgGradEnd))
                ) && 
                (
                    this.BgGradStart == input.BgGradStart ||
                    (this.BgGradStart != null &&
                    this.BgGradStart.Equals(input.BgGradStart))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.LinkText == input.LinkText ||
                    (this.LinkText != null &&
                    this.LinkText.Equals(input.LinkText))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.TncUrl == input.TncUrl ||
                    (this.TncUrl != null &&
                    this.TncUrl.Equals(input.TncUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BgDefault != null)
                    hashCode = hashCode * 59 + this.BgDefault.GetHashCode();
                if (this.BgGrad != null)
                    hashCode = hashCode * 59 + this.BgGrad.GetHashCode();
                if (this.BgGradEnd != null)
                    hashCode = hashCode * 59 + this.BgGradEnd.GetHashCode();
                if (this.BgGradStart != null)
                    hashCode = hashCode * 59 + this.BgGradStart.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.LinkText != null)
                    hashCode = hashCode * 59 + this.LinkText.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.TncUrl != null)
                    hashCode = hashCode * 59 + this.TncUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
