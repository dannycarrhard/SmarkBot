/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Data provider information for the event along with the respective Smarkets event ID
    /// </summary>
    [DataContract]
        public partial class Mapping :  IEquatable<Mapping>, IValidatableObject
    {
        /// <summary>
        /// The entity type of the event. Provider ID is unique for each entity type
        /// </summary>
        /// <value>The entity type of the event. Provider ID is unique for each entity type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EntityTypeEnum
        {
            /// <summary>
            /// Enum Match for value: match
            /// </summary>
            [EnumMember(Value = "match")]
            Match = 1,
            /// <summary>
            /// Enum Tournament for value: tournament
            /// </summary>
            [EnumMember(Value = "tournament")]
            Tournament = 2,
            /// <summary>
            /// Enum Season for value: season
            /// </summary>
            [EnumMember(Value = "season")]
            Season = 3,
            /// <summary>
            /// Enum Simpletournament for value: simple_tournament
            /// </summary>
            [EnumMember(Value = "simple_tournament")]
            Simpletournament = 4,
            /// <summary>
            /// Enum Stage for value: stage
            /// </summary>
            [EnumMember(Value = "stage")]
            Stage = 5        }
        /// <summary>
        /// The entity type of the event. Provider ID is unique for each entity type
        /// </summary>
        /// <value>The entity type of the event. Provider ID is unique for each entity type</value>
        [DataMember(Name="entity_type", EmitDefaultValue=false)]
        public EntityTypeEnum EntityType { get; set; }
        /// <summary>
        /// The name of the provider for which mappings are requested
        /// </summary>
        /// <value>The name of the provider for which mappings are requested</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProviderNameEnum
        {
            /// <summary>
            /// Enum Betradar for value: betradar
            /// </summary>
            [EnumMember(Value = "betradar")]
            Betradar = 1,
            /// <summary>
            /// Enum Optasdapi for value: opta_sdapi
            /// </summary>
            [EnumMember(Value = "opta_sdapi")]
            Optasdapi = 2,
            /// <summary>
            /// Enum Betgenius for value: betgenius
            /// </summary>
            [EnumMember(Value = "betgenius")]
            Betgenius = 3,
            /// <summary>
            /// Enum Runningball for value: runningball
            /// </summary>
            [EnumMember(Value = "runningball")]
            Runningball = 4,
            /// <summary>
            /// Enum Pahr for value: pa_hr
            /// </summary>
            [EnumMember(Value = "pa_hr")]
            Pahr = 5        }
        /// <summary>
        /// The name of the provider for which mappings are requested
        /// </summary>
        /// <value>The name of the provider for which mappings are requested</value>
        [DataMember(Name="provider_name", EmitDefaultValue=false)]
        public ProviderNameEnum ProviderName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Mapping" /> class.
        /// </summary>
        /// <param name="created">The datetime the mapping was created in the Smarkets exchange (required).</param>
        /// <param name="entityType">The entity type of the event. Provider ID is unique for each entity type (required) (default to EntityTypeEnum.Match).</param>
        /// <param name="providerId">This ID uniquely identifies the event for the provider (required).</param>
        /// <param name="providerName">The name of the provider for which mappings are requested (required).</param>
        /// <param name="smarketsId">This ID uniquely identifies an event (required).</param>
        public Mapping(string created = default(string), EntityTypeEnum entityType = EntityTypeEnum.Match, string providerId = default(string), ProviderNameEnum providerName = default(ProviderNameEnum), string smarketsId = default(string))
        {
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new InvalidDataException("created is a required property for Mapping and cannot be null");
            }
            else
            {
                this.Created = created;
            }
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new InvalidDataException("entityType is a required property for Mapping and cannot be null");
            }
            else
            {
                this.EntityType = entityType;
            }
            // to ensure "providerId" is required (not null)
            if (providerId == null)
            {
                throw new InvalidDataException("providerId is a required property for Mapping and cannot be null");
            }
            else
            {
                this.ProviderId = providerId;
            }
            // to ensure "providerName" is required (not null)
            if (providerName == null)
            {
                throw new InvalidDataException("providerName is a required property for Mapping and cannot be null");
            }
            else
            {
                this.ProviderName = providerName;
            }
            // to ensure "smarketsId" is required (not null)
            if (smarketsId == null)
            {
                throw new InvalidDataException("smarketsId is a required property for Mapping and cannot be null");
            }
            else
            {
                this.SmarketsId = smarketsId;
            }
        }
        
        /// <summary>
        /// The datetime the mapping was created in the Smarkets exchange
        /// </summary>
        /// <value>The datetime the mapping was created in the Smarkets exchange</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }


        /// <summary>
        /// This ID uniquely identifies the event for the provider
        /// </summary>
        /// <value>This ID uniquely identifies the event for the provider</value>
        [DataMember(Name="provider_id", EmitDefaultValue=false)]
        public string ProviderId { get; set; }


        /// <summary>
        /// This ID uniquely identifies an event
        /// </summary>
        /// <value>This ID uniquely identifies an event</value>
        [DataMember(Name="smarkets_id", EmitDefaultValue=false)]
        public string SmarketsId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Mapping {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  SmarketsId: ").Append(SmarketsId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Mapping);
        }

        /// <summary>
        /// Returns true if Mapping instances are equal
        /// </summary>
        /// <param name="input">Instance of Mapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Mapping input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.ProviderId == input.ProviderId ||
                    (this.ProviderId != null &&
                    this.ProviderId.Equals(input.ProviderId))
                ) && 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                ) && 
                (
                    this.SmarketsId == input.SmarketsId ||
                    (this.SmarketsId != null &&
                    this.SmarketsId.Equals(input.SmarketsId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.ProviderId != null)
                    hashCode = hashCode * 59 + this.ProviderId.GetHashCode();
                if (this.ProviderName != null)
                    hashCode = hashCode * 59 + this.ProviderName.GetHashCode();
                if (this.SmarketsId != null)
                    hashCode = hashCode * 59 + this.SmarketsId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
