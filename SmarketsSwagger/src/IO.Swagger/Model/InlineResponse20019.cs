/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20019
    /// </summary>
    [DataContract]
        public partial class InlineResponse20019 :  IEquatable<InlineResponse20019>, IValidatableObject
    {
        /// <summary>
        /// Defines ColourTheme
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ColourThemeEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            [EnumMember(Value = "light")]
            Light = 1,
            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            [EnumMember(Value = "dark")]
            Dark = 2,
            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = null)]
            Null = 3        }
        /// <summary>
        /// Gets or Sets ColourTheme
        /// </summary>
        [DataMember(Name="colour_theme", EmitDefaultValue=false)]
        public ColourThemeEnum? ColourTheme { get; set; }
        /// <summary>
        /// Defines Locale
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LocaleEnum
        {
            /// <summary>
            /// Enum El for value: el
            /// </summary>
            [EnumMember(Value = "el")]
            El = 1,
            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            [EnumMember(Value = "ro")]
            Ro = 2,
            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            [EnumMember(Value = "sv")]
            Sv = 3,
            /// <summary>
            /// Enum It for value: it
            /// </summary>
            [EnumMember(Value = "it")]
            It = 4,
            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            [EnumMember(Value = "pl")]
            Pl = 5,
            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            [EnumMember(Value = "es")]
            Es = 6,
            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 7,
            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 8,
            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            [EnumMember(Value = "fi")]
            Fi = 9,
            /// <summary>
            /// Enum Da for value: da
            /// </summary>
            [EnumMember(Value = "da")]
            Da = 10,
            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 11,
            /// <summary>
            /// Enum PtPT for value: pt-PT
            /// </summary>
            [EnumMember(Value = "pt-PT")]
            PtPT = 12,
            /// <summary>
            /// Enum ZhHant for value: zh-Hant
            /// </summary>
            [EnumMember(Value = "zh-Hant")]
            ZhHant = 13,
            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 14,
            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 15,
            /// <summary>
            /// Enum Hr for value: hr
            /// </summary>
            [EnumMember(Value = "hr")]
            Hr = 16,
            /// <summary>
            /// Enum ZhHans for value: zh-Hans
            /// </summary>
            [EnumMember(Value = "zh-Hans")]
            ZhHans = 17,
            /// <summary>
            /// Enum EnUS for value: en-US
            /// </summary>
            [EnumMember(Value = "en-US")]
            EnUS = 18,
            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = null)]
            Null = 19        }
        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public LocaleEnum? Locale { get; set; }
        /// <summary>
        /// Defines SettlementNotification
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SettlementNotificationEnum
        {
            /// <summary>
            /// Enum Contractgroupsettlement for value: contract_group_settlement
            /// </summary>
            [EnumMember(Value = "contract_group_settlement")]
            Contractgroupsettlement = 1,
            /// <summary>
            /// Enum Dailysettlementdigest for value: daily_settlement_digest
            /// </summary>
            [EnumMember(Value = "daily_settlement_digest")]
            Dailysettlementdigest = 2,
            /// <summary>
            /// Enum Nonotification for value: no_notification
            /// </summary>
            [EnumMember(Value = "no_notification")]
            Nonotification = 3,
            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = null)]
            Null = 4        }
        /// <summary>
        /// Gets or Sets SettlementNotification
        /// </summary>
        [DataMember(Name="settlement_notification", EmitDefaultValue=false)]
        public SettlementNotificationEnum? SettlementNotification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20019" /> class.
        /// </summary>
        /// <param name="colourBlind">colourBlind.</param>
        /// <param name="colourTheme">colourTheme.</param>
        /// <param name="instantBet">instantBet.</param>
        /// <param name="locale">locale.</param>
        /// <param name="mailingList">mailingList.</param>
        /// <param name="oddsFormat">oddsFormat.</param>
        /// <param name="settlementNotification">settlementNotification.</param>
        /// <param name="showBackerStake">showBackerStake.</param>
        public InlineResponse20019(bool? colourBlind = default(bool?), ColourThemeEnum? colourTheme = default(ColourThemeEnum?), bool? instantBet = default(bool?), LocaleEnum? locale = default(LocaleEnum?), bool? mailingList = default(bool?), string oddsFormat = default(string), SettlementNotificationEnum? settlementNotification = default(SettlementNotificationEnum?), bool? showBackerStake = default(bool?))
        {
            this.ColourBlind = colourBlind;
            this.ColourTheme = colourTheme;
            this.InstantBet = instantBet;
            this.Locale = locale;
            this.MailingList = mailingList;
            this.OddsFormat = oddsFormat;
            this.SettlementNotification = settlementNotification;
            this.ShowBackerStake = showBackerStake;
        }
        
        /// <summary>
        /// Gets or Sets ColourBlind
        /// </summary>
        [DataMember(Name="colour_blind", EmitDefaultValue=false)]
        public bool? ColourBlind { get; set; }


        /// <summary>
        /// Gets or Sets InstantBet
        /// </summary>
        [DataMember(Name="instant_bet", EmitDefaultValue=false)]
        public bool? InstantBet { get; set; }


        /// <summary>
        /// Gets or Sets MailingList
        /// </summary>
        [DataMember(Name="mailing_list", EmitDefaultValue=false)]
        public bool? MailingList { get; set; }

        /// <summary>
        /// Gets or Sets OddsFormat
        /// </summary>
        [DataMember(Name="odds_format", EmitDefaultValue=false)]
        public string OddsFormat { get; set; }


        /// <summary>
        /// Gets or Sets ShowBackerStake
        /// </summary>
        [DataMember(Name="show_backer_stake", EmitDefaultValue=false)]
        public bool? ShowBackerStake { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20019 {\n");
            sb.Append("  ColourBlind: ").Append(ColourBlind).Append("\n");
            sb.Append("  ColourTheme: ").Append(ColourTheme).Append("\n");
            sb.Append("  InstantBet: ").Append(InstantBet).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  MailingList: ").Append(MailingList).Append("\n");
            sb.Append("  OddsFormat: ").Append(OddsFormat).Append("\n");
            sb.Append("  SettlementNotification: ").Append(SettlementNotification).Append("\n");
            sb.Append("  ShowBackerStake: ").Append(ShowBackerStake).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20019);
        }

        /// <summary>
        /// Returns true if InlineResponse20019 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20019 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20019 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ColourBlind == input.ColourBlind ||
                    (this.ColourBlind != null &&
                    this.ColourBlind.Equals(input.ColourBlind))
                ) && 
                (
                    this.ColourTheme == input.ColourTheme ||
                    (this.ColourTheme != null &&
                    this.ColourTheme.Equals(input.ColourTheme))
                ) && 
                (
                    this.InstantBet == input.InstantBet ||
                    (this.InstantBet != null &&
                    this.InstantBet.Equals(input.InstantBet))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.MailingList == input.MailingList ||
                    (this.MailingList != null &&
                    this.MailingList.Equals(input.MailingList))
                ) && 
                (
                    this.OddsFormat == input.OddsFormat ||
                    (this.OddsFormat != null &&
                    this.OddsFormat.Equals(input.OddsFormat))
                ) && 
                (
                    this.SettlementNotification == input.SettlementNotification ||
                    (this.SettlementNotification != null &&
                    this.SettlementNotification.Equals(input.SettlementNotification))
                ) && 
                (
                    this.ShowBackerStake == input.ShowBackerStake ||
                    (this.ShowBackerStake != null &&
                    this.ShowBackerStake.Equals(input.ShowBackerStake))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ColourBlind != null)
                    hashCode = hashCode * 59 + this.ColourBlind.GetHashCode();
                if (this.ColourTheme != null)
                    hashCode = hashCode * 59 + this.ColourTheme.GetHashCode();
                if (this.InstantBet != null)
                    hashCode = hashCode * 59 + this.InstantBet.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.MailingList != null)
                    hashCode = hashCode * 59 + this.MailingList.GetHashCode();
                if (this.OddsFormat != null)
                    hashCode = hashCode * 59 + this.OddsFormat.GetHashCode();
                if (this.SettlementNotification != null)
                    hashCode = hashCode * 59 + this.SettlementNotification.GetHashCode();
                if (this.ShowBackerStake != null)
                    hashCode = hashCode * 59 + this.ShowBackerStake.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
