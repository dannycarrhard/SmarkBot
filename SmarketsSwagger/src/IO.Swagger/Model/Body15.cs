/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body15
    /// </summary>
    [DataContract]
        public partial class Body15 :  IEquatable<Body15>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body15" /> class.
        /// </summary>
        /// <param name="buildingName">buildingName (required).</param>
        /// <param name="buildingNumber">buildingNumber (required).</param>
        /// <param name="country">country (required).</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="flatNumber">flatNumber (required).</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="postcode">postcode (required).</param>
        /// <param name="street">street (required).</param>
        /// <param name="substreet">substreet (required).</param>
        /// <param name="town">town (required).</param>
        public Body15(string buildingName = default(string), string buildingNumber = default(string), string country = default(string), string firstName = default(string), string flatNumber = default(string), string lastName = default(string), string phone = default(string), string postcode = default(string), string street = default(string), string substreet = default(string), string town = default(string))
        {
            // to ensure "buildingName" is required (not null)
            if (buildingName == null)
            {
                throw new InvalidDataException("buildingName is a required property for Body15 and cannot be null");
            }
            else
            {
                this.BuildingName = buildingName;
            }
            // to ensure "buildingNumber" is required (not null)
            if (buildingNumber == null)
            {
                throw new InvalidDataException("buildingNumber is a required property for Body15 and cannot be null");
            }
            else
            {
                this.BuildingNumber = buildingNumber;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for Body15 and cannot be null");
            }
            else
            {
                this.Country = country;
            }
            // to ensure "flatNumber" is required (not null)
            if (flatNumber == null)
            {
                throw new InvalidDataException("flatNumber is a required property for Body15 and cannot be null");
            }
            else
            {
                this.FlatNumber = flatNumber;
            }
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for Body15 and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            // to ensure "postcode" is required (not null)
            if (postcode == null)
            {
                throw new InvalidDataException("postcode is a required property for Body15 and cannot be null");
            }
            else
            {
                this.Postcode = postcode;
            }
            // to ensure "street" is required (not null)
            if (street == null)
            {
                throw new InvalidDataException("street is a required property for Body15 and cannot be null");
            }
            else
            {
                this.Street = street;
            }
            // to ensure "substreet" is required (not null)
            if (substreet == null)
            {
                throw new InvalidDataException("substreet is a required property for Body15 and cannot be null");
            }
            else
            {
                this.Substreet = substreet;
            }
            // to ensure "town" is required (not null)
            if (town == null)
            {
                throw new InvalidDataException("town is a required property for Body15 and cannot be null");
            }
            else
            {
                this.Town = town;
            }
            this.FirstName = firstName;
            this.LastName = lastName;
        }
        
        /// <summary>
        /// Gets or Sets BuildingName
        /// </summary>
        [DataMember(Name="building_name", EmitDefaultValue=false)]
        public string BuildingName { get; set; }

        /// <summary>
        /// Gets or Sets BuildingNumber
        /// </summary>
        [DataMember(Name="building_number", EmitDefaultValue=false)]
        public string BuildingNumber { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets FlatNumber
        /// </summary>
        [DataMember(Name="flat_number", EmitDefaultValue=false)]
        public string FlatNumber { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Substreet
        /// </summary>
        [DataMember(Name="substreet", EmitDefaultValue=false)]
        public string Substreet { get; set; }

        /// <summary>
        /// Gets or Sets Town
        /// </summary>
        [DataMember(Name="town", EmitDefaultValue=false)]
        public string Town { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body15 {\n");
            sb.Append("  BuildingName: ").Append(BuildingName).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  FlatNumber: ").Append(FlatNumber).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Substreet: ").Append(Substreet).Append("\n");
            sb.Append("  Town: ").Append(Town).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body15);
        }

        /// <summary>
        /// Returns true if Body15 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body15 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body15 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BuildingName == input.BuildingName ||
                    (this.BuildingName != null &&
                    this.BuildingName.Equals(input.BuildingName))
                ) && 
                (
                    this.BuildingNumber == input.BuildingNumber ||
                    (this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(input.BuildingNumber))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.FlatNumber == input.FlatNumber ||
                    (this.FlatNumber != null &&
                    this.FlatNumber.Equals(input.FlatNumber))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Substreet == input.Substreet ||
                    (this.Substreet != null &&
                    this.Substreet.Equals(input.Substreet))
                ) && 
                (
                    this.Town == input.Town ||
                    (this.Town != null &&
                    this.Town.Equals(input.Town))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuildingName != null)
                    hashCode = hashCode * 59 + this.BuildingName.GetHashCode();
                if (this.BuildingNumber != null)
                    hashCode = hashCode * 59 + this.BuildingNumber.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.FlatNumber != null)
                    hashCode = hashCode * 59 + this.FlatNumber.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.Substreet != null)
                    hashCode = hashCode * 59 + this.Substreet.GetHashCode();
                if (this.Town != null)
                    hashCode = hashCode * 59 + this.Town.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
