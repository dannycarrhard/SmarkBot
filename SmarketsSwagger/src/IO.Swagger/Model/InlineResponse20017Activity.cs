/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20017Activity
    /// </summary>
    [DataContract]
        public partial class InlineResponse20017Activity :  IEquatable<InlineResponse20017Activity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20017Activity" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="bonusChange">bonusChange.</param>
        /// <param name="commission">commission.</param>
        /// <param name="contractGroupId">contractGroupId.</param>
        /// <param name="contractId">contractId.</param>
        /// <param name="eventId">eventId.</param>
        /// <param name="exposure">exposure.</param>
        /// <param name="extra">extra.</param>
        /// <param name="label">label.</param>
        /// <param name="money">money.</param>
        /// <param name="moneyChange">moneyChange.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="price">price.</param>
        /// <param name="seq">seq.</param>
        /// <param name="side">side.</param>
        /// <param name="source">source.</param>
        /// <param name="sourceQuantity">sourceQuantity.</param>
        /// <param name="sourceQuantityChange">sourceQuantityChange.</param>
        /// <param name="subseq">subseq.</param>
        /// <param name="timestamp">timestamp.</param>
        public InlineResponse20017Activity(string amount = default(string), string bonusChange = default(string), string commission = default(string), string contractGroupId = default(string), string contractId = default(string), string eventId = default(string), string exposure = default(string), string extra = default(string), string label = default(string), string money = default(string), string moneyChange = default(string), string orderId = default(string), string price = default(string), int? seq = default(int?), string side = default(string), string source = default(string), string sourceQuantity = default(string), string sourceQuantityChange = default(string), int? subseq = default(int?), string timestamp = default(string))
        {
            this.Amount = amount;
            this.BonusChange = bonusChange;
            this.Commission = commission;
            this.ContractGroupId = contractGroupId;
            this.ContractId = contractId;
            this.EventId = eventId;
            this.Exposure = exposure;
            this.Extra = extra;
            this.Label = label;
            this.Money = money;
            this.MoneyChange = moneyChange;
            this.OrderId = orderId;
            this.Price = price;
            this.Seq = seq;
            this.Side = side;
            this.Source = source;
            this.SourceQuantity = sourceQuantity;
            this.SourceQuantityChange = sourceQuantityChange;
            this.Subseq = subseq;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets BonusChange
        /// </summary>
        [DataMember(Name="bonus_change", EmitDefaultValue=false)]
        public string BonusChange { get; set; }

        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public string Commission { get; set; }

        /// <summary>
        /// Gets or Sets ContractGroupId
        /// </summary>
        [DataMember(Name="contract_group_id", EmitDefaultValue=false)]
        public string ContractGroupId { get; set; }

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [DataMember(Name="contract_id", EmitDefaultValue=false)]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public string EventId { get; set; }

        /// <summary>
        /// Gets or Sets Exposure
        /// </summary>
        [DataMember(Name="exposure", EmitDefaultValue=false)]
        public string Exposure { get; set; }

        /// <summary>
        /// Gets or Sets Extra
        /// </summary>
        [DataMember(Name="extra", EmitDefaultValue=false)]
        public string Extra { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Money
        /// </summary>
        [DataMember(Name="money", EmitDefaultValue=false)]
        public string Money { get; set; }

        /// <summary>
        /// Gets or Sets MoneyChange
        /// </summary>
        [DataMember(Name="money_change", EmitDefaultValue=false)]
        public string MoneyChange { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets Seq
        /// </summary>
        [DataMember(Name="seq", EmitDefaultValue=false)]
        public int? Seq { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets SourceQuantity
        /// </summary>
        [DataMember(Name="source_quantity", EmitDefaultValue=false)]
        public string SourceQuantity { get; set; }

        /// <summary>
        /// Gets or Sets SourceQuantityChange
        /// </summary>
        [DataMember(Name="source_quantity_change", EmitDefaultValue=false)]
        public string SourceQuantityChange { get; set; }

        /// <summary>
        /// Gets or Sets Subseq
        /// </summary>
        [DataMember(Name="subseq", EmitDefaultValue=false)]
        public int? Subseq { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20017Activity {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BonusChange: ").Append(BonusChange).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  ContractGroupId: ").Append(ContractGroupId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Exposure: ").Append(Exposure).Append("\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Money: ").Append(Money).Append("\n");
            sb.Append("  MoneyChange: ").Append(MoneyChange).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SourceQuantity: ").Append(SourceQuantity).Append("\n");
            sb.Append("  SourceQuantityChange: ").Append(SourceQuantityChange).Append("\n");
            sb.Append("  Subseq: ").Append(Subseq).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20017Activity);
        }

        /// <summary>
        /// Returns true if InlineResponse20017Activity instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20017Activity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20017Activity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BonusChange == input.BonusChange ||
                    (this.BonusChange != null &&
                    this.BonusChange.Equals(input.BonusChange))
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                ) && 
                (
                    this.ContractGroupId == input.ContractGroupId ||
                    (this.ContractGroupId != null &&
                    this.ContractGroupId.Equals(input.ContractGroupId))
                ) && 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.Exposure == input.Exposure ||
                    (this.Exposure != null &&
                    this.Exposure.Equals(input.Exposure))
                ) && 
                (
                    this.Extra == input.Extra ||
                    (this.Extra != null &&
                    this.Extra.Equals(input.Extra))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Money == input.Money ||
                    (this.Money != null &&
                    this.Money.Equals(input.Money))
                ) && 
                (
                    this.MoneyChange == input.MoneyChange ||
                    (this.MoneyChange != null &&
                    this.MoneyChange.Equals(input.MoneyChange))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Seq == input.Seq ||
                    (this.Seq != null &&
                    this.Seq.Equals(input.Seq))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.SourceQuantity == input.SourceQuantity ||
                    (this.SourceQuantity != null &&
                    this.SourceQuantity.Equals(input.SourceQuantity))
                ) && 
                (
                    this.SourceQuantityChange == input.SourceQuantityChange ||
                    (this.SourceQuantityChange != null &&
                    this.SourceQuantityChange.Equals(input.SourceQuantityChange))
                ) && 
                (
                    this.Subseq == input.Subseq ||
                    (this.Subseq != null &&
                    this.Subseq.Equals(input.Subseq))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BonusChange != null)
                    hashCode = hashCode * 59 + this.BonusChange.GetHashCode();
                if (this.Commission != null)
                    hashCode = hashCode * 59 + this.Commission.GetHashCode();
                if (this.ContractGroupId != null)
                    hashCode = hashCode * 59 + this.ContractGroupId.GetHashCode();
                if (this.ContractId != null)
                    hashCode = hashCode * 59 + this.ContractId.GetHashCode();
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.Exposure != null)
                    hashCode = hashCode * 59 + this.Exposure.GetHashCode();
                if (this.Extra != null)
                    hashCode = hashCode * 59 + this.Extra.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Money != null)
                    hashCode = hashCode * 59 + this.Money.GetHashCode();
                if (this.MoneyChange != null)
                    hashCode = hashCode * 59 + this.MoneyChange.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Seq != null)
                    hashCode = hashCode * 59 + this.Seq.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.SourceQuantity != null)
                    hashCode = hashCode * 59 + this.SourceQuantity.GetHashCode();
                if (this.SourceQuantityChange != null)
                    hashCode = hashCode * 59 + this.SourceQuantityChange.GetHashCode();
                if (this.Subseq != null)
                    hashCode = hashCode * 59 + this.Subseq.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
