/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetActivityResponseActivities
    /// </summary>
    [DataContract]
        public partial class GetActivityResponseActivities :  IEquatable<GetActivityResponseActivities>, IValidatableObject
    {
        /// <summary>
        /// Defines ActivityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ActivityTypeEnum
        {
            /// <summary>
            /// Enum Follow for value: follow
            /// </summary>
            [EnumMember(Value = "follow")]
            Follow = 1,
            /// <summary>
            /// Enum Reaction for value: reaction
            /// </summary>
            [EnumMember(Value = "reaction")]
            Reaction = 2,
            /// <summary>
            /// Enum Mention for value: mention
            /// </summary>
            [EnumMember(Value = "mention")]
            Mention = 3,
            /// <summary>
            /// Enum Followaccepted for value: follow_accepted
            /// </summary>
            [EnumMember(Value = "follow_accepted")]
            Followaccepted = 4,
            /// <summary>
            /// Enum Comment for value: comment
            /// </summary>
            [EnumMember(Value = "comment")]
            Comment = 5        }
        /// <summary>
        /// Gets or Sets ActivityType
        /// </summary>
        [DataMember(Name="activity_type", EmitDefaultValue=false)]
        public ActivityTypeEnum ActivityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetActivityResponseActivities" /> class.
        /// </summary>
        /// <param name="actingMemberId">actingMemberId (required).</param>
        /// <param name="activityType">activityType (required).</param>
        /// <param name="commentId">commentId.</param>
        /// <param name="created">created (required).</param>
        /// <param name="emojiId">emojiId.</param>
        /// <param name="id">id (required).</param>
        public GetActivityResponseActivities(int? actingMemberId = default(int?), ActivityTypeEnum activityType = default(ActivityTypeEnum), int? commentId = default(int?), string created = default(string), int? emojiId = default(int?), int? id = default(int?))
        {
            // to ensure "actingMemberId" is required (not null)
            if (actingMemberId == null)
            {
                throw new InvalidDataException("actingMemberId is a required property for GetActivityResponseActivities and cannot be null");
            }
            else
            {
                this.ActingMemberId = actingMemberId;
            }
            // to ensure "activityType" is required (not null)
            if (activityType == null)
            {
                throw new InvalidDataException("activityType is a required property for GetActivityResponseActivities and cannot be null");
            }
            else
            {
                this.ActivityType = activityType;
            }
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new InvalidDataException("created is a required property for GetActivityResponseActivities and cannot be null");
            }
            else
            {
                this.Created = created;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for GetActivityResponseActivities and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.CommentId = commentId;
            this.EmojiId = emojiId;
        }
        
        /// <summary>
        /// Gets or Sets ActingMemberId
        /// </summary>
        [DataMember(Name="acting_member_id", EmitDefaultValue=false)]
        public int? ActingMemberId { get; set; }


        /// <summary>
        /// Gets or Sets CommentId
        /// </summary>
        [DataMember(Name="comment_id", EmitDefaultValue=false)]
        public int? CommentId { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets EmojiId
        /// </summary>
        [DataMember(Name="emoji_id", EmitDefaultValue=false)]
        public int? EmojiId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetActivityResponseActivities {\n");
            sb.Append("  ActingMemberId: ").Append(ActingMemberId).Append("\n");
            sb.Append("  ActivityType: ").Append(ActivityType).Append("\n");
            sb.Append("  CommentId: ").Append(CommentId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  EmojiId: ").Append(EmojiId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetActivityResponseActivities);
        }

        /// <summary>
        /// Returns true if GetActivityResponseActivities instances are equal
        /// </summary>
        /// <param name="input">Instance of GetActivityResponseActivities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetActivityResponseActivities input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActingMemberId == input.ActingMemberId ||
                    (this.ActingMemberId != null &&
                    this.ActingMemberId.Equals(input.ActingMemberId))
                ) && 
                (
                    this.ActivityType == input.ActivityType ||
                    (this.ActivityType != null &&
                    this.ActivityType.Equals(input.ActivityType))
                ) && 
                (
                    this.CommentId == input.CommentId ||
                    (this.CommentId != null &&
                    this.CommentId.Equals(input.CommentId))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.EmojiId == input.EmojiId ||
                    (this.EmojiId != null &&
                    this.EmojiId.Equals(input.EmojiId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActingMemberId != null)
                    hashCode = hashCode * 59 + this.ActingMemberId.GetHashCode();
                if (this.ActivityType != null)
                    hashCode = hashCode * 59 + this.ActivityType.GetHashCode();
                if (this.CommentId != null)
                    hashCode = hashCode * 59 + this.CommentId.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.EmojiId != null)
                    hashCode = hashCode * 59 + this.EmojiId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
