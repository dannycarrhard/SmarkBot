/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Competitor
    /// </summary>
    [DataContract]
        public partial class Competitor :  IEquatable<Competitor>, IValidatableObject
    {
        /// <summary>
        /// Used to identify which of the competitors for the event it is.             a,b are used when there is no concept of home/away, for example in tennis matches
        /// </summary>
        /// <value>Used to identify which of the competitors for the event it is.             a,b are used when there is no concept of home/away, for example in tennis matches</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,
            /// <summary>
            /// Enum Home for value: home
            /// </summary>
            [EnumMember(Value = "home")]
            Home = 3,
            /// <summary>
            /// Enum Away for value: away
            /// </summary>
            [EnumMember(Value = "away")]
            Away = 4,
            /// <summary>
            /// Enum Runner for value: Runner
            /// </summary>
            [EnumMember(Value = "Runner")]
            Runner = 5,
            /// <summary>
            /// Enum NonRunner for value: NonRunner
            /// </summary>
            [EnumMember(Value = "NonRunner")]
            NonRunner = 6        }
        /// <summary>
        /// Used to identify which of the competitors for the event it is.             a,b are used when there is no concept of home/away, for example in tennis matches
        /// </summary>
        /// <value>Used to identify which of the competitors for the event it is.             a,b are used when there is no concept of home/away, for example in tennis matches</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Competitor" /> class.
        /// </summary>
        /// <param name="eventId">This ID uniquely identifies an event (required).</param>
        /// <param name="id">This id identifies the competitor, it is unique per event type. (required).</param>
        /// <param name="info">info.</param>
        /// <param name="name">Name of the competitor (required).</param>
        /// <param name="shortCode">Short code for the competitor (required).</param>
        /// <param name="shortName">Short name for the competitor (required).</param>
        /// <param name="slug">An easier way to identify the competitor (required).</param>
        /// <param name="type">Used to identify which of the competitors for the event it is.             a,b are used when there is no concept of home/away, for example in tennis matches (required).</param>
        public Competitor(string eventId = default(string), string id = default(string), CompetitorsInfo info = default(CompetitorsInfo), string name = default(string), string shortCode = default(string), string shortName = default(string), string slug = default(string), TypeEnum type = default(TypeEnum))
        {
            // to ensure "eventId" is required (not null)
            if (eventId == null)
            {
                throw new InvalidDataException("eventId is a required property for Competitor and cannot be null");
            }
            else
            {
                this.EventId = eventId;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Competitor and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Competitor and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "shortCode" is required (not null)
            if (shortCode == null)
            {
                throw new InvalidDataException("shortCode is a required property for Competitor and cannot be null");
            }
            else
            {
                this.ShortCode = shortCode;
            }
            // to ensure "shortName" is required (not null)
            if (shortName == null)
            {
                throw new InvalidDataException("shortName is a required property for Competitor and cannot be null");
            }
            else
            {
                this.ShortName = shortName;
            }
            // to ensure "slug" is required (not null)
            if (slug == null)
            {
                throw new InvalidDataException("slug is a required property for Competitor and cannot be null");
            }
            else
            {
                this.Slug = slug;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Competitor and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Info = info;
        }
        
        /// <summary>
        /// This ID uniquely identifies an event
        /// </summary>
        /// <value>This ID uniquely identifies an event</value>
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public string EventId { get; set; }

        /// <summary>
        /// This id identifies the competitor, it is unique per event type.
        /// </summary>
        /// <value>This id identifies the competitor, it is unique per event type.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public CompetitorsInfo Info { get; set; }

        /// <summary>
        /// Name of the competitor
        /// </summary>
        /// <value>Name of the competitor</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Short code for the competitor
        /// </summary>
        /// <value>Short code for the competitor</value>
        [DataMember(Name="short_code", EmitDefaultValue=false)]
        public string ShortCode { get; set; }

        /// <summary>
        /// Short name for the competitor
        /// </summary>
        /// <value>Short name for the competitor</value>
        [DataMember(Name="short_name", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// An easier way to identify the competitor
        /// </summary>
        /// <value>An easier way to identify the competitor</value>
        [DataMember(Name="slug", EmitDefaultValue=false)]
        public string Slug { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Competitor {\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortCode: ").Append(ShortCode).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Competitor);
        }

        /// <summary>
        /// Returns true if Competitor instances are equal
        /// </summary>
        /// <param name="input">Instance of Competitor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Competitor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortCode == input.ShortCode ||
                    (this.ShortCode != null &&
                    this.ShortCode.Equals(input.ShortCode))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ShortCode != null)
                    hashCode = hashCode * 59 + this.ShortCode.GetHashCode();
                if (this.ShortName != null)
                    hashCode = hashCode * 59 + this.ShortName.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
