/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UsersSignup
    /// </summary>
    [DataContract]
        public partial class UsersSignup :  IEquatable<UsersSignup>, IValidatableObject
    {
        /// <summary>
        /// Defines AccountCurrency
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AccountCurrencyEnum
        {
            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 1,
            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 2,
            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 3,
            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 4,
            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 5,
            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 6        }
        /// <summary>
        /// Gets or Sets AccountCurrency
        /// </summary>
        [DataMember(Name="account_currency", EmitDefaultValue=false)]
        public AccountCurrencyEnum AccountCurrency { get; set; }
        /// <summary>
        /// Defines CardSize
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CardSizeEnum
        {
            /// <summary>
            /// Enum Large for value: large
            /// </summary>
            [EnumMember(Value = "large")]
            Large = 1,
            /// <summary>
            /// Enum Small for value: small
            /// </summary>
            [EnumMember(Value = "small")]
            Small = 2        }
        /// <summary>
        /// Gets or Sets CardSize
        /// </summary>
        [DataMember(Name="card_size", EmitDefaultValue=false)]
        public CardSizeEnum? CardSize { get; set; }
        /// <summary>
        /// Defines KeyboardEntryFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum KeyboardEntryFormatEnum
        {
            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 1,
            /// <summary>
            /// Enum Percentage for value: percentage
            /// </summary>
            [EnumMember(Value = "percentage")]
            Percentage = 2        }
        /// <summary>
        /// Gets or Sets KeyboardEntryFormat
        /// </summary>
        [DataMember(Name="keyboard_entry_format", EmitDefaultValue=false)]
        public KeyboardEntryFormatEnum? KeyboardEntryFormat { get; set; }
        /// <summary>
        /// Defines KeyboardInputMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum KeyboardInputMethodEnum
        {
            /// <summary>
            /// Enum Additive for value: additive
            /// </summary>
            [EnumMember(Value = "additive")]
            Additive = 1,
            /// <summary>
            /// Enum Replace for value: replace
            /// </summary>
            [EnumMember(Value = "replace")]
            Replace = 2        }
        /// <summary>
        /// Gets or Sets KeyboardInputMethod
        /// </summary>
        [DataMember(Name="keyboard_input_method", EmitDefaultValue=false)]
        public KeyboardInputMethodEnum? KeyboardInputMethod { get; set; }
        /// <summary>
        /// Defines SignupSource
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SignupSourceEnum
        {
            /// <summary>
            /// Enum Exchange for value: exchange
            /// </summary>
            [EnumMember(Value = "exchange")]
            Exchange = 1,
            /// <summary>
            /// Enum Sbk for value: sbk
            /// </summary>
            [EnumMember(Value = "sbk")]
            Sbk = 2        }
        /// <summary>
        /// Gets or Sets SignupSource
        /// </summary>
        [DataMember(Name="signup_source", EmitDefaultValue=false)]
        public SignupSourceEnum? SignupSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersSignup" /> class.
        /// </summary>
        /// <param name="accountCurrency">accountCurrency (required).</param>
        /// <param name="buildingName">buildingName (required).</param>
        /// <param name="buildingNumber">buildingNumber (required).</param>
        /// <param name="cardSize">cardSize.</param>
        /// <param name="country">country (required).</param>
        /// <param name="depositLimits">depositLimits.</param>
        /// <param name="dob">dob (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="flatNumber">flatNumber (required).</param>
        /// <param name="keyboardConfigPreviouslySet">keyboardConfigPreviouslySet.</param>
        /// <param name="keyboardEntryFormat">keyboardEntryFormat.</param>
        /// <param name="keyboardInputMethod">keyboardInputMethod.</param>
        /// <param name="keyboardKeys">keyboardKeys.</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="mailingList">mailingList.</param>
        /// <param name="nationalId">nationalId.</param>
        /// <param name="password">password (required).</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="postcode">postcode (required).</param>
        /// <param name="signupSource">signupSource.</param>
        /// <param name="street">street (required).</param>
        /// <param name="substreet">substreet (required).</param>
        /// <param name="town">town (required).</param>
        /// <param name="updatePersonal">updatePersonal (required).</param>
        public UsersSignup(AccountCurrencyEnum accountCurrency = default(AccountCurrencyEnum), string buildingName = default(string), string buildingNumber = default(string), CardSizeEnum? cardSize = default(CardSizeEnum?), string country = default(string), List<V3usersDepositLimits> depositLimits = default(List<V3usersDepositLimits>), DateTime? dob = default(DateTime?), string email = default(string), string firstName = default(string), string flatNumber = default(string), bool? keyboardConfigPreviouslySet = default(bool?), KeyboardEntryFormatEnum? keyboardEntryFormat = default(KeyboardEntryFormatEnum?), KeyboardInputMethodEnum? keyboardInputMethod = default(KeyboardInputMethodEnum?), List<string> keyboardKeys = default(List<string>), string lastName = default(string), bool? mailingList = default(bool?), string nationalId = default(string), string password = default(string), string phone = default(string), string postcode = default(string), SignupSourceEnum? signupSource = default(SignupSourceEnum?), string street = default(string), string substreet = default(string), string town = default(string), bool? updatePersonal = default(bool?))
        {
            // to ensure "accountCurrency" is required (not null)
            if (accountCurrency == null)
            {
                throw new InvalidDataException("accountCurrency is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.AccountCurrency = accountCurrency;
            }
            // to ensure "buildingName" is required (not null)
            if (buildingName == null)
            {
                throw new InvalidDataException("buildingName is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.BuildingName = buildingName;
            }
            // to ensure "buildingNumber" is required (not null)
            if (buildingNumber == null)
            {
                throw new InvalidDataException("buildingNumber is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.BuildingNumber = buildingNumber;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.Country = country;
            }
            // to ensure "dob" is required (not null)
            if (dob == null)
            {
                throw new InvalidDataException("dob is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.Dob = dob;
            }
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "flatNumber" is required (not null)
            if (flatNumber == null)
            {
                throw new InvalidDataException("flatNumber is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.FlatNumber = flatNumber;
            }
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.LastName = lastName;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            // to ensure "postcode" is required (not null)
            if (postcode == null)
            {
                throw new InvalidDataException("postcode is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.Postcode = postcode;
            }
            // to ensure "street" is required (not null)
            if (street == null)
            {
                throw new InvalidDataException("street is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.Street = street;
            }
            // to ensure "substreet" is required (not null)
            if (substreet == null)
            {
                throw new InvalidDataException("substreet is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.Substreet = substreet;
            }
            // to ensure "town" is required (not null)
            if (town == null)
            {
                throw new InvalidDataException("town is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.Town = town;
            }
            // to ensure "updatePersonal" is required (not null)
            if (updatePersonal == null)
            {
                throw new InvalidDataException("updatePersonal is a required property for UsersSignup and cannot be null");
            }
            else
            {
                this.UpdatePersonal = updatePersonal;
            }
            this.CardSize = cardSize;
            this.DepositLimits = depositLimits;
            this.KeyboardConfigPreviouslySet = keyboardConfigPreviouslySet;
            this.KeyboardEntryFormat = keyboardEntryFormat;
            this.KeyboardInputMethod = keyboardInputMethod;
            this.KeyboardKeys = keyboardKeys;
            this.MailingList = mailingList;
            this.NationalId = nationalId;
            this.SignupSource = signupSource;
        }
        

        /// <summary>
        /// Gets or Sets BuildingName
        /// </summary>
        [DataMember(Name="building_name", EmitDefaultValue=false)]
        public string BuildingName { get; set; }

        /// <summary>
        /// Gets or Sets BuildingNumber
        /// </summary>
        [DataMember(Name="building_number", EmitDefaultValue=false)]
        public string BuildingNumber { get; set; }


        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets DepositLimits
        /// </summary>
        [DataMember(Name="deposit_limits", EmitDefaultValue=false)]
        public List<V3usersDepositLimits> DepositLimits { get; set; }

        /// <summary>
        /// Gets or Sets Dob
        /// </summary>
        [DataMember(Name="dob", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Dob { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets FlatNumber
        /// </summary>
        [DataMember(Name="flat_number", EmitDefaultValue=false)]
        public string FlatNumber { get; set; }

        /// <summary>
        /// Gets or Sets KeyboardConfigPreviouslySet
        /// </summary>
        [DataMember(Name="keyboard_config_previously_set", EmitDefaultValue=false)]
        public bool? KeyboardConfigPreviouslySet { get; set; }



        /// <summary>
        /// Gets or Sets KeyboardKeys
        /// </summary>
        [DataMember(Name="keyboard_keys", EmitDefaultValue=false)]
        public List<string> KeyboardKeys { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets MailingList
        /// </summary>
        [DataMember(Name="mailing_list", EmitDefaultValue=false)]
        public bool? MailingList { get; set; }

        /// <summary>
        /// Gets or Sets NationalId
        /// </summary>
        [DataMember(Name="national_id", EmitDefaultValue=false)]
        public string NationalId { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }


        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Substreet
        /// </summary>
        [DataMember(Name="substreet", EmitDefaultValue=false)]
        public string Substreet { get; set; }

        /// <summary>
        /// Gets or Sets Town
        /// </summary>
        [DataMember(Name="town", EmitDefaultValue=false)]
        public string Town { get; set; }

        /// <summary>
        /// Gets or Sets UpdatePersonal
        /// </summary>
        [DataMember(Name="update_personal", EmitDefaultValue=false)]
        public bool? UpdatePersonal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsersSignup {\n");
            sb.Append("  AccountCurrency: ").Append(AccountCurrency).Append("\n");
            sb.Append("  BuildingName: ").Append(BuildingName).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  CardSize: ").Append(CardSize).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DepositLimits: ").Append(DepositLimits).Append("\n");
            sb.Append("  Dob: ").Append(Dob).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  FlatNumber: ").Append(FlatNumber).Append("\n");
            sb.Append("  KeyboardConfigPreviouslySet: ").Append(KeyboardConfigPreviouslySet).Append("\n");
            sb.Append("  KeyboardEntryFormat: ").Append(KeyboardEntryFormat).Append("\n");
            sb.Append("  KeyboardInputMethod: ").Append(KeyboardInputMethod).Append("\n");
            sb.Append("  KeyboardKeys: ").Append(KeyboardKeys).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MailingList: ").Append(MailingList).Append("\n");
            sb.Append("  NationalId: ").Append(NationalId).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  SignupSource: ").Append(SignupSource).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Substreet: ").Append(Substreet).Append("\n");
            sb.Append("  Town: ").Append(Town).Append("\n");
            sb.Append("  UpdatePersonal: ").Append(UpdatePersonal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsersSignup);
        }

        /// <summary>
        /// Returns true if UsersSignup instances are equal
        /// </summary>
        /// <param name="input">Instance of UsersSignup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsersSignup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountCurrency == input.AccountCurrency ||
                    (this.AccountCurrency != null &&
                    this.AccountCurrency.Equals(input.AccountCurrency))
                ) && 
                (
                    this.BuildingName == input.BuildingName ||
                    (this.BuildingName != null &&
                    this.BuildingName.Equals(input.BuildingName))
                ) && 
                (
                    this.BuildingNumber == input.BuildingNumber ||
                    (this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(input.BuildingNumber))
                ) && 
                (
                    this.CardSize == input.CardSize ||
                    (this.CardSize != null &&
                    this.CardSize.Equals(input.CardSize))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.DepositLimits == input.DepositLimits ||
                    this.DepositLimits != null &&
                    input.DepositLimits != null &&
                    this.DepositLimits.SequenceEqual(input.DepositLimits)
                ) && 
                (
                    this.Dob == input.Dob ||
                    (this.Dob != null &&
                    this.Dob.Equals(input.Dob))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.FlatNumber == input.FlatNumber ||
                    (this.FlatNumber != null &&
                    this.FlatNumber.Equals(input.FlatNumber))
                ) && 
                (
                    this.KeyboardConfigPreviouslySet == input.KeyboardConfigPreviouslySet ||
                    (this.KeyboardConfigPreviouslySet != null &&
                    this.KeyboardConfigPreviouslySet.Equals(input.KeyboardConfigPreviouslySet))
                ) && 
                (
                    this.KeyboardEntryFormat == input.KeyboardEntryFormat ||
                    (this.KeyboardEntryFormat != null &&
                    this.KeyboardEntryFormat.Equals(input.KeyboardEntryFormat))
                ) && 
                (
                    this.KeyboardInputMethod == input.KeyboardInputMethod ||
                    (this.KeyboardInputMethod != null &&
                    this.KeyboardInputMethod.Equals(input.KeyboardInputMethod))
                ) && 
                (
                    this.KeyboardKeys == input.KeyboardKeys ||
                    this.KeyboardKeys != null &&
                    input.KeyboardKeys != null &&
                    this.KeyboardKeys.SequenceEqual(input.KeyboardKeys)
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.MailingList == input.MailingList ||
                    (this.MailingList != null &&
                    this.MailingList.Equals(input.MailingList))
                ) && 
                (
                    this.NationalId == input.NationalId ||
                    (this.NationalId != null &&
                    this.NationalId.Equals(input.NationalId))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.SignupSource == input.SignupSource ||
                    (this.SignupSource != null &&
                    this.SignupSource.Equals(input.SignupSource))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Substreet == input.Substreet ||
                    (this.Substreet != null &&
                    this.Substreet.Equals(input.Substreet))
                ) && 
                (
                    this.Town == input.Town ||
                    (this.Town != null &&
                    this.Town.Equals(input.Town))
                ) && 
                (
                    this.UpdatePersonal == input.UpdatePersonal ||
                    (this.UpdatePersonal != null &&
                    this.UpdatePersonal.Equals(input.UpdatePersonal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountCurrency != null)
                    hashCode = hashCode * 59 + this.AccountCurrency.GetHashCode();
                if (this.BuildingName != null)
                    hashCode = hashCode * 59 + this.BuildingName.GetHashCode();
                if (this.BuildingNumber != null)
                    hashCode = hashCode * 59 + this.BuildingNumber.GetHashCode();
                if (this.CardSize != null)
                    hashCode = hashCode * 59 + this.CardSize.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.DepositLimits != null)
                    hashCode = hashCode * 59 + this.DepositLimits.GetHashCode();
                if (this.Dob != null)
                    hashCode = hashCode * 59 + this.Dob.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.FlatNumber != null)
                    hashCode = hashCode * 59 + this.FlatNumber.GetHashCode();
                if (this.KeyboardConfigPreviouslySet != null)
                    hashCode = hashCode * 59 + this.KeyboardConfigPreviouslySet.GetHashCode();
                if (this.KeyboardEntryFormat != null)
                    hashCode = hashCode * 59 + this.KeyboardEntryFormat.GetHashCode();
                if (this.KeyboardInputMethod != null)
                    hashCode = hashCode * 59 + this.KeyboardInputMethod.GetHashCode();
                if (this.KeyboardKeys != null)
                    hashCode = hashCode * 59 + this.KeyboardKeys.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.MailingList != null)
                    hashCode = hashCode * 59 + this.MailingList.GetHashCode();
                if (this.NationalId != null)
                    hashCode = hashCode * 59 + this.NationalId.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.SignupSource != null)
                    hashCode = hashCode * 59 + this.SignupSource.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.Substreet != null)
                    hashCode = hashCode * 59 + this.Substreet.GetHashCode();
                if (this.Town != null)
                    hashCode = hashCode * 59 + this.Town.GetHashCode();
                if (this.UpdatePersonal != null)
                    hashCode = hashCode * 59 + this.UpdatePersonal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
