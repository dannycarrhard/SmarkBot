/* 
 * Smarkets HTTP API
 *
 * This is the HTTP trading API for Smarkets. It can be used to trade on our exchange.     <br><br>For authenticated requests:<br>     <ul>     <li>Get a session token using the login route:     <a class=\"nostyle\" href=\"#/sessions/create_session\"><span>GET /v3/sessions/</span></a></li>     <li>Click on 'Authorize ðŸ”“', enter your token after 'Session-Token ' and click on the 'Authorize' button</li>     </ul>     <p>In order to place bets and get the latest prices without restrictions     using this API, you need to be a Smarkets API user.<br></p>     <p>To become one, please fill <a href=\"https://docs.google.com/forms/d/1qI8RqypNimakPx- bmoUE_lA0YSP3YogKfL8N14STNSM/viewform?edit_requested=true\">this form</a>.</p>     <p>For questions and feedback about the API, use <a href=\"https://community.smarkets.com/c/developers\">our forum</a>.</p>     <p>The API is not public, but we are granting users access on an ongoing basis.</p>     <p>You can find some sample code to help you bootstrap your integration <a href=\"https://github.com/ smarkets/smk_trading_bot\">here</a>.</p>     
 *
 * OpenAPI spec version: 3
 * Contact: api@smarkets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Widget
    /// </summary>
    [DataContract]
        public partial class Widget :  IEquatable<Widget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Widget" /> class.
        /// </summary>
        /// <param name="isMember">isMember (required).</param>
        /// <param name="isTest">isTest.</param>
        /// <param name="slidesDetail">slidesDetail (required).</param>
        /// <param name="widget">widget (required).</param>
        public Widget(bool? isMember = default(bool?), bool? isTest = default(bool?), List<WidgetSlideDetail> slidesDetail = default(List<WidgetSlideDetail>), List<WidgetMedia> widget = default(List<WidgetMedia>))
        {
            // to ensure "isMember" is required (not null)
            if (isMember == null)
            {
                throw new InvalidDataException("isMember is a required property for Widget and cannot be null");
            }
            else
            {
                this.IsMember = isMember;
            }
            // to ensure "slidesDetail" is required (not null)
            if (slidesDetail == null)
            {
                throw new InvalidDataException("slidesDetail is a required property for Widget and cannot be null");
            }
            else
            {
                this.SlidesDetail = slidesDetail;
            }
            // to ensure "widget" is required (not null)
            if (widget == null)
            {
                throw new InvalidDataException("widget is a required property for Widget and cannot be null");
            }
            else
            {
                this._Widget = widget;
            }
            this.IsTest = isTest;
        }
        
        /// <summary>
        /// Gets or Sets IsMember
        /// </summary>
        [DataMember(Name="is_member", EmitDefaultValue=false)]
        public bool? IsMember { get; set; }

        /// <summary>
        /// Gets or Sets IsTest
        /// </summary>
        [DataMember(Name="is_test", EmitDefaultValue=false)]
        public bool? IsTest { get; set; }

        /// <summary>
        /// Gets or Sets SlidesDetail
        /// </summary>
        [DataMember(Name="slides-detail", EmitDefaultValue=false)]
        public List<WidgetSlideDetail> SlidesDetail { get; set; }

        /// <summary>
        /// Gets or Sets _Widget
        /// </summary>
        [DataMember(Name="widget", EmitDefaultValue=false)]
        public List<WidgetMedia> _Widget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Widget {\n");
            sb.Append("  IsMember: ").Append(IsMember).Append("\n");
            sb.Append("  IsTest: ").Append(IsTest).Append("\n");
            sb.Append("  SlidesDetail: ").Append(SlidesDetail).Append("\n");
            sb.Append("  _Widget: ").Append(_Widget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Widget);
        }

        /// <summary>
        /// Returns true if Widget instances are equal
        /// </summary>
        /// <param name="input">Instance of Widget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Widget input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsMember == input.IsMember ||
                    (this.IsMember != null &&
                    this.IsMember.Equals(input.IsMember))
                ) && 
                (
                    this.IsTest == input.IsTest ||
                    (this.IsTest != null &&
                    this.IsTest.Equals(input.IsTest))
                ) && 
                (
                    this.SlidesDetail == input.SlidesDetail ||
                    this.SlidesDetail != null &&
                    input.SlidesDetail != null &&
                    this.SlidesDetail.SequenceEqual(input.SlidesDetail)
                ) && 
                (
                    this._Widget == input._Widget ||
                    this._Widget != null &&
                    input._Widget != null &&
                    this._Widget.SequenceEqual(input._Widget)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsMember != null)
                    hashCode = hashCode * 59 + this.IsMember.GetHashCode();
                if (this.IsTest != null)
                    hashCode = hashCode * 59 + this.IsTest.GetHashCode();
                if (this.SlidesDetail != null)
                    hashCode = hashCode * 59 + this.SlidesDetail.GetHashCode();
                if (this._Widget != null)
                    hashCode = hashCode * 59 + this._Widget.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
